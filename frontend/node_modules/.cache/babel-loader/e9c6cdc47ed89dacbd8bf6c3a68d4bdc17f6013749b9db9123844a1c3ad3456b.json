{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\StudBud\\\\frontend\\\\src\\\\components\\\\Layout.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/components/Layout.jsx\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./layout/Header\";\nimport Navigation from \"./layout/Navigation\";\nimport MainContent from \"./layout/MainContent\";\nimport Footer from \"./layout/Footer\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { getStudySuggestion } from \"../services/aiService\";\nimport { getCardStyles } from \"./utils/themeUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Layout() {\n  _s();\n  // Initialize activeTab from localStorage, default to \"dashboard\" if not set\n  const [activeTab, setActiveTab] = useState(() => {\n    const savedTab = localStorage.getItem(\"activeTab\");\n    return savedTab || \"dashboard\";\n  });\n  const [tasks, setTasks] = useState([]);\n  const [studyStats, setStudyStats] = useState({\n    totalHours: 0,\n    completedTasks: 0,\n    streak: 0,\n    lastActiveDate: null,\n    lastStreakUpdate: null,\n    studyHoursLog: []\n  });\n  const [aiSuggestion, setAiSuggestion] = useState(\"\");\n  const [aiSuggestionType, setAiSuggestionType] = useState(\"task\");\n  const [isAiLoading, setIsAiLoading] = useState(false);\n  const [points, setPoints] = useState(0);\n  const [badges, setBadges] = useState([]);\n  const [currentTheme, setCurrentTheme] = useState(\"Light Mode\");\n  const [unlockedThemes, setUnlockedThemes] = useState([\"Light Mode\"]);\n  const [loading, setLoading] = useState(true);\n\n  // Persist activeTab to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem(\"activeTab\", activeTab);\n  }, [activeTab]);\n  const userId = \"user123\";\n  const styles = getCardStyles(currentTheme);\n  const getLocalDateString = date => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\n    const day = String(date.getDate()).padStart(2, \"0\");\n    return `${year}-${month}-${day}`;\n  };\n  const getNextTheme = () => {\n    if (unlockedThemes.length === 1) {\n      return \"Light Mode\";\n    }\n    const currentIndex = unlockedThemes.indexOf(currentTheme);\n    const nextIndex = (currentIndex + 1) % unlockedThemes.length;\n    return unlockedThemes[nextIndex];\n  };\n  const handleThemeChange = () => {\n    const nextTheme = getNextTheme();\n    setCurrentTheme(nextTheme);\n  };\n  const handlePointsUpdate = newPoints => {\n    setPoints(newPoints);\n  };\n  const handleThemeUnlock = themeName => {\n    if (!unlockedThemes.includes(themeName)) {\n      setUnlockedThemes([...unlockedThemes, themeName]);\n    }\n  };\n  const updateStreak = today => {\n    setStudyStats(prev => {\n      const lastActive = prev.lastActiveDate ? new Date(prev.lastActiveDate) : null;\n      const lastStreakUpdate = prev.lastStreakUpdate ? new Date(prev.lastStreakUpdate) : null;\n      const todayDate = new Date(today);\n      let newStreak = prev.streak;\n      let newLastActiveDate = today;\n      let newLastStreakUpdate = prev.lastStreakUpdate;\n      const lastActiveDateString = lastActive ? getLocalDateString(lastActive) : null;\n      const lastStreakUpdateDateString = lastStreakUpdate ? getLocalDateString(lastStreakUpdate) : null;\n      if (!lastActive || lastActiveDateString !== today) {\n        if (lastActive) {\n          const diffTime = todayDate - lastActive;\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          if (diffDays === 1) {\n            newStreak = prev.streak + 1;\n            newLastStreakUpdate = today;\n          } else if (diffDays > 1) {\n            newStreak = 1;\n            newLastStreakUpdate = today;\n          }\n        } else {\n          newStreak = 1;\n          newLastStreakUpdate = today;\n        }\n      }\n      if (lastStreakUpdate && lastStreakUpdateDateString !== today) {\n        const diffTime = todayDate - new Date(lastStreakUpdate);\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        if (diffDays > 1) {\n          newStreak = 1;\n          newLastStreakUpdate = today;\n        }\n      }\n      const newStats = {\n        ...prev,\n        streak: newStreak,\n        lastActiveDate: newLastActiveDate,\n        lastStreakUpdate: newLastStreakUpdate,\n        studyHoursLog: prev.studyHoursLog || []\n      };\n      return newStats;\n    });\n  };\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        var _data$studyStats, _data$studyStats2, _data$studyStats3, _data$studyStats4, _data$studyStats5, _data$studyStats6;\n        const response = await fetch(`http://localhost:5000/api/user/${userId}`);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch user data: ${response.status}`);\n        }\n        const data = await response.json();\n        const fetchedTasks = (data.tasks || []).map(task => {\n          var _task$pointsAwarded, _task$hours;\n          return {\n            ...task,\n            pointsAwarded: (_task$pointsAwarded = task.pointsAwarded) !== null && _task$pointsAwarded !== void 0 ? _task$pointsAwarded : false,\n            hours: (_task$hours = task.hours) !== null && _task$hours !== void 0 ? _task$hours : 0\n          };\n        });\n        setTasks(fetchedTasks);\n        const fetchedStats = {\n          totalHours: ((_data$studyStats = data.studyStats) === null || _data$studyStats === void 0 ? void 0 : _data$studyStats.totalHours) || 0,\n          completedTasks: ((_data$studyStats2 = data.studyStats) === null || _data$studyStats2 === void 0 ? void 0 : _data$studyStats2.completedTasks) || 0,\n          streak: ((_data$studyStats3 = data.studyStats) === null || _data$studyStats3 === void 0 ? void 0 : _data$studyStats3.streak) || 0,\n          lastActiveDate: ((_data$studyStats4 = data.studyStats) === null || _data$studyStats4 === void 0 ? void 0 : _data$studyStats4.lastActiveDate) || null,\n          lastStreakUpdate: ((_data$studyStats5 = data.studyStats) === null || _data$studyStats5 === void 0 ? void 0 : _data$studyStats5.lastStreakUpdate) || null,\n          studyHoursLog: ((_data$studyStats6 = data.studyStats) === null || _data$studyStats6 === void 0 ? void 0 : _data$studyStats6.studyHoursLog) || []\n        };\n        setStudyStats(fetchedStats);\n        setPoints(data.points || 0);\n        setBadges(data.badges || []);\n        setCurrentTheme(data.currentTheme || \"Light Mode\");\n        setUnlockedThemes(data.unlockedThemes || [\"Light Mode\"]);\n        const today = getLocalDateString(new Date());\n        const {\n          lastActiveDate,\n          streak,\n          lastStreakUpdate\n        } = fetchedStats;\n        let newStats = {\n          ...fetchedStats\n        };\n        if (lastStreakUpdate !== today) {\n          if (!lastActiveDate) {\n            newStats = {\n              ...fetchedStats,\n              lastActiveDate: today,\n              lastStreakUpdate: today,\n              studyHoursLog: fetchedStats.studyHoursLog || []\n            };\n          } else {\n            const lastDate = new Date(lastActiveDate);\n            const currentDate = new Date(today);\n            const diffDays = (currentDate - lastDate) / (1000 * 60 * 60 * 24);\n            if (diffDays === 1) {\n              newStats = {\n                ...fetchedStats,\n                streak: fetchedStats.streak + 1,\n                lastActiveDate: today,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n            } else if (diffDays > 1) {\n              newStats = {\n                ...fetchedStats,\n                streak: 0,\n                lastActiveDate: today,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n            } else {\n              newStats = {\n                ...fetchedStats,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n            }\n          }\n          setStudyStats(newStats);\n        }\n\n        // Store current timestamp (we don't need lastFetchTimestamp variable)\n        localStorage.setItem(\"lastFetchTimestamp\", Date.now().toString());\n        setTimeout(async () => {\n          const incompleteTasks = fetchedTasks.filter(task => !task.completed);\n          if (incompleteTasks.length === 0) {\n            setAiSuggestion(\"You have no incomplete tasks! Add a new task to keep progressing.\");\n            setAiSuggestionType(\"task\");\n          } else {\n            setAiSuggestion(\"Looks like you have some tasks to tackle! Add or complete a task to keep progressing.\");\n            setAiSuggestionType(\"task\");\n          }\n          setLoading(false);\n        }, 500);\n      } catch (error) {\n        console.error(\"Error fetching user data:\", error);\n        toast.error(\"Failed to load your data. Please try again later.\");\n        setLoading(false);\n      }\n    };\n    fetchUserData();\n  }, []);\n  const getStudyTips = async () => {\n    try {\n      setIsAiLoading(true);\n      const suggestion = await getStudySuggestion();\n      setAiSuggestion(suggestion);\n      setAiSuggestionType(\"tip\");\n      setIsAiLoading(false);\n    } catch (error) {\n      console.error(\"Error getting study tips:\", error);\n      setAiSuggestion(\"I couldn't get a study tip right now. Please try again later.\");\n      setIsAiLoading(false);\n    }\n  };\n  const generateSchedule = async () => {\n    try {\n      setIsAiLoading(true);\n      const incompleteTasks = tasks.filter(task => !task.completed);\n      if (incompleteTasks.length === 0) {\n        setAiSuggestion(\"You don't have any incomplete tasks to schedule. Add some tasks first!\");\n        setAiSuggestionType(\"schedule\");\n        setIsAiLoading(false);\n        return;\n      }\n      const taskPriorities = {\n        High: 3,\n        Medium: 2,\n        Low: 1\n      };\n\n      // Sort tasks by priority and due date\n      const sortedTasks = [...incompleteTasks].sort((a, b) => {\n        const priorityDiff = taskPriorities[b.priority] - taskPriorities[a.priority];\n        if (priorityDiff !== 0) return priorityDiff;\n        return new Date(a.dueDate) - new Date(b.dueDate);\n      });\n      const today = new Date();\n      const formattedDate = today.toLocaleDateString(\"en-US\", {\n        weekday: \"long\",\n        month: \"long\",\n        day: \"numeric\"\n      });\n      const schedule = `📅 Study Schedule for ${formattedDate}:\\n\\n${sortedTasks.slice(0, 3).map((task, index) => `${index + 1}. \"${task.title}\" (${task.priority} Priority) - Allocate ${task.hours || 1} hour(s)`).join(\"\\n\")}\\n\\n💯 Complete these tasks to earn points and badges!`;\n      setAiSuggestion(schedule);\n      setAiSuggestionType(\"schedule\");\n      setIsAiLoading(false);\n    } catch (error) {\n      console.error(\"Error generating schedule:\", error);\n      setAiSuggestion(\"I couldn't generate a schedule right now. Please try again later.\");\n      setIsAiLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (isAiLoading || aiSuggestionType !== \"task\") return;\n    const incompleteTasks = tasks.filter(task => !task.completed);\n    if (incompleteTasks.length === 0) {\n      setAiSuggestion(\"You have no incomplete tasks! Add a new task to keep progressing.\");\n      setAiSuggestionType(\"task\");\n    } else {\n      setAiSuggestion(\"Looks like you have some tasks to tackle! Add or complete a task to keep progressing.\");\n      setAiSuggestionType(\"task\");\n    }\n  }, [tasks, isAiLoading, aiSuggestionType]);\n  useEffect(() => {\n    const completedCount = tasks.filter(task => task.completed).length;\n    setStudyStats(prevStats => ({\n      ...prevStats,\n      completedTasks: completedCount,\n      studyHoursLog: prevStats.studyHoursLog || []\n    }));\n  }, [tasks]);\n  useEffect(() => {\n    const saveUserData = async () => {\n      try {\n        const serializedStudyStats = {\n          totalHours: studyStats.totalHours,\n          completedTasks: studyStats.completedTasks,\n          streak: studyStats.streak,\n          lastActiveDate: studyStats.lastActiveDate || null,\n          lastStreakUpdate: studyStats.lastStreakUpdate || null,\n          studyHoursLog: studyStats.studyHoursLog || []\n        };\n        const dataToSend = {\n          tasks,\n          studyStats: serializedStudyStats,\n          points,\n          badges,\n          themes: [\"Light Mode\", \"Dark Mode\", \"Ocean Breeze\", \"Sunset Glow\", \"Forest Whisper\"],\n          currentTheme,\n          unlockedThemes\n        };\n        const response = await fetch(`http://localhost:5000/api/user/${userId}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(dataToSend)\n        });\n        if (!response.ok) {\n          throw new Error(`Failed to save user data: ${response.status} - ${await response.text()}`);\n        }\n      } catch (err) {\n        toast.error(`Failed to save progress: ${err.message}`);\n      }\n    };\n    const debounceSave = setTimeout(() => {\n      saveUserData();\n    }, 1000);\n    return () => clearTimeout(debounceSave);\n  }, [tasks, studyStats, points, badges, currentTheme, unlockedThemes]);\n  const logStudyHours = hours => {\n    const parsedHours = parseFloat(hours);\n    if (isNaN(parsedHours) || parsedHours <= 0) {\n      toast.error(\"Please enter a valid number of hours greater than 0.\");\n      return;\n    }\n    const roundedHours = Math.round(parsedHours * 100) / 100;\n    const today = getLocalDateString(new Date());\n    setStudyStats(prev => {\n      const studyHoursLog = prev.studyHoursLog || [];\n      const existingLog = studyHoursLog.find(log => log.date === today);\n      let updatedLog;\n      if (existingLog) {\n        updatedLog = studyHoursLog.map(log => log.date === today ? {\n          ...log,\n          hours: log.hours + roundedHours\n        } : log);\n      } else {\n        updatedLog = [...studyHoursLog, {\n          date: today,\n          hours: roundedHours\n        }];\n      }\n      return {\n        ...prev,\n        totalHours: prev.totalHours + roundedHours,\n        studyHoursLog: updatedLog\n      };\n    });\n    toast.success(`📚 ${roundedHours} study hours logged successfully!`);\n\n    // Update streak logic\n    updateStreak(today);\n\n    // Add points for studying\n    const pointsPerHour = 10;\n    const earnedPoints = Math.floor(roundedHours * pointsPerHour);\n    setPoints(prevPoints => prevPoints + earnedPoints);\n    toast.success(`🎉 +${earnedPoints} Points for studying!`);\n  };\n  const deductStudyHours = (hours, dateString) => {\n    const parsedHours = parseFloat(hours);\n    if (isNaN(parsedHours) || parsedHours <= 0) return;\n    const roundedHours = Math.round(parsedHours * 100) / 100;\n    setStudyStats(prev => {\n      const studyHoursLog = prev.studyHoursLog || [];\n      const existingLog = studyHoursLog.find(log => log.date === dateString);\n      let updatedLog = [...studyHoursLog];\n      if (existingLog) {\n        const newHours = Math.max(0, existingLog.hours - roundedHours);\n        if (newHours > 0) {\n          updatedLog = studyHoursLog.map(log => log.date === dateString ? {\n            ...log,\n            hours: newHours\n          } : log);\n        } else {\n          updatedLog = studyHoursLog.filter(log => log.date !== dateString);\n        }\n      }\n      const newTotalHours = Math.max(0, prev.totalHours - roundedHours);\n      return {\n        ...prev,\n        totalHours: newTotalHours,\n        studyHoursLog: updatedLog\n      };\n    });\n\n    // Deduct points for removing study hours\n    const pointsPerHour = 10;\n    const deductedPoints = Math.floor(roundedHours * pointsPerHour);\n    setPoints(prevPoints => Math.max(0, prevPoints - deductedPoints));\n  };\n  const addTask = newTask => {\n    setTasks([...tasks, newTask]);\n    toast.success(\"New task added! 📝\", {\n      toastId: `add-task-${newTask.id}`\n    });\n  };\n  const deleteTask = id => {\n    const task = tasks.find(task => task.id === id);\n    if (task) {\n      if (task.completed && task.pointsAwarded) {\n        const pointsToDeduct = task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\n        setPoints(prevPoints => Math.max(0, prevPoints - pointsToDeduct));\n        toast.success(`Task deleted. -${pointsToDeduct} Points removed.`, {\n          toastId: `delete-task-${id}`\n        });\n      } else {\n        toast.success(`Task deleted.`, {\n          toastId: `delete-task-${id}`\n        });\n      }\n    }\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n  const toggleTaskComplete = id => {\n    const task = tasks.find(task => task.id === id);\n    if (!task) return;\n    const today = getLocalDateString(new Date());\n    let newPoints = points;\n    let newBadges = [...badges];\n    let notifications = [];\n    const updatedTasks = tasks.map(t => t.id === id ? {\n      ...t,\n      completed: !t.completed,\n      completedDate: !t.completed ? today : null,\n      pointsAwarded: t.pointsAwarded\n    } : t);\n    const updatedTask = updatedTasks.find(t => t.id === id);\n    const pointsToAddOrDeduct = task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\n    if (!task.completed) {\n      if (!updatedTask.pointsAwarded) {\n        newPoints = points + pointsToAddOrDeduct;\n        notifications.push(`🎉 +${pointsToAddOrDeduct} Points! Keep it up!`);\n        updatedTask.pointsAwarded = true;\n      }\n      if (task.hours > 0) {\n        logStudyHours(task.hours);\n      }\n      const highPriorityTasks = updatedTasks.filter(t => t.priority === \"High\" && t.completed).length;\n      if (highPriorityTasks >= 5 && !badges.includes(\"Priority Master\")) {\n        newBadges.push(\"Priority Master\");\n        notifications.push(\"🏆 Badge Earned: Priority Master!\");\n      }\n      const totalCompletedTasks = updatedTasks.filter(t => t.completed).length;\n      if (totalCompletedTasks >= 10 && !badges.includes(\"Task Titan\")) {\n        newBadges.push(\"Task Titan\");\n        notifications.push(\"🏆 Badge Earned: Task Titan!\");\n      }\n      const dueDate = new Date(task.dueDate);\n      const todayDate = new Date();\n      if (dueDate > todayDate) {\n        const earlyTasks = updatedTasks.filter(t => new Date(t.dueDate) > todayDate && t.completed).length;\n        if (earlyTasks >= 3 && !badges.includes(\"Early Bird\")) {\n          newBadges.push(\"Early Bird\");\n          notifications.push(\"🏆 Badge Earned: Early Bird!\");\n        }\n      }\n      updateStreak(today);\n    } else {\n      if (updatedTask.pointsAwarded) {\n        newPoints = points - pointsToAddOrDeduct;\n        notifications.push(`↩️ -${pointsToAddOrDeduct} Points. Task unmarked as completed.`);\n        updatedTask.pointsAwarded = false;\n      }\n      if (task.hours > 0 && task.completedDate) {\n        deductStudyHours(task.hours, task.completedDate);\n      }\n    }\n    setTasks(updatedTasks);\n    setPoints(newPoints);\n    setBadges(newBadges);\n    notifications.forEach(msg => toast.success(msg));\n  };\n  const updateTask = updatedTask => {\n    setTasks(tasks.map(task => task.id === updatedTask.id ? updatedTask : task));\n  };\n\n  // Fix for the useEffect hook with missing dependencies\n  useEffect(() => {\n    if (studyStats.streak >= 7 && !badges.includes(\"Streak Star\")) {\n      let newBadges = [...badges, \"Streak Star\"];\n      let newPoints = points + 50;\n      setBadges(newBadges);\n      setPoints(newPoints);\n      toast.success(\"🏆 Badge Earned: Streak Star!\");\n      toast.success(\"🎉 +50 Points for 7-Day Streak!\");\n    }\n  }, [studyStats.streak, badges, points]); // Added missing dependencies\n\n  const nextTheme = getNextTheme();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `min-h-screen flex flex-col ${styles.layoutTheme}`,\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      currentTheme: currentTheme,\n      nextTheme: nextTheme,\n      onThemeChange: handleThemeChange,\n      setActiveTab: setActiveTab\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      activeTab: activeTab,\n      setActiveTab: setActiveTab,\n      currentTheme: currentTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n      activeTab: activeTab,\n      loading: loading,\n      tasks: tasks,\n      studyStats: studyStats,\n      aiSuggestion: aiSuggestion,\n      getStudyTips: getStudyTips,\n      generateSchedule: generateSchedule,\n      setActiveTab: setActiveTab,\n      toggleTaskComplete: toggleTaskComplete,\n      currentTheme: currentTheme,\n      logStudyHours: logStudyHours,\n      deductStudyHours: deductStudyHours,\n      addTask: addTask,\n      updateTask: updateTask,\n      deleteTask: deleteTask,\n      points: points,\n      badges: badges,\n      onPointsUpdate: handlePointsUpdate,\n      onThemeUnlock: handleThemeUnlock,\n      unlockedThemes: unlockedThemes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      currentTheme: currentTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 603,\n    columnNumber: 5\n  }, this);\n}\n_s(Layout, \"iWVP8Ac9YqTv8TwyVMW8Z3UiU9g=\");\n_c = Layout;\nexport default Layout;\nvar _c;\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"names":["React","useState","useEffect","Header","Navigation","MainContent","Footer","ToastContainer","toast","getStudySuggestion","getCardStyles","jsxDEV","_jsxDEV","Layout","_s","activeTab","setActiveTab","savedTab","localStorage","getItem","tasks","setTasks","studyStats","setStudyStats","totalHours","completedTasks","streak","lastActiveDate","lastStreakUpdate","studyHoursLog","aiSuggestion","setAiSuggestion","aiSuggestionType","setAiSuggestionType","isAiLoading","setIsAiLoading","points","setPoints","badges","setBadges","currentTheme","setCurrentTheme","unlockedThemes","setUnlockedThemes","loading","setLoading","setItem","userId","styles","getLocalDateString","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","getNextTheme","length","currentIndex","indexOf","nextIndex","handleThemeChange","nextTheme","handlePointsUpdate","newPoints","handleThemeUnlock","themeName","includes","updateStreak","today","prev","lastActive","Date","todayDate","newStreak","newLastActiveDate","newLastStreakUpdate","lastActiveDateString","lastStreakUpdateDateString","diffTime","diffDays","Math","ceil","newStats","fetchUserData","_data$studyStats","_data$studyStats2","_data$studyStats3","_data$studyStats4","_data$studyStats5","_data$studyStats6","response","fetch","ok","Error","status","data","json","fetchedTasks","map","task","_task$pointsAwarded","_task$hours","pointsAwarded","hours","fetchedStats","lastDate","currentDate","now","toString","setTimeout","incompleteTasks","filter","completed","error","console","getStudyTips","suggestion","generateSchedule","taskPriorities","High","Medium","Low","sortedTasks","sort","a","b","priorityDiff","priority","dueDate","formattedDate","toLocaleDateString","weekday","schedule","slice","index","title","join","completedCount","prevStats","saveUserData","serializedStudyStats","dataToSend","themes","method","headers","body","JSON","stringify","text","err","message","debounceSave","clearTimeout","logStudyHours","parsedHours","parseFloat","isNaN","roundedHours","round","existingLog","find","log","updatedLog","success","pointsPerHour","earnedPoints","floor","prevPoints","deductStudyHours","dateString","newHours","max","newTotalHours","deductedPoints","addTask","newTask","toastId","id","deleteTask","pointsToDeduct","toggleTaskComplete","newBadges","notifications","updatedTasks","t","completedDate","updatedTask","pointsToAddOrDeduct","push","highPriorityTasks","totalCompletedTasks","earlyTasks","forEach","msg","updateTask","className","layoutTheme","children","fileName","_jsxFileName","lineNumber","columnNumber","onThemeChange","onPointsUpdate","onThemeUnlock","_c","$RefreshReg$"],"sources":["D:/Projects/StudBud/frontend/src/components/Layout.jsx"],"sourcesContent":["// frontend/src/components/Layout.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Header from \"./layout/Header\";\r\nimport Navigation from \"./layout/Navigation\";\r\nimport MainContent from \"./layout/MainContent\";\r\nimport Footer from \"./layout/Footer\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { getStudySuggestion } from \"../services/aiService\";\r\nimport { getCardStyles } from \"./utils/themeUtils\";\r\n\r\nfunction Layout() {\r\n  // Initialize activeTab from localStorage, default to \"dashboard\" if not set\r\n  const [activeTab, setActiveTab] = useState(() => {\r\n    const savedTab = localStorage.getItem(\"activeTab\");\r\n    return savedTab || \"dashboard\";\r\n  });\r\n  const [tasks, setTasks] = useState([]);\r\n  const [studyStats, setStudyStats] = useState({\r\n    totalHours: 0,\r\n    completedTasks: 0,\r\n    streak: 0,\r\n    lastActiveDate: null,\r\n    lastStreakUpdate: null,\r\n    studyHoursLog: [],\r\n  });\r\n  const [aiSuggestion, setAiSuggestion] = useState(\"\");\r\n  const [aiSuggestionType, setAiSuggestionType] = useState(\"task\");\r\n  const [isAiLoading, setIsAiLoading] = useState(false);\r\n  const [points, setPoints] = useState(0);\r\n  const [badges, setBadges] = useState([]);\r\n  const [currentTheme, setCurrentTheme] = useState(\"Light Mode\");\r\n  const [unlockedThemes, setUnlockedThemes] = useState([\"Light Mode\"]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Persist activeTab to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem(\"activeTab\", activeTab);\r\n  }, [activeTab]);\r\n\r\n  const userId = \"user123\";\r\n  const styles = getCardStyles(currentTheme);\r\n\r\n  const getLocalDateString = (date) => {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  const getNextTheme = () => {\r\n    if (unlockedThemes.length === 1) {\r\n      return \"Light Mode\";\r\n    }\r\n    const currentIndex = unlockedThemes.indexOf(currentTheme);\r\n    const nextIndex = (currentIndex + 1) % unlockedThemes.length;\r\n    return unlockedThemes[nextIndex];\r\n  };\r\n\r\n  const handleThemeChange = () => {\r\n    const nextTheme = getNextTheme();\r\n    setCurrentTheme(nextTheme);\r\n  };\r\n\r\n  const handlePointsUpdate = (newPoints) => {\r\n    setPoints(newPoints);\r\n  };\r\n\r\n  const handleThemeUnlock = (themeName) => {\r\n    if (!unlockedThemes.includes(themeName)) {\r\n      setUnlockedThemes([...unlockedThemes, themeName]);\r\n    }\r\n  };\r\n\r\n  const updateStreak = (today) => {\r\n    setStudyStats((prev) => {\r\n      const lastActive = prev.lastActiveDate\r\n        ? new Date(prev.lastActiveDate)\r\n        : null;\r\n      const lastStreakUpdate = prev.lastStreakUpdate\r\n        ? new Date(prev.lastStreakUpdate)\r\n        : null;\r\n      const todayDate = new Date(today);\r\n\r\n      let newStreak = prev.streak;\r\n      let newLastActiveDate = today;\r\n      let newLastStreakUpdate = prev.lastStreakUpdate;\r\n\r\n      const lastActiveDateString = lastActive\r\n        ? getLocalDateString(lastActive)\r\n        : null;\r\n      const lastStreakUpdateDateString = lastStreakUpdate\r\n        ? getLocalDateString(lastStreakUpdate)\r\n        : null;\r\n\r\n      if (!lastActive || lastActiveDateString !== today) {\r\n        if (lastActive) {\r\n          const diffTime = todayDate - lastActive;\r\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n          if (diffDays === 1) {\r\n            newStreak = prev.streak + 1;\r\n            newLastStreakUpdate = today;\r\n          } else if (diffDays > 1) {\r\n            newStreak = 1;\r\n            newLastStreakUpdate = today;\r\n          }\r\n        } else {\r\n          newStreak = 1;\r\n          newLastStreakUpdate = today;\r\n        }\r\n      }\r\n\r\n      if (lastStreakUpdate && lastStreakUpdateDateString !== today) {\r\n        const diffTime = todayDate - new Date(lastStreakUpdate);\r\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n        if (diffDays > 1) {\r\n          newStreak = 1;\r\n          newLastStreakUpdate = today;\r\n        }\r\n      }\r\n\r\n      const newStats = {\r\n        ...prev,\r\n        streak: newStreak,\r\n        lastActiveDate: newLastActiveDate,\r\n        lastStreakUpdate: newLastStreakUpdate,\r\n        studyHoursLog: prev.studyHoursLog || [],\r\n      };\r\n      return newStats;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:5000/api/user/${userId}`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to fetch user data: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n\r\n        const fetchedTasks = (data.tasks || []).map((task) => ({\r\n          ...task,\r\n          pointsAwarded: task.pointsAwarded ?? false,\r\n          hours: task.hours ?? 0,\r\n        }));\r\n        setTasks(fetchedTasks);\r\n\r\n        const fetchedStats = {\r\n          totalHours: data.studyStats?.totalHours || 0,\r\n          completedTasks: data.studyStats?.completedTasks || 0,\r\n          streak: data.studyStats?.streak || 0,\r\n          lastActiveDate: data.studyStats?.lastActiveDate || null,\r\n          lastStreakUpdate: data.studyStats?.lastStreakUpdate || null,\r\n          studyHoursLog: data.studyStats?.studyHoursLog || [],\r\n        };\r\n        setStudyStats(fetchedStats);\r\n        setPoints(data.points || 0);\r\n        setBadges(data.badges || []);\r\n        setCurrentTheme(data.currentTheme || \"Light Mode\");\r\n        setUnlockedThemes(data.unlockedThemes || [\"Light Mode\"]);\r\n\r\n        const today = getLocalDateString(new Date());\r\n        const { lastActiveDate, streak, lastStreakUpdate } = fetchedStats;\r\n\r\n        let newStats = { ...fetchedStats };\r\n        if (lastStreakUpdate !== today) {\r\n          if (!lastActiveDate) {\r\n            newStats = {\r\n              ...fetchedStats,\r\n              lastActiveDate: today,\r\n              lastStreakUpdate: today,\r\n              studyHoursLog: fetchedStats.studyHoursLog || [],\r\n            };\r\n          } else {\r\n            const lastDate = new Date(lastActiveDate);\r\n            const currentDate = new Date(today);\r\n            const diffDays = (currentDate - lastDate) / (1000 * 60 * 60 * 24);\r\n\r\n            if (diffDays === 1) {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                streak: fetchedStats.streak + 1,\r\n                lastActiveDate: today,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n            } else if (diffDays > 1) {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                streak: 0,\r\n                lastActiveDate: today,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n            } else {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n            }\r\n          }\r\n          setStudyStats(newStats);\r\n        }\r\n\r\n        // Store current timestamp (we don't need lastFetchTimestamp variable)\r\n        localStorage.setItem(\"lastFetchTimestamp\", Date.now().toString());\r\n\r\n        setTimeout(async () => {\r\n          const incompleteTasks = fetchedTasks.filter(\r\n            (task) => !task.completed\r\n          );\r\n          if (incompleteTasks.length === 0) {\r\n            setAiSuggestion(\r\n              \"You have no incomplete tasks! Add a new task to keep progressing.\"\r\n            );\r\n            setAiSuggestionType(\"task\");\r\n          } else {\r\n            setAiSuggestion(\r\n              \"Looks like you have some tasks to tackle! Add or complete a task to keep progressing.\"\r\n            );\r\n            setAiSuggestionType(\"task\");\r\n          }\r\n          setLoading(false);\r\n        }, 500);\r\n      } catch (error) {\r\n        console.error(\"Error fetching user data:\", error);\r\n        toast.error(\"Failed to load your data. Please try again later.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  const getStudyTips = async () => {\r\n    try {\r\n      setIsAiLoading(true);\r\n      const suggestion = await getStudySuggestion();\r\n      setAiSuggestion(suggestion);\r\n      setAiSuggestionType(\"tip\");\r\n      setIsAiLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error getting study tips:\", error);\r\n      setAiSuggestion(\r\n        \"I couldn't get a study tip right now. Please try again later.\"\r\n      );\r\n      setIsAiLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateSchedule = async () => {\r\n    try {\r\n      setIsAiLoading(true);\r\n      const incompleteTasks = tasks.filter((task) => !task.completed);\r\n      if (incompleteTasks.length === 0) {\r\n        setAiSuggestion(\r\n          \"You don't have any incomplete tasks to schedule. Add some tasks first!\"\r\n        );\r\n        setAiSuggestionType(\"schedule\");\r\n        setIsAiLoading(false);\r\n        return;\r\n      }\r\n\r\n      const taskPriorities = {\r\n        High: 3,\r\n        Medium: 2,\r\n        Low: 1,\r\n      };\r\n\r\n      // Sort tasks by priority and due date\r\n      const sortedTasks = [...incompleteTasks].sort((a, b) => {\r\n        const priorityDiff =\r\n          taskPriorities[b.priority] - taskPriorities[a.priority];\r\n        if (priorityDiff !== 0) return priorityDiff;\r\n\r\n        return new Date(a.dueDate) - new Date(b.dueDate);\r\n      });\r\n\r\n      const today = new Date();\r\n      const formattedDate = today.toLocaleDateString(\"en-US\", {\r\n        weekday: \"long\",\r\n        month: \"long\",\r\n        day: \"numeric\",\r\n      });\r\n\r\n      const schedule = `📅 Study Schedule for ${formattedDate}:\\n\\n${sortedTasks\r\n        .slice(0, 3)\r\n        .map(\r\n          (task, index) =>\r\n            `${index + 1}. \"${task.title}\" (${\r\n              task.priority\r\n            } Priority) - Allocate ${task.hours || 1} hour(s)`\r\n        )\r\n        .join(\"\\n\")}\\n\\n💯 Complete these tasks to earn points and badges!`;\r\n\r\n      setAiSuggestion(schedule);\r\n      setAiSuggestionType(\"schedule\");\r\n      setIsAiLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error generating schedule:\", error);\r\n      setAiSuggestion(\r\n        \"I couldn't generate a schedule right now. Please try again later.\"\r\n      );\r\n      setIsAiLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isAiLoading || aiSuggestionType !== \"task\") return;\r\n\r\n    const incompleteTasks = tasks.filter((task) => !task.completed);\r\n    if (incompleteTasks.length === 0) {\r\n      setAiSuggestion(\r\n        \"You have no incomplete tasks! Add a new task to keep progressing.\"\r\n      );\r\n      setAiSuggestionType(\"task\");\r\n    } else {\r\n      setAiSuggestion(\r\n        \"Looks like you have some tasks to tackle! Add or complete a task to keep progressing.\"\r\n      );\r\n      setAiSuggestionType(\"task\");\r\n    }\r\n  }, [tasks, isAiLoading, aiSuggestionType]);\r\n\r\n  useEffect(() => {\r\n    const completedCount = tasks.filter((task) => task.completed).length;\r\n    setStudyStats((prevStats) => ({\r\n      ...prevStats,\r\n      completedTasks: completedCount,\r\n      studyHoursLog: prevStats.studyHoursLog || [],\r\n    }));\r\n  }, [tasks]);\r\n\r\n  useEffect(() => {\r\n    const saveUserData = async () => {\r\n      try {\r\n        const serializedStudyStats = {\r\n          totalHours: studyStats.totalHours,\r\n          completedTasks: studyStats.completedTasks,\r\n          streak: studyStats.streak,\r\n          lastActiveDate: studyStats.lastActiveDate || null,\r\n          lastStreakUpdate: studyStats.lastStreakUpdate || null,\r\n          studyHoursLog: studyStats.studyHoursLog || [],\r\n        };\r\n\r\n        const dataToSend = {\r\n          tasks,\r\n          studyStats: serializedStudyStats,\r\n          points,\r\n          badges,\r\n          themes: [\r\n            \"Light Mode\",\r\n            \"Dark Mode\",\r\n            \"Ocean Breeze\",\r\n            \"Sunset Glow\",\r\n            \"Forest Whisper\",\r\n          ],\r\n          currentTheme,\r\n          unlockedThemes,\r\n        };\r\n\r\n        const response = await fetch(\r\n          `http://localhost:5000/api/user/${userId}`,\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(dataToSend),\r\n          }\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\r\n            `Failed to save user data: ${response.status} - ${await response.text()}`\r\n          );\r\n        }\r\n      } catch (err) {\r\n        toast.error(`Failed to save progress: ${err.message}`);\r\n      }\r\n    };\r\n\r\n    const debounceSave = setTimeout(() => {\r\n      saveUserData();\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(debounceSave);\r\n  }, [tasks, studyStats, points, badges, currentTheme, unlockedThemes]);\r\n\r\n  const logStudyHours = (hours) => {\r\n    const parsedHours = parseFloat(hours);\r\n    if (isNaN(parsedHours) || parsedHours <= 0) {\r\n      toast.error(\"Please enter a valid number of hours greater than 0.\");\r\n      return;\r\n    }\r\n    const roundedHours = Math.round(parsedHours * 100) / 100;\r\n    const today = getLocalDateString(new Date());\r\n    setStudyStats((prev) => {\r\n      const studyHoursLog = prev.studyHoursLog || [];\r\n      const existingLog = studyHoursLog.find((log) => log.date === today);\r\n      let updatedLog;\r\n      if (existingLog) {\r\n        updatedLog = studyHoursLog.map((log) =>\r\n          log.date === today\r\n            ? { ...log, hours: log.hours + roundedHours }\r\n            : log\r\n        );\r\n      } else {\r\n        updatedLog = [...studyHoursLog, { date: today, hours: roundedHours }];\r\n      }\r\n\r\n      return {\r\n        ...prev,\r\n        totalHours: prev.totalHours + roundedHours,\r\n        studyHoursLog: updatedLog,\r\n      };\r\n    });\r\n\r\n    toast.success(`📚 ${roundedHours} study hours logged successfully!`);\r\n\r\n    // Update streak logic\r\n    updateStreak(today);\r\n\r\n    // Add points for studying\r\n    const pointsPerHour = 10;\r\n    const earnedPoints = Math.floor(roundedHours * pointsPerHour);\r\n    setPoints((prevPoints) => prevPoints + earnedPoints);\r\n\r\n    toast.success(`🎉 +${earnedPoints} Points for studying!`);\r\n  };\r\n\r\n  const deductStudyHours = (hours, dateString) => {\r\n    const parsedHours = parseFloat(hours);\r\n    if (isNaN(parsedHours) || parsedHours <= 0) return;\r\n    const roundedHours = Math.round(parsedHours * 100) / 100;\r\n\r\n    setStudyStats((prev) => {\r\n      const studyHoursLog = prev.studyHoursLog || [];\r\n      const existingLog = studyHoursLog.find((log) => log.date === dateString);\r\n      let updatedLog = [...studyHoursLog];\r\n\r\n      if (existingLog) {\r\n        const newHours = Math.max(0, existingLog.hours - roundedHours);\r\n        if (newHours > 0) {\r\n          updatedLog = studyHoursLog.map((log) =>\r\n            log.date === dateString ? { ...log, hours: newHours } : log\r\n          );\r\n        } else {\r\n          updatedLog = studyHoursLog.filter((log) => log.date !== dateString);\r\n        }\r\n      }\r\n\r\n      const newTotalHours = Math.max(0, prev.totalHours - roundedHours);\r\n      return {\r\n        ...prev,\r\n        totalHours: newTotalHours,\r\n        studyHoursLog: updatedLog,\r\n      };\r\n    });\r\n\r\n    // Deduct points for removing study hours\r\n    const pointsPerHour = 10;\r\n    const deductedPoints = Math.floor(roundedHours * pointsPerHour);\r\n    setPoints((prevPoints) => Math.max(0, prevPoints - deductedPoints));\r\n  };\r\n\r\n  const addTask = (newTask) => {\r\n    setTasks([...tasks, newTask]);\r\n    toast.success(\"New task added! 📝\", { toastId: `add-task-${newTask.id}` });\r\n  };\r\n\r\n  const deleteTask = (id) => {\r\n    const task = tasks.find((task) => task.id === id);\r\n    if (task) {\r\n      if (task.completed && task.pointsAwarded) {\r\n        const pointsToDeduct =\r\n          task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\r\n        setPoints((prevPoints) => Math.max(0, prevPoints - pointsToDeduct));\r\n        toast.success(`Task deleted. -${pointsToDeduct} Points removed.`, {\r\n          toastId: `delete-task-${id}`,\r\n        });\r\n      } else {\r\n        toast.success(`Task deleted.`, {\r\n          toastId: `delete-task-${id}`,\r\n        });\r\n      }\r\n    }\r\n\r\n    setTasks(tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskComplete = (id) => {\r\n    const task = tasks.find((task) => task.id === id);\r\n    if (!task) return;\r\n\r\n    const today = getLocalDateString(new Date());\r\n    let newPoints = points;\r\n    let newBadges = [...badges];\r\n    let notifications = [];\r\n\r\n    const updatedTasks = tasks.map((t) =>\r\n      t.id === id\r\n        ? {\r\n            ...t,\r\n            completed: !t.completed,\r\n            completedDate: !t.completed ? today : null,\r\n            pointsAwarded: t.pointsAwarded,\r\n          }\r\n        : t\r\n    );\r\n\r\n    const updatedTask = updatedTasks.find((t) => t.id === id);\r\n    const pointsToAddOrDeduct =\r\n      task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\r\n\r\n    if (!task.completed) {\r\n      if (!updatedTask.pointsAwarded) {\r\n        newPoints = points + pointsToAddOrDeduct;\r\n        notifications.push(`🎉 +${pointsToAddOrDeduct} Points! Keep it up!`);\r\n        updatedTask.pointsAwarded = true;\r\n      }\r\n\r\n      if (task.hours > 0) {\r\n        logStudyHours(task.hours);\r\n      }\r\n\r\n      const highPriorityTasks = updatedTasks.filter(\r\n        (t) => t.priority === \"High\" && t.completed\r\n      ).length;\r\n      if (highPriorityTasks >= 5 && !badges.includes(\"Priority Master\")) {\r\n        newBadges.push(\"Priority Master\");\r\n        notifications.push(\"🏆 Badge Earned: Priority Master!\");\r\n      }\r\n\r\n      const totalCompletedTasks = updatedTasks.filter(\r\n        (t) => t.completed\r\n      ).length;\r\n      if (totalCompletedTasks >= 10 && !badges.includes(\"Task Titan\")) {\r\n        newBadges.push(\"Task Titan\");\r\n        notifications.push(\"🏆 Badge Earned: Task Titan!\");\r\n      }\r\n\r\n      const dueDate = new Date(task.dueDate);\r\n      const todayDate = new Date();\r\n      if (dueDate > todayDate) {\r\n        const earlyTasks = updatedTasks.filter(\r\n          (t) => new Date(t.dueDate) > todayDate && t.completed\r\n        ).length;\r\n        if (earlyTasks >= 3 && !badges.includes(\"Early Bird\")) {\r\n          newBadges.push(\"Early Bird\");\r\n          notifications.push(\"🏆 Badge Earned: Early Bird!\");\r\n        }\r\n      }\r\n\r\n      updateStreak(today);\r\n    } else {\r\n      if (updatedTask.pointsAwarded) {\r\n        newPoints = points - pointsToAddOrDeduct;\r\n        notifications.push(\r\n          `↩️ -${pointsToAddOrDeduct} Points. Task unmarked as completed.`\r\n        );\r\n        updatedTask.pointsAwarded = false;\r\n      }\r\n\r\n      if (task.hours > 0 && task.completedDate) {\r\n        deductStudyHours(task.hours, task.completedDate);\r\n      }\r\n    }\r\n\r\n    setTasks(updatedTasks);\r\n    setPoints(newPoints);\r\n    setBadges(newBadges);\r\n    notifications.forEach((msg) => toast.success(msg));\r\n  };\r\n\r\n  const updateTask = (updatedTask) => {\r\n    setTasks(\r\n      tasks.map((task) => (task.id === updatedTask.id ? updatedTask : task))\r\n    );\r\n  };\r\n\r\n  // Fix for the useEffect hook with missing dependencies\r\n  useEffect(() => {\r\n    if (studyStats.streak >= 7 && !badges.includes(\"Streak Star\")) {\r\n      let newBadges = [...badges, \"Streak Star\"];\r\n      let newPoints = points + 50;\r\n\r\n      setBadges(newBadges);\r\n      setPoints(newPoints);\r\n\r\n      toast.success(\"🏆 Badge Earned: Streak Star!\");\r\n      toast.success(\"🎉 +50 Points for 7-Day Streak!\");\r\n    }\r\n  }, [studyStats.streak, badges, points]); // Added missing dependencies\r\n\r\n  const nextTheme = getNextTheme();\r\n\r\n  return (\r\n    <div className={`min-h-screen flex flex-col ${styles.layoutTheme}`}>\r\n      <ToastContainer />\r\n      <Header\r\n        currentTheme={currentTheme}\r\n        nextTheme={nextTheme}\r\n        onThemeChange={handleThemeChange}\r\n        setActiveTab={setActiveTab}\r\n      />\r\n      <Navigation\r\n        activeTab={activeTab}\r\n        setActiveTab={setActiveTab}\r\n        currentTheme={currentTheme}\r\n      />\r\n      <MainContent\r\n        activeTab={activeTab}\r\n        loading={loading}\r\n        tasks={tasks}\r\n        studyStats={studyStats}\r\n        aiSuggestion={aiSuggestion}\r\n        getStudyTips={getStudyTips}\r\n        generateSchedule={generateSchedule}\r\n        setActiveTab={setActiveTab}\r\n        toggleTaskComplete={toggleTaskComplete}\r\n        currentTheme={currentTheme}\r\n        logStudyHours={logStudyHours}\r\n        deductStudyHours={deductStudyHours}\r\n        addTask={addTask}\r\n        updateTask={updateTask}\r\n        deleteTask={deleteTask}\r\n        points={points}\r\n        badges={badges}\r\n        onPointsUpdate={handlePointsUpdate}\r\n        onThemeUnlock={handleThemeUnlock}\r\n        unlockedThemes={unlockedThemes}\r\n      />\r\n      <Footer currentTheme={currentTheme} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}