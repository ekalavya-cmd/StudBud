{"ast":null,"code":"// Updated aiService.js with loading states\nexport const getStudySuggestion = async ({\n  tasks = [],\n  studyStats = {},\n  customPrompt = \"\"\n} = {}) => {\n  try {\n    const response = await fetch(\"http://localhost:5000/api/ai-suggestion\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        tasks,\n        studyHabits: studyStats,\n        // Map studyStats to studyHabits to match server.js\n        customPrompt: customPrompt || undefined // Send undefined if customPrompt is empty\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Network response was not ok: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.error) {\n      throw new Error(data.error);\n    }\n    return data.suggestion;\n  } catch (error) {\n    return \"I'm having trouble generating suggestions right now. Please try again later.\";\n  }\n};","map":{"version":3,"names":["getStudySuggestion","tasks","studyStats","customPrompt","response","fetch","method","headers","body","JSON","stringify","studyHabits","undefined","ok","Error","status","data","json","error","suggestion"],"sources":["D:/Projects/StudBud/frontend/src/services/aiService.js"],"sourcesContent":["// Updated aiService.js with loading states\r\nexport const getStudySuggestion = async ({\r\n  tasks = [],\r\n  studyStats = {},\r\n  customPrompt = \"\",\r\n} = {}) => {\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/api/ai-suggestion\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        tasks,\r\n        studyHabits: studyStats, // Map studyStats to studyHabits to match server.js\r\n        customPrompt: customPrompt || undefined, // Send undefined if customPrompt is empty\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Network response was not ok: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    if (data.error) {\r\n      throw new Error(data.error);\r\n    }\r\n\r\n    return data.suggestion;\r\n  } catch (error) {\r\n    return \"I'm having trouble generating suggestions right now. Please try again later.\";\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,kBAAkB,GAAG,MAAAA,CAAO;EACvCC,KAAK,GAAG,EAAE;EACVC,UAAU,GAAG,CAAC,CAAC;EACfC,YAAY,GAAG;AACjB,CAAC,GAAG,CAAC,CAAC,KAAK;EACT,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;MACtEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBT,KAAK;QACLU,WAAW,EAAET,UAAU;QAAE;QACzBC,YAAY,EAAEA,YAAY,IAAIS,SAAS,CAAE;MAC3C,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgCV,QAAQ,CAACW,MAAM,EAAE,CAAC;IACpE;IAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;IAClC,IAAID,IAAI,CAACE,KAAK,EAAE;MACd,MAAM,IAAIJ,KAAK,CAACE,IAAI,CAACE,KAAK,CAAC;IAC7B;IAEA,OAAOF,IAAI,CAACG,UAAU;EACxB,CAAC,CAAC,OAAOD,KAAK,EAAE;IACd,OAAO,8EAA8E;EACvF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}