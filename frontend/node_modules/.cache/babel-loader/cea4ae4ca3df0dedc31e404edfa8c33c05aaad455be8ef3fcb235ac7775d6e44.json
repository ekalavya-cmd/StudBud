{"ast":null,"code":"var _jsxFileName = \"D:\\\\StudBud\\\\frontend\\\\src\\\\components\\\\taskmanager\\\\AddTaskForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport { PlusCircle } from \"lucide-react\";\nimport { toast } from \"react-toastify\";\nimport { getCardStyles } from \"../utils/themeUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddTaskForm({\n  addTask,\n  currentTheme\n}) {\n  _s();\n  const styles = getCardStyles(currentTheme);\n  const [newTask, setNewTask] = React.useState({\n    title: \"\",\n    dueDate: \"\",\n    priority: \"Medium\",\n    completed: false,\n    hours: \"\"\n  });\n  const [lastAttemptedDate, setLastAttemptedDate] = React.useState(\"\");\n  const [formatError, setFormatError] = React.useState(false);\n  const [rawDateInput, setRawDateInput] = React.useState(\"\"); // Reintroduce to capture raw input\n\n  const titleInputRef = useRef(null);\n  const dueDateInputRef = useRef(null);\n  const prioritySelectRef = useRef(null);\n  const hoursInputRef = useRef(null);\n  const addButtonRef = useRef(null);\n  const currentYear = new Date().getFullYear();\n  const validateDate = (dateStr, inputValidity, attemptedDate, rawInput) => {\n    // Check if the date is missing\n    if (!dateStr) {\n      if (inputValidity.valueMissing) {\n        return {\n          isValid: false,\n          error: \"Date is required.\"\n        };\n      }\n      // If dateStr is empty but valueMissing is false, itâ€™s likely an invalid date or format error\n      if (formatError && rawInput) {\n        // Parse the raw input (e.g., \"31/06/2025\")\n        const parts = rawInput.split(/[-/]/); // Split on \"-\" or \"/\"\n        let year, month, day;\n        if (parts.length === 3) {\n          // Check possible formats: DD/MM/YYYY or YYYY-MM-DD\n          if (parts[0].length === 4) {\n            // YYYY-MM-DD\n            [year, month, day] = parts.map(Number);\n          } else {\n            // DD/MM/YYYY\n            [day, month, year] = parts.map(Number);\n          }\n          const parsedDate = new Date(year, month - 1, day); // month is 0-based in JS\n          const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n          // Check if the date is invalid\n          if (isNaN(parsedDate.getTime()) || parsedDate.getFullYear() !== year || parsedDate.getMonth() + 1 !== month || parsedDate.getDate() !== day) {\n            return {\n              isValid: false,\n              error: `Please enter a valid date (e.g., YYYY-MM-DD). ${monthNames[month - 1]} ${day} is not a valid date.`\n            };\n          }\n          return {\n            isValid: false,\n            error: \"Please enter the date in YYYY-MM-DD format (e.g., 2025-06-03).\"\n          };\n        }\n        return {\n          isValid: false,\n          error: \"Please enter the date in YYYY-MM-DD format (e.g., 2025-06-03).\"\n        };\n      }\n      if (attemptedDate) {\n        const [year, month, day] = attemptedDate.split(\"-\").map(Number);\n        const parsedDate = new Date(year, month - 1, day); // month is 0-based in JS\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        // Check if the date rolls over or is invalid\n        if (isNaN(parsedDate.getTime()) || parsedDate.getFullYear() !== year || parsedDate.getMonth() + 1 !== month || parsedDate.getDate() !== day) {\n          return {\n            isValid: false,\n            error: `Please enter a valid date (e.g., YYYY-MM-DD). ${monthNames[month - 1]} ${day} is not a valid date.`\n          };\n        }\n      }\n      return {\n        isValid: false,\n        error: \"Please enter a valid date (e.g., YYYY-MM-DD).\"\n      };\n    }\n    const date = new Date(dateStr);\n    if (isNaN(date.getTime())) {\n      return {\n        isValid: false,\n        error: \"Please enter a valid date (e.g., YYYY-MM-DD).\"\n      };\n    }\n    return {\n      isValid: true\n    };\n  };\n  const handleAddTask = () => {\n    // Validate required fields (excluding dueDate for now)\n    if (!newTask.title || !newTask.hours) {\n      toast.error(\"Please fill in all required fields (title and hours).\");\n      return;\n    }\n\n    // Validate due date using the input's validity state\n    const inputValidity = dueDateInputRef.current.validity;\n    const dateValidation = validateDate(newTask.dueDate, inputValidity, lastAttemptedDate, rawDateInput);\n    if (!dateValidation.isValid) {\n      toast.error(dateValidation.error);\n      setFormatError(false);\n      setRawDateInput(\"\"); // Reset raw input after showing the message\n      return;\n    }\n    const parsedHours = parseFloat(newTask.hours);\n    if (isNaN(parsedHours) || parsedHours < 0) {\n      toast.error(\"Please enter a valid number of hours (0 or greater).\");\n      return;\n    }\n    addTask({\n      ...newTask,\n      hours: parsedHours\n    });\n    setNewTask({\n      title: \"\",\n      dueDate: \"\",\n      priority: \"Medium\",\n      completed: false,\n      hours: \"\"\n    });\n    setLastAttemptedDate(\"\");\n    setFormatError(false);\n    setRawDateInput(\"\");\n    titleInputRef.current.focus();\n  };\n  const validateAndCorrectYear = dateValue => {\n    if (!dateValue) return;\n    const [year, month, day] = dateValue.split(\"-\");\n    if (parseInt(year) !== currentYear) {\n      const correctedDate = `${currentYear}-${month}-${day}`;\n      setNewTask(prev => ({\n        ...prev,\n        dueDate: correctedDate\n      }));\n      setLastAttemptedDate(correctedDate);\n      setRawDateInput(\"\"); // Reset raw input on correction\n    }\n  };\n  const handleAddTaskKeyPress = (e, nextRef) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      if (nextRef.current) {\n        nextRef.current.focus();\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.formSection,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap md:flex-nowrap gap-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Task title\",\n        className: `flex-grow ${styles.input}`,\n        value: newTask.title,\n        onChange: e => setNewTask({\n          ...newTask,\n          title: e.target.value\n        }),\n        onKeyDown: e => handleAddTaskKeyPress(e, dueDateInputRef),\n        ref: titleInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        className: styles.input,\n        value: newTask.dueDate,\n        onChange: e => {\n          const newDate = e.target.value;\n          setNewTask({\n            ...newTask,\n            dueDate: newDate\n          });\n          setLastAttemptedDate(newDate);\n          setFormatError(false);\n          validateAndCorrectYear(newDate);\n        },\n        onInput: e => {\n          setRawDateInput(e.target.value); // Capture raw input as typed\n        },\n        onInvalid: e => {\n          e.preventDefault();\n          if (e.target.validity.badInput) {\n            setFormatError(true);\n          }\n        },\n        onKeyDown: e => handleAddTaskKeyPress(e, prioritySelectRef),\n        ref: dueDateInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: styles.input,\n        value: newTask.priority,\n        onChange: e => setNewTask({\n          ...newTask,\n          priority: e.target.value\n        }),\n        onKeyDown: e => handleAddTaskKeyPress(e, hoursInputRef),\n        ref: prioritySelectRef,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Low\",\n          children: \"Low Priority\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Medium\",\n          children: \"Medium Priority\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"High\",\n          children: \"High Priority\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Hours\",\n        className: styles.input,\n        value: newTask.hours,\n        onChange: e => setNewTask({\n          ...newTask,\n          hours: e.target.value\n        }),\n        onKeyDown: e => handleAddTaskKeyPress(e, addButtonRef),\n        ref: hoursInputRef,\n        min: \"0\",\n        step: \"0.1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-4 py-2 ${styles.buttonPrimary}`,\n        onClick: handleAddTask,\n        onKeyDown: e => {\n          if (e.key === \"Enter\") {\n            e.preventDefault();\n            handleAddTask();\n          }\n        },\n        ref: addButtonRef,\n        children: [/*#__PURE__*/_jsxDEV(PlusCircle, {\n          className: \"w-4 h-4 mr-1 inline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), \" Add Task\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n_s(AddTaskForm, \"nuRcc8+EKmejw2Kks7kbtUDyYpY=\");\n_c = AddTaskForm;\nexport default AddTaskForm;\nvar _c;\n$RefreshReg$(_c, \"AddTaskForm\");","map":{"version":3,"names":["React","useRef","PlusCircle","toast","getCardStyles","jsxDEV","_jsxDEV","AddTaskForm","addTask","currentTheme","_s","styles","newTask","setNewTask","useState","title","dueDate","priority","completed","hours","lastAttemptedDate","setLastAttemptedDate","formatError","setFormatError","rawDateInput","setRawDateInput","titleInputRef","dueDateInputRef","prioritySelectRef","hoursInputRef","addButtonRef","currentYear","Date","getFullYear","validateDate","dateStr","inputValidity","attemptedDate","rawInput","valueMissing","isValid","error","parts","split","year","month","day","length","map","Number","parsedDate","monthNames","isNaN","getTime","getMonth","getDate","date","handleAddTask","current","validity","dateValidation","parsedHours","parseFloat","focus","validateAndCorrectYear","dateValue","parseInt","correctedDate","prev","handleAddTaskKeyPress","e","nextRef","key","preventDefault","className","formSection","children","type","placeholder","input","value","onChange","target","onKeyDown","ref","fileName","_jsxFileName","lineNumber","columnNumber","newDate","onInput","onInvalid","badInput","min","step","buttonPrimary","onClick","_c","$RefreshReg$"],"sources":["D:/StudBud/frontend/src/components/taskmanager/AddTaskForm.jsx"],"sourcesContent":["import React, { useRef } from \"react\";\r\nimport { PlusCircle } from \"lucide-react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { getCardStyles } from \"../utils/themeUtils\";\r\n\r\nfunction AddTaskForm({ addTask, currentTheme }) {\r\n  const styles = getCardStyles(currentTheme);\r\n  const [newTask, setNewTask] = React.useState({\r\n    title: \"\",\r\n    dueDate: \"\",\r\n    priority: \"Medium\",\r\n    completed: false,\r\n    hours: \"\",\r\n  });\r\n  const [lastAttemptedDate, setLastAttemptedDate] = React.useState(\"\");\r\n  const [formatError, setFormatError] = React.useState(false);\r\n  const [rawDateInput, setRawDateInput] = React.useState(\"\"); // Reintroduce to capture raw input\r\n\r\n  const titleInputRef = useRef(null);\r\n  const dueDateInputRef = useRef(null);\r\n  const prioritySelectRef = useRef(null);\r\n  const hoursInputRef = useRef(null);\r\n  const addButtonRef = useRef(null);\r\n\r\n  const currentYear = new Date().getFullYear();\r\n\r\n  const validateDate = (dateStr, inputValidity, attemptedDate, rawInput) => {\r\n    // Check if the date is missing\r\n    if (!dateStr) {\r\n      if (inputValidity.valueMissing) {\r\n        return { isValid: false, error: \"Date is required.\" };\r\n      }\r\n      // If dateStr is empty but valueMissing is false, itâ€™s likely an invalid date or format error\r\n      if (formatError && rawInput) {\r\n        // Parse the raw input (e.g., \"31/06/2025\")\r\n        const parts = rawInput.split(/[-/]/); // Split on \"-\" or \"/\"\r\n        let year, month, day;\r\n        if (parts.length === 3) {\r\n          // Check possible formats: DD/MM/YYYY or YYYY-MM-DD\r\n          if (parts[0].length === 4) {\r\n            // YYYY-MM-DD\r\n            [year, month, day] = parts.map(Number);\r\n          } else {\r\n            // DD/MM/YYYY\r\n            [day, month, year] = parts.map(Number);\r\n          }\r\n          const parsedDate = new Date(year, month - 1, day); // month is 0-based in JS\r\n          const monthNames = [\r\n            \"January\",\r\n            \"February\",\r\n            \"March\",\r\n            \"April\",\r\n            \"May\",\r\n            \"June\",\r\n            \"July\",\r\n            \"August\",\r\n            \"September\",\r\n            \"October\",\r\n            \"November\",\r\n            \"December\",\r\n          ];\r\n          // Check if the date is invalid\r\n          if (\r\n            isNaN(parsedDate.getTime()) ||\r\n            parsedDate.getFullYear() !== year ||\r\n            parsedDate.getMonth() + 1 !== month ||\r\n            parsedDate.getDate() !== day\r\n          ) {\r\n            return {\r\n              isValid: false,\r\n              error: `Please enter a valid date (e.g., YYYY-MM-DD). ${monthNames[month - 1]} ${day} is not a valid date.`,\r\n            };\r\n          }\r\n          return {\r\n            isValid: false,\r\n            error:\r\n              \"Please enter the date in YYYY-MM-DD format (e.g., 2025-06-03).\",\r\n          };\r\n        }\r\n        return {\r\n          isValid: false,\r\n          error:\r\n            \"Please enter the date in YYYY-MM-DD format (e.g., 2025-06-03).\",\r\n        };\r\n      }\r\n      if (attemptedDate) {\r\n        const [year, month, day] = attemptedDate.split(\"-\").map(Number);\r\n        const parsedDate = new Date(year, month - 1, day); // month is 0-based in JS\r\n        const monthNames = [\r\n          \"January\",\r\n          \"February\",\r\n          \"March\",\r\n          \"April\",\r\n          \"May\",\r\n          \"June\",\r\n          \"July\",\r\n          \"August\",\r\n          \"September\",\r\n          \"October\",\r\n          \"November\",\r\n          \"December\",\r\n        ];\r\n        // Check if the date rolls over or is invalid\r\n        if (\r\n          isNaN(parsedDate.getTime()) ||\r\n          parsedDate.getFullYear() !== year ||\r\n          parsedDate.getMonth() + 1 !== month ||\r\n          parsedDate.getDate() !== day\r\n        ) {\r\n          return {\r\n            isValid: false,\r\n            error: `Please enter a valid date (e.g., YYYY-MM-DD). ${monthNames[month - 1]} ${day} is not a valid date.`,\r\n          };\r\n        }\r\n      }\r\n      return {\r\n        isValid: false,\r\n        error: \"Please enter a valid date (e.g., YYYY-MM-DD).\",\r\n      };\r\n    }\r\n\r\n    const date = new Date(dateStr);\r\n    if (isNaN(date.getTime())) {\r\n      return {\r\n        isValid: false,\r\n        error: \"Please enter a valid date (e.g., YYYY-MM-DD).\",\r\n      };\r\n    }\r\n\r\n    return { isValid: true };\r\n  };\r\n\r\n  const handleAddTask = () => {\r\n    // Validate required fields (excluding dueDate for now)\r\n    if (!newTask.title || !newTask.hours) {\r\n      toast.error(\"Please fill in all required fields (title and hours).\");\r\n      return;\r\n    }\r\n\r\n    // Validate due date using the input's validity state\r\n    const inputValidity = dueDateInputRef.current.validity;\r\n    const dateValidation = validateDate(\r\n      newTask.dueDate,\r\n      inputValidity,\r\n      lastAttemptedDate,\r\n      rawDateInput\r\n    );\r\n    if (!dateValidation.isValid) {\r\n      toast.error(dateValidation.error);\r\n      setFormatError(false);\r\n      setRawDateInput(\"\"); // Reset raw input after showing the message\r\n      return;\r\n    }\r\n\r\n    const parsedHours = parseFloat(newTask.hours);\r\n    if (isNaN(parsedHours) || parsedHours < 0) {\r\n      toast.error(\"Please enter a valid number of hours (0 or greater).\");\r\n      return;\r\n    }\r\n\r\n    addTask({ ...newTask, hours: parsedHours });\r\n    setNewTask({\r\n      title: \"\",\r\n      dueDate: \"\",\r\n      priority: \"Medium\",\r\n      completed: false,\r\n      hours: \"\",\r\n    });\r\n    setLastAttemptedDate(\"\");\r\n    setFormatError(false);\r\n    setRawDateInput(\"\");\r\n    titleInputRef.current.focus();\r\n  };\r\n\r\n  const validateAndCorrectYear = (dateValue) => {\r\n    if (!dateValue) return;\r\n    const [year, month, day] = dateValue.split(\"-\");\r\n    if (parseInt(year) !== currentYear) {\r\n      const correctedDate = `${currentYear}-${month}-${day}`;\r\n      setNewTask((prev) => ({ ...prev, dueDate: correctedDate }));\r\n      setLastAttemptedDate(correctedDate);\r\n      setRawDateInput(\"\"); // Reset raw input on correction\r\n    }\r\n  };\r\n\r\n  const handleAddTaskKeyPress = (e, nextRef) => {\r\n    if (e.key === \"Enter\") {\r\n      e.preventDefault();\r\n      if (nextRef.current) {\r\n        nextRef.current.focus();\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.formSection}>\r\n      <div className=\"flex flex-wrap md:flex-nowrap gap-3\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Task title\"\r\n          className={`flex-grow ${styles.input}`}\r\n          value={newTask.title}\r\n          onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}\r\n          onKeyDown={(e) => handleAddTaskKeyPress(e, dueDateInputRef)}\r\n          ref={titleInputRef}\r\n        />\r\n        <input\r\n          type=\"date\"\r\n          className={styles.input}\r\n          value={newTask.dueDate}\r\n          onChange={(e) => {\r\n            const newDate = e.target.value;\r\n            setNewTask({ ...newTask, dueDate: newDate });\r\n            setLastAttemptedDate(newDate);\r\n            setFormatError(false);\r\n            validateAndCorrectYear(newDate);\r\n          }}\r\n          onInput={(e) => {\r\n            setRawDateInput(e.target.value); // Capture raw input as typed\r\n          }}\r\n          onInvalid={(e) => {\r\n            e.preventDefault();\r\n            if (e.target.validity.badInput) {\r\n              setFormatError(true);\r\n            }\r\n          }}\r\n          onKeyDown={(e) => handleAddTaskKeyPress(e, prioritySelectRef)}\r\n          ref={dueDateInputRef}\r\n        />\r\n        <select\r\n          className={styles.input}\r\n          value={newTask.priority}\r\n          onChange={(e) => setNewTask({ ...newTask, priority: e.target.value })}\r\n          onKeyDown={(e) => handleAddTaskKeyPress(e, hoursInputRef)}\r\n          ref={prioritySelectRef}\r\n        >\r\n          <option value=\"Low\">Low Priority</option>\r\n          <option value=\"Medium\">Medium Priority</option>\r\n          <option value=\"High\">High Priority</option>\r\n        </select>\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"Hours\"\r\n          className={styles.input}\r\n          value={newTask.hours}\r\n          onChange={(e) => setNewTask({ ...newTask, hours: e.target.value })}\r\n          onKeyDown={(e) => handleAddTaskKeyPress(e, addButtonRef)}\r\n          ref={hoursInputRef}\r\n          min=\"0\"\r\n          step=\"0.1\"\r\n        />\r\n        <button\r\n          className={`px-4 py-2 ${styles.buttonPrimary}`}\r\n          onClick={handleAddTask}\r\n          onKeyDown={(e) => {\r\n            if (e.key === \"Enter\") {\r\n              e.preventDefault();\r\n              handleAddTask();\r\n            }\r\n          }}\r\n          ref={addButtonRef}\r\n        >\r\n          <PlusCircle className=\"w-4 h-4 mr-1 inline\" /> Add Task\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddTaskForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}