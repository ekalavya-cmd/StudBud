{"ast":null,"code":"var _jsxFileName = \"D:\\\\Final Project\\\\study-buddy-planner\\\\src\\\\components\\\\Layout.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BookOpen } from \"lucide-react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSun, faMoon, faWater, faFire, faLeaf } from \"@fortawesome/free-solid-svg-icons\";\nimport Dashboard from \"./Dashboard\";\nimport TaskManager from \"./TaskManager\";\nimport Analytics from \"./Analytics\";\nimport Rewards from \"./Rewards\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Layout() {\n  _s();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [tasks, setTasks] = useState([]);\n  const [studyStats, setStudyStats] = useState({\n    totalHours: 0,\n    completedTasks: 0,\n    streak: 0,\n    lastActiveDate: null,\n    lastStreakUpdate: null,\n    studyHoursLog: []\n  });\n  const [aiSuggestion, setAiSuggestion] = useState(\"\");\n  const [points, setPoints] = useState(0);\n  const [badges, setBadges] = useState([]);\n  const [currentTheme, setCurrentTheme] = useState(\"Light Mode\");\n  const [unlockedThemes, setUnlockedThemes] = useState([\"Light Mode\"]);\n  const [loading, setLoading] = useState(true);\n  const userId = \"user123\";\n\n  // Theme styles for all themes\n  const themeStyles = {\n    \"Light Mode\": \"bg-slate-50 text-gray-800\",\n    \"Dark Mode\": \"bg-gray-800 text-gray-200\",\n    \"Ocean Breeze\": \"bg-gradient-to-br from-blue-100 to-teal-200 text-blue-900\",\n    \"Sunset Glow\": \"bg-gradient-to-br from-orange-200 via-pink-200 to-amber-200 text-orange-900 backdrop-blur-sm\",\n    \"Forest Whisper\": \"bg-gradient-to-br from-green-200 via-teal-200 to-emerald-200 text-green-900 backdrop-blur-sm\"\n  };\n  const headerStyles = {\n    \"Light Mode\": \"bg-indigo-600 text-white\",\n    \"Dark Mode\": \"bg-indigo-900 text-gray-200\",\n    \"Ocean Breeze\": \"bg-blue-600 text-white\",\n    \"Sunset Glow\": \"bg-gradient-to-r from-orange-600 to-pink-600 text-white shadow-lg\",\n    \"Forest Whisper\": \"bg-gradient-to-r from-green-600 to-teal-600 text-white shadow-lg\"\n  };\n  const navStyles = {\n    \"Light Mode\": \"bg-white text-gray-500\",\n    \"Dark Mode\": \"bg-gray-700 text-gray-300\",\n    \"Ocean Breeze\": \"bg-blue-200 text-blue-700\",\n    \"Sunset Glow\": \"bg-orange-100 text-orange-700 shadow-sm\",\n    \"Forest Whisper\": \"bg-green-100 text-green-700 shadow-sm\"\n  };\n\n  // Map themes to their FontAwesome icons\n  const themeIcons = {\n    \"Light Mode\": faSun,\n    \"Dark Mode\": faMoon,\n    \"Ocean Breeze\": faWater,\n    \"Sunset Glow\": faFire,\n    \"Forest Whisper\": faLeaf\n  };\n\n  // Function to find the next unlocked theme\n  const getNextTheme = () => {\n    if (unlockedThemes.length === 1) {\n      return \"Light Mode\"; // Only Light Mode is unlocked, cycle back to itself\n    }\n    const currentIndex = unlockedThemes.indexOf(currentTheme);\n    const nextIndex = (currentIndex + 1) % unlockedThemes.length;\n    return unlockedThemes[nextIndex];\n  };\n\n  // Handle theme change when clicking the icon\n  const handleThemeChange = () => {\n    const nextTheme = getNextTheme();\n    setCurrentTheme(nextTheme);\n    toast.info(`🎨 Switched to ${nextTheme}!`);\n  };\n\n  // Callbacks for Rewards.jsx\n  const handlePointsUpdate = newPoints => {\n    setPoints(newPoints);\n  };\n  const handleThemeUnlock = themeName => {\n    if (!unlockedThemes.includes(themeName)) {\n      setUnlockedThemes([...unlockedThemes, themeName]);\n    }\n  };\n\n  // Function to update streak\n  const updateStreak = today => {\n    setStudyStats(prev => {\n      const lastActive = prev.lastActiveDate ? new Date(prev.lastActiveDate) : null;\n      const lastStreakUpdate = prev.lastStreakUpdate ? new Date(prev.lastStreakUpdate) : null;\n      const todayDate = new Date(today);\n      let newStreak = prev.streak;\n      let newLastActiveDate = today;\n      let newLastStreakUpdate = prev.lastStreakUpdate;\n      if (!lastActive || lastActive.toISOString().split(\"T\")[0] !== today) {\n        if (lastActive) {\n          const diffTime = todayDate - lastActive;\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          if (diffDays === 1) {\n            newStreak = prev.streak + 1;\n            newLastStreakUpdate = today;\n          } else if (diffDays > 1) {\n            newStreak = 1;\n            newLastStreakUpdate = today;\n          }\n        } else {\n          newStreak = 1;\n          newLastStreakUpdate = today;\n        }\n      }\n      if (lastStreakUpdate && new Date(lastStreakUpdate).toISOString().split(\"T\")[0] !== today) {\n        const diffTime = todayDate - new Date(lastStreakUpdate);\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        if (diffDays > 1) {\n          newStreak = 1;\n          newLastStreakUpdate = today;\n        }\n      }\n      const newStats = {\n        ...prev,\n        streak: newStreak,\n        lastActiveDate: newLastActiveDate,\n        lastStreakUpdate: newLastStreakUpdate,\n        studyHoursLog: prev.studyHoursLog || []\n      };\n      console.log(\"Updated studyStats (updateStreak):\", newStats);\n      return newStats;\n    });\n  };\n\n  // Fetch user data from backend on mount\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        var _data$studyStats, _data$studyStats2, _data$studyStats3, _data$studyStats4, _data$studyStats5, _data$studyStats6;\n        const response = await fetch(`http://localhost:5000/api/user/${userId}`);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch user data: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Fetched data:\", data);\n        setTasks(data.tasks || []);\n        const fetchedStats = {\n          totalHours: ((_data$studyStats = data.studyStats) === null || _data$studyStats === void 0 ? void 0 : _data$studyStats.totalHours) || 0,\n          completedTasks: ((_data$studyStats2 = data.studyStats) === null || _data$studyStats2 === void 0 ? void 0 : _data$studyStats2.completedTasks) || 0,\n          streak: ((_data$studyStats3 = data.studyStats) === null || _data$studyStats3 === void 0 ? void 0 : _data$studyStats3.streak) || 0,\n          lastActiveDate: ((_data$studyStats4 = data.studyStats) === null || _data$studyStats4 === void 0 ? void 0 : _data$studyStats4.lastActiveDate) || null,\n          lastStreakUpdate: ((_data$studyStats5 = data.studyStats) === null || _data$studyStats5 === void 0 ? void 0 : _data$studyStats5.lastStreakUpdate) || null,\n          studyHoursLog: ((_data$studyStats6 = data.studyStats) === null || _data$studyStats6 === void 0 ? void 0 : _data$studyStats6.studyHoursLog) || []\n        };\n        console.log(\"Setting initial studyStats:\", fetchedStats);\n        setStudyStats(fetchedStats);\n        setPoints(data.points || 0);\n        setBadges(data.badges || []);\n        setCurrentTheme(data.currentTheme || \"Light Mode\");\n        setUnlockedThemes(data.unlockedThemes || [\"Light Mode\"]);\n\n        // Update streak\n        const today = new Date().toISOString().split(\"T\")[0];\n        console.log(\"Today's date:\", today);\n        const {\n          lastActiveDate,\n          streak,\n          lastStreakUpdate\n        } = fetchedStats;\n        let newStats = {\n          ...fetchedStats\n        };\n        if (lastStreakUpdate !== today) {\n          if (!lastActiveDate) {\n            console.log(\"No lastActiveDate, initializing with today's date...\");\n            newStats = {\n              ...fetchedStats,\n              lastActiveDate: today,\n              lastStreakUpdate: today,\n              studyHoursLog: fetchedStats.studyHoursLog || []\n            };\n          } else {\n            const lastDate = new Date(lastActiveDate);\n            const currentDate = new Date(today);\n            const diffDays = (currentDate - lastDate) / (1000 * 60 * 60 * 24);\n            console.log(\"Days difference:\", diffDays);\n            if (diffDays === 1) {\n              newStats = {\n                ...fetchedStats,\n                streak: fetchedStats.streak + 1,\n                lastActiveDate: today,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n              console.log(\"Updated studyStats (increment streak):\", newStats);\n            } else if (diffDays > 1) {\n              newStats = {\n                ...fetchedStats,\n                streak: 0,\n                lastActiveDate: today,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n              console.log(\"Updated studyStats (reset streak):\", newStats);\n            } else {\n              newStats = {\n                ...fetchedStats,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n              console.log(\"Updated studyStats (same day):\", newStats);\n            }\n          }\n          setStudyStats(newStats);\n        } else {\n          console.log(\"Streak already updated today, skipping...\");\n        }\n\n        // Check if this fetch is likely due to a server restart\n        const lastFetchTimestamp = localStorage.getItem(\"lastFetchTimestamp\");\n        const currentTimestamp = Date.now();\n        localStorage.setItem(\"lastFetchTimestamp\", currentTimestamp.toString());\n        const lastActive = fetchedStats.lastActiveDate ? new Date(fetchedStats.lastActiveDate).getTime() : 0;\n        const timeSinceLastFetch = lastFetchTimestamp ? currentTimestamp - parseInt(lastFetchTimestamp) : Infinity;\n        const timeSinceLastActive = lastActive ? currentTimestamp - lastActive : Infinity;\n        if (!lastFetchTimestamp || timeSinceLastFetch > 60000 && timeSinceLastActive > 60000 || fetchedStats.streak === 0 && fetchedStats.totalHours === 0) {\n          toast.success(\"Progress saved successfully!\", {\n            autoClose: 2000\n          });\n        }\n\n        // Set initial AI suggestion based on new conditions\n        setTimeout(() => {\n          const incompleteTasks = (data.tasks || []).filter(task => !task.completed);\n          if (incompleteTasks.length === 0) {\n            setAiSuggestion(\"You have no incomplete tasks! Add a new task to keep progressing.\");\n            return;\n          }\n          const todayStr = new Date().toISOString().split(\"T\")[0];\n          const priorityValue = {\n            High: 3,\n            Medium: 2,\n            Low: 1\n          };\n          const tasksDueToday = [];\n          const pastDueTasks = [];\n          const futureTasks = [];\n          incompleteTasks.forEach(task => {\n            const taskDueDateStr = task.dueDate;\n            const diffDays = (new Date(taskDueDateStr) - new Date(todayStr)) / (1000 * 60 * 60 * 24);\n            if (taskDueDateStr === todayStr) {\n              tasksDueToday.push(task);\n            } else if (diffDays < 0) {\n              pastDueTasks.push({\n                ...task,\n                dueDateDiff: Math.abs(diffDays)\n              });\n            } else {\n              futureTasks.push({\n                ...task,\n                dueDateDiff: diffDays\n              });\n            }\n          });\n          tasksDueToday.sort((a, b) => priorityValue[b.priority] - priorityValue[a.priority]);\n          pastDueTasks.sort((a, b) => {\n            if (a.dueDateDiff !== b.dueDateDiff) {\n              return a.dueDateDiff - b.dueDateDiff;\n            }\n            return priorityValue[b.priority] - priorityValue[a.priority];\n          });\n          futureTasks.sort((a, b) => {\n            if (a.dueDateDiff !== b.dueDateDiff) {\n              return a.dueDateDiff - b.dueDateDiff;\n            }\n            return priorityValue[b.priority] - priorityValue[a.priority];\n          });\n          let recommendedTask = null;\n          if (tasksDueToday.length > 0) {\n            recommendedTask = tasksDueToday[0];\n          } else if (pastDueTasks.length > 0) {\n            recommendedTask = pastDueTasks[0];\n          } else if (futureTasks.length > 0) {\n            recommendedTask = futureTasks[0];\n          }\n          if (recommendedTask) {\n            setAiSuggestion(`Based on your schedule and learning patterns, I recommend focusing on your \"${recommendedTask.title}\" today.`);\n          } else {\n            setAiSuggestion(\"You have no incomplete tasks! Add a new task to keep progressing.\");\n          }\n        }, 1000);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error fetching user data:\", err);\n        toast.error(\"Failed to load user data. Using defaults.\");\n        setTasks([{\n          id: 1,\n          title: \"Complete Math Assignment\",\n          dueDate: \"2025-04-25\",\n          priority: \"High\",\n          subject: \"Math\",\n          completed: false,\n          completedDate: null\n        }, {\n          id: 2,\n          title: \"Review Chemistry Notes\",\n          dueDate: \"2025-04-23\",\n          priority: \"Medium\",\n          subject: \"Science\",\n          completed: true,\n          completedDate: \"2025-04-23\"\n        }, {\n          id: 3,\n          title: \"Research Paper Outline\",\n          dueDate: \"2025-04-30\",\n          priority: \"High\",\n          subject: \"English\",\n          completed: false,\n          completedDate: null\n        }]);\n        setTimeout(() => {\n          const defaultIncompleteTasks = [{\n            id: 1,\n            title: \"Complete Math Assignment\",\n            dueDate: \"2025-04-25\",\n            priority: \"High\",\n            subject: \"Math\",\n            completed: false,\n            completedDate: null\n          }, {\n            id: 2,\n            title: \"Review Chemistry Notes\",\n            dueDate: \"2025-04-23\",\n            priority: \"Medium\",\n            subject: \"Science\",\n            completed: true,\n            completedDate: \"2025-04-23\"\n          }, {\n            id: 3,\n            title: \"Research Paper Outline\",\n            dueDate: \"2025-04-30\",\n            priority: \"High\",\n            subject: \"English\",\n            completed: false,\n            completedDate: null\n          }].filter(task => !task.completed);\n          const todayStr = new Date().toISOString().split(\"T\")[0];\n          const priorityValue = {\n            High: 3,\n            Medium: 2,\n            Low: 1\n          };\n          const tasksDueToday = [];\n          const pastDueTasks = [];\n          const futureTasks = [];\n          defaultIncompleteTasks.forEach(task => {\n            const taskDueDateStr = task.dueDate;\n            const diffDays = (new Date(taskDueDateStr) - new Date(todayStr)) / (1000 * 60 * 60 * 24);\n            if (taskDueDateStr === todayStr) {\n              tasksDueToday.push(task);\n            } else if (diffDays < 0) {\n              pastDueTasks.push({\n                ...task,\n                dueDateDiff: Math.abs(diffDays)\n              });\n            } else {\n              futureTasks.push({\n                ...task,\n                dueDateDiff: diffDays\n              });\n            }\n          });\n          tasksDueToday.sort((a, b) => priorityValue[b.priority] - priorityValue[a.priority]);\n          pastDueTasks.sort((a, b) => {\n            if (a.dueDateDiff !== b.dueDateDiff) {\n              return a.dueDateDiff - b.dueDateDiff;\n            }\n            return priorityValue[b.priority] - priorityValue[a.priority];\n          });\n          futureTasks.sort((a, b) => {\n            if (a.dueDateDiff !== b.dueDateDiff) {\n              return a.dueDateDiff - b.dueDateDiff;\n            }\n            return priorityValue[b.priority] - priorityValue[a.priority];\n          });\n          let recommendedTask = null;\n          if (tasksDueToday.length > 0) {\n            recommendedTask = tasksDueToday[0];\n          } else if (pastDueTasks.length > 0) {\n            recommendedTask = pastDueTasks[0];\n          } else if (futureTasks.length > 0) {\n            recommendedTask = futureTasks[0];\n          }\n          if (recommendedTask) {\n            setAiSuggestion(`Based on your schedule and learning patterns, I recommend focusing on your \"${recommendedTask.title}\" today.`);\n          } else {\n            setAiSuggestion(\"You have no incomplete tasks! Add a new task to keep progressing.\");\n          }\n        }, 1000);\n        setLoading(false);\n      }\n    };\n    fetchUserData();\n  }, []);\n  useEffect(() => {\n    console.log(\"Current studyStats (after update):\", studyStats);\n  }, [studyStats]);\n  useEffect(() => {\n    const completedCount = tasks.filter(task => task.completed).length;\n    setStudyStats(prevStats => {\n      const newStats = {\n        ...prevStats,\n        completedTasks: completedCount,\n        studyHoursLog: prevStats.studyHoursLog || []\n      };\n      console.log(\"Updated studyStats (completedTasks):\", newStats);\n      return newStats;\n    });\n  }, [tasks]);\n  useEffect(() => {\n    const saveUserData = async () => {\n      try {\n        const serializedStudyStats = {\n          totalHours: studyStats.totalHours,\n          completedTasks: studyStats.completedTasks,\n          streak: studyStats.streak,\n          lastActiveDate: studyStats.lastActiveDate || null,\n          lastStreakUpdate: studyStats.lastStreakUpdate || null,\n          studyHoursLog: studyStats.studyHoursLog || []\n        };\n        const dataToSend = {\n          tasks,\n          studyStats: serializedStudyStats,\n          points,\n          badges,\n          themes: [\"Light Mode\", \"Dark Mode\", \"Ocean Breeze\", \"Sunset Glow\", \"Forest Whisper\"],\n          currentTheme,\n          unlockedThemes\n        };\n        console.log(\"Sending data to backend:\", JSON.stringify(dataToSend, null, 2));\n        const response = await fetch(`http://localhost:5000/api/user/${userId}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(dataToSend)\n        });\n        console.log(\"Response status:\", response.status);\n        const responseBody = await response.text();\n        console.log(\"Response body:\", responseBody);\n        if (!response.ok) {\n          throw new Error(`Failed to save user data: ${response.status} - ${responseBody}`);\n        }\n        console.log(\"Data saved successfully\");\n      } catch (err) {\n        console.error(\"Error saving user data:\", err);\n        toast.error(`Failed to save progress: ${err.message}`);\n      }\n    };\n    const debounceSave = setTimeout(() => {\n      saveUserData();\n    }, 1000);\n    return () => clearTimeout(debounceSave);\n  }, [tasks, studyStats, points, badges, currentTheme, unlockedThemes]);\n  const logStudyHours = hours => {\n    const parsedHours = parseFloat(hours);\n    if (isNaN(parsedHours) || parsedHours <= 0) {\n      toast.error(\"Please enter a valid number of hours greater than 0.\");\n      return;\n    }\n    const roundedHours = Math.round(parsedHours * 100) / 100;\n    const today = new Date().toISOString().split(\"T\")[0];\n    setStudyStats(prev => {\n      const studyHoursLog = prev.studyHoursLog || [];\n      const existingLog = studyHoursLog.find(log => log.date === today);\n      let updatedLog;\n      if (existingLog) {\n        updatedLog = studyHoursLog.map(log => log.date === today ? {\n          ...log,\n          hours: Math.round((log.hours + roundedHours) * 100) / 100\n        } : log);\n      } else {\n        updatedLog = [...studyHoursLog, {\n          date: today,\n          hours: roundedHours\n        }];\n      }\n      const newStats = {\n        ...prev,\n        totalHours: Math.round((prev.totalHours + roundedHours) * 100) / 100,\n        studyHoursLog: updatedLog\n      };\n      console.log(\"Updated studyStats (logStudyHours):\", newStats);\n      return newStats;\n    });\n    updateStreak(today);\n    toast.success(`Logged ${roundedHours} study hours!`);\n  };\n  const getStudyTips = () => {\n    setAiSuggestion(\"Loading new suggestions...\");\n    setTimeout(() => {\n      const tips = [\"Try using the Pomodoro technique: 25 minutes of focused study followed by a 5-minute break.\", \"For difficult subjects, try teaching the material to an imaginary student.\", \"Create visual mind maps to connect key concepts in your subjects.\", \"Review your notes within 24 hours of taking them to improve retention.\", \"Study in short, frequent sessions rather than long cramming sessions.\"];\n      const randomTip = tips[Math.floor(Math.random() * tips.length)];\n      setAiSuggestion(randomTip);\n    }, 1500);\n  };\n  const generateSchedule = () => {\n    setAiSuggestion(\"Generating personalized study schedule...\");\n    setTimeout(() => {\n      const today = new Date();\n      const todayStr = new Date().toISOString().split(\"T\")[0];\n      const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      const todayDay = days[today.getDay()];\n      const incompleteTasks = tasks.filter(task => !task.completed);\n      if (incompleteTasks.length === 0) {\n        setAiSuggestion(\"You have no incomplete tasks to schedule. Add a new task to get started!\");\n        return;\n      }\n      const tasksDueToday = [];\n      const pastDueTasks = [];\n      const futureTasksDueTomorrow = [];\n      const otherFutureTasks = [];\n      incompleteTasks.forEach(task => {\n        const taskDueDate = new Date(task.dueDate);\n        const taskDueDateStr = task.dueDate;\n        const diffDays = (new Date(taskDueDateStr) - new Date(todayStr)) / (1000 * 60 * 60 * 24);\n        if (taskDueDateStr === todayStr) {\n          tasksDueToday.push(task);\n        } else if (diffDays < 0) {\n          pastDueTasks.push({\n            ...task,\n            dueDateDiff: Math.abs(diffDays)\n          });\n        } else {\n          if (diffDays === 1) {\n            futureTasksDueTomorrow.push({\n              ...task,\n              dueDateDiff: diffDays\n            });\n          } else {\n            otherFutureTasks.push({\n              ...task,\n              dueDateDiff: diffDays\n            });\n          }\n        }\n      });\n      const priorityValue = {\n        High: 3,\n        Medium: 2,\n        Low: 1\n      };\n      tasksDueToday.sort((a, b) => priorityValue[b.priority] - priorityValue[a.priority]);\n      pastDueTasks.sort((a, b) => {\n        if (a.dueDateDiff !== b.dueDateDiff) {\n          return a.dueDateDiff - b.dueDateDiff;\n        }\n        return priorityValue[b.priority] - priorityValue[a.priority];\n      });\n      futureTasksDueTomorrow.sort((a, b) => priorityValue[b.priority] - priorityValue[a.priority]);\n      otherFutureTasks.sort((a, b) => {\n        if (a.dueDateDiff !== b.dueDateDiff) {\n          return a.dueDateDiff - b.dueDateDiff;\n        }\n        return priorityValue[b.priority] - priorityValue[a.priority];\n      });\n      const schedule = {\n        today: [],\n        futureDays: []\n      };\n      const getHours = priority => {\n        return priority === \"High\" ? 2 : priority === \"Medium\" ? 1.5 : 1;\n      };\n      tasksDueToday.forEach(task => {\n        const hours = getHours(task.priority);\n        schedule.today.push(`${task.title} (${hours} hours)`);\n      });\n      pastDueTasks.forEach(task => {\n        const hours = getHours(task.priority);\n        schedule.today.push(`${task.title} (${hours} hours)`);\n      });\n      futureTasksDueTomorrow.forEach(task => {\n        const hours = getHours(task.priority);\n        schedule.today.push(`${task.title} (${hours} hours)`);\n      });\n      otherFutureTasks.forEach(task => {\n        const taskDueDate = new Date(task.dueDate);\n        const diffDays = task.dueDateDiff;\n        const hours = getHours(task.priority);\n        const scheduleDate = new Date(taskDueDate);\n        scheduleDate.setDate(taskDueDate.getDate() - 1);\n        const scheduleDateStr = scheduleDate.toISOString().split(\"T\")[0];\n        const scheduleDay = days[scheduleDate.getDay()];\n        let dayEntry = schedule.futureDays.find(entry => entry.dayName === scheduleDay && entry.date === scheduleDateStr);\n        if (!dayEntry) {\n          dayEntry = {\n            dayName: scheduleDay,\n            date: scheduleDateStr,\n            tasks: []\n          };\n          schedule.futureDays.push(dayEntry);\n        }\n        dayEntry.tasks.push(`${task.title} (${hours} hours)`);\n      });\n      schedule.futureDays.sort((a, b) => new Date(a.date) - new Date(b.date));\n      const scheduleMessage = [\"Based on your upcoming tasks and past performance, here's a suggested schedule:\\n\"];\n      if (schedule.today.length > 0) {\n        scheduleMessage.push(`- ${todayDay} (Today):`);\n        schedule.today.forEach(taskEntry => {\n          scheduleMessage.push(`  - ${taskEntry}`);\n        });\n      }\n      schedule.futureDays.forEach(day => {\n        scheduleMessage.push(`- ${day.dayName} (${day.date}):`);\n        day.tasks.forEach(taskEntry => {\n          scheduleMessage.push(`  - ${taskEntry}`);\n        });\n      });\n      if (schedule.today.length === 0 && schedule.futureDays.length === 0) {\n        scheduleMessage.push(\"No tasks to schedule for the immediate future.\");\n      }\n      setAiSuggestion(scheduleMessage.join(\"\\n\"));\n    }, 2000);\n  };\n  const addTask = newTask => {\n    const task = {\n      id: Date.now(),\n      ...newTask,\n      completedDate: null\n    };\n    setTasks([...tasks, task]);\n  };\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n  const toggleTaskComplete = id => {\n    const task = tasks.find(task => task.id === id);\n    if (!task) return;\n    const today = new Date().toISOString().split(\"T\")[0];\n    let newPoints = points;\n    let newBadges = [...badges];\n    let notifications = [];\n    const updatedTasks = tasks.map(t => t.id === id ? {\n      ...t,\n      completed: !t.completed,\n      completedDate: !t.completed ? today : null\n    } : t);\n    setTasks(updatedTasks);\n    if (!task.completed) {\n      let pointsToAdd = task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\n      newPoints = points + pointsToAdd;\n      notifications.push(`🎉 +${pointsToAdd} Points! Keep it up!`);\n      const highPriorityTasks = updatedTasks.filter(t => t.priority === \"High\" && t.completed).length;\n      if (highPriorityTasks >= 5 && !badges.includes(\"Priority Master\")) {\n        newBadges.push(\"Priority Master\");\n        notifications.push(\"🏆 Badge Earned: Priority Master!\");\n      }\n      const totalCompletedTasks = updatedTasks.filter(t => t.completed).length;\n      if (totalCompletedTasks >= 10 && !badges.includes(\"Task Titan\")) {\n        newBadges.push(\"Task Titan\");\n        notifications.push(\"🏆 Badge Earned: Task Titan!\");\n      }\n      const dueDate = new Date(task.dueDate);\n      const todayDate = new Date();\n      if (dueDate > todayDate) {\n        const earlyTasks = updatedTasks.filter(t => new Date(t.dueDate) > todayDate && t.completed).length;\n        if (earlyTasks >= 3 && !badges.includes(\"Early Bird\")) {\n          newBadges.push(\"Early Bird\");\n          notifications.push(\"🏆 Badge Earned: Early Bird!\");\n        }\n      }\n      updateStreak(today);\n    } else {\n      let pointsToDeduct = task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\n      newPoints = Math.max(0, points - pointsToDeduct);\n      notifications.push(`↩️ -${pointsToDeduct} Points. Task unmarked as completed.`);\n    }\n    setPoints(newPoints);\n    setBadges(newBadges);\n    notifications.forEach(msg => toast.success(msg));\n  };\n  const updateTask = updatedTask => {\n    setTasks(tasks.map(task => task.id === updatedTask.id ? updatedTask : task));\n  };\n  useEffect(() => {\n    if (studyStats.streak >= 7 && !badges.includes(\"Streak Star\")) {\n      let newBadges = [...badges, \"Streak Star\"];\n      let newPoints = points + 50;\n      setBadges(newBadges);\n      setPoints(newPoints);\n      toast.success(\"🏆 Badge Earned: Streak Star!\");\n      toast.success(\"🎉 +50 Points for 7-Day Streak!\");\n    }\n  }, [studyStats.streak]);\n  const nextTheme = getNextTheme();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `min-h-screen ${themeStyles[currentTheme]}`,\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 851,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: `p-4 ${headerStyles[currentTheme]}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-2xl font-bold flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(BookOpen, {\n              className: \"mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 856,\n              columnNumber: 15\n            }, this), \"StudyBuddy AI Planner\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 855,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: handleThemeChange,\n            className: \"ml-4 cursor-pointer text-xl\",\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: themeIcons[nextTheme]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 863,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 859,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 854,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `px-4 py-2 rounded-lg text-sm ${currentTheme === \"Dark Mode\" ? \"bg-indigo-700 text-gray-200\" : \"bg-indigo-700 text-white\"}`,\n          children: new Date().toLocaleDateString(\"en-US\", {\n            weekday: \"long\",\n            year: \"numeric\",\n            month: \"long\",\n            day: \"numeric\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 866,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 853,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n      className: `shadow ${navStyles[currentTheme]}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveTab(\"dashboard\"),\n            className: `px-4 py-3 font-medium text-sm ${activeTab === \"dashboard\" ? \"border-b-2 border-indigo-600 text-indigo-600\" : currentTheme === \"Dark Mode\" ? \"text-gray-300\" : \"text-gray-500\"}`,\n            children: \"Dashboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 886,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveTab(\"tasks\"),\n            className: `px-4 py-3 font-medium text-sm ${activeTab === \"tasks\" ? \"border-b-2 border-indigo-600 text-indigo-600\" : currentTheme === \"Dark Mode\" ? \"text-gray-300\" : \"text-gray-500\"}`,\n            children: \"Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 898,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveTab(\"analytics\"),\n            className: `px-4 py-3 font-medium text-sm ${activeTab === \"analytics\" ? \"border-b-2 border-indigo-600 text-indigo-600\" : currentTheme === \"Dark Mode\" ? \"text-gray-300\" : \"text-gray-500\"}`,\n            children: \"Analytics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 910,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveTab(\"rewards\"),\n            className: `px-4 py-3 font-medium text-sm ${activeTab === \"rewards\" ? \"border-b-2 border-indigo-600 text-indigo-600\" : currentTheme === \"Dark Mode\" ? \"text-gray-300\" : \"text-gray-500\"}`,\n            children: \"Rewards\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 922,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 885,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 884,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 883,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container mx-auto p-4\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center py-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-pulse flex justify-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-4 h-4 rounded-full ${currentTheme === \"Dark Mode\" ? \"bg-indigo-500\" : \"bg-indigo-600\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 942,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-4 h-4 rounded-full ${currentTheme === \"Dark Mode\" ? \"bg-indigo-500\" : \"bg-indigo-600\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 949,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-4 h-4 rounded-full ${currentTheme === \"Dark Mode\" ? \"bg-indigo-500\" : \"bg-indigo-600\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 956,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 941,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-2\",\n          children: \"Loading your study data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 964,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 940,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [activeTab === \"dashboard\" && /*#__PURE__*/_jsxDEV(Dashboard, {\n          tasks: tasks,\n          studyStats: studyStats,\n          aiSuggestion: aiSuggestion,\n          getStudyTips: getStudyTips,\n          generateSchedule: generateSchedule,\n          setActiveTab: setActiveTab,\n          toggleTaskComplete: toggleTaskComplete,\n          deleteTask: deleteTask,\n          currentTheme: currentTheme,\n          logStudyHours: logStudyHours\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 969,\n          columnNumber: 15\n        }, this), activeTab === \"tasks\" && /*#__PURE__*/_jsxDEV(TaskManager, {\n          tasks: tasks,\n          addTask: addTask,\n          updateTask: updateTask,\n          deleteTask: deleteTask,\n          toggleTaskComplete: toggleTaskComplete,\n          currentTheme: currentTheme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 984,\n          columnNumber: 15\n        }, this), activeTab === \"analytics\" && /*#__PURE__*/_jsxDEV(Analytics, {\n          tasks: tasks,\n          currentTheme: currentTheme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 995,\n          columnNumber: 15\n        }, this), activeTab === \"rewards\" && /*#__PURE__*/_jsxDEV(Rewards, {\n          points: points,\n          badges: badges,\n          studyStats: studyStats,\n          currentTheme: currentTheme,\n          onPointsUpdate: handlePointsUpdate,\n          onThemeUnlock: handleThemeUnlock,\n          unlockedThemes: unlockedThemes // Added the missing prop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 999,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 938,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 850,\n    columnNumber: 5\n  }, this);\n}\n_s(Layout, \"CpoSXAqZtmVVtLZ/orin7Etk0N0=\");\n_c = Layout;\nexport default Layout;\nvar _c;\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"names":["React","useState","useEffect","BookOpen","FontAwesomeIcon","faSun","faMoon","faWater","faFire","faLeaf","Dashboard","TaskManager","Analytics","Rewards","ToastContainer","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","Layout","_s","activeTab","setActiveTab","tasks","setTasks","studyStats","setStudyStats","totalHours","completedTasks","streak","lastActiveDate","lastStreakUpdate","studyHoursLog","aiSuggestion","setAiSuggestion","points","setPoints","badges","setBadges","currentTheme","setCurrentTheme","unlockedThemes","setUnlockedThemes","loading","setLoading","userId","themeStyles","headerStyles","navStyles","themeIcons","getNextTheme","length","currentIndex","indexOf","nextIndex","handleThemeChange","nextTheme","info","handlePointsUpdate","newPoints","handleThemeUnlock","themeName","includes","updateStreak","today","prev","lastActive","Date","todayDate","newStreak","newLastActiveDate","newLastStreakUpdate","toISOString","split","diffTime","diffDays","Math","ceil","newStats","console","log","fetchUserData","_data$studyStats","_data$studyStats2","_data$studyStats3","_data$studyStats4","_data$studyStats5","_data$studyStats6","response","fetch","ok","Error","status","data","json","fetchedStats","lastDate","currentDate","lastFetchTimestamp","localStorage","getItem","currentTimestamp","now","setItem","toString","getTime","timeSinceLastFetch","parseInt","Infinity","timeSinceLastActive","success","autoClose","setTimeout","incompleteTasks","filter","task","completed","todayStr","priorityValue","High","Medium","Low","tasksDueToday","pastDueTasks","futureTasks","forEach","taskDueDateStr","dueDate","push","dueDateDiff","abs","sort","a","b","priority","recommendedTask","title","err","error","id","subject","completedDate","defaultIncompleteTasks","completedCount","prevStats","saveUserData","serializedStudyStats","dataToSend","themes","JSON","stringify","method","headers","body","responseBody","text","message","debounceSave","clearTimeout","logStudyHours","hours","parsedHours","parseFloat","isNaN","roundedHours","round","existingLog","find","date","updatedLog","map","getStudyTips","tips","randomTip","floor","random","generateSchedule","days","todayDay","getDay","futureTasksDueTomorrow","otherFutureTasks","taskDueDate","schedule","futureDays","getHours","scheduleDate","setDate","getDate","scheduleDateStr","scheduleDay","dayEntry","entry","dayName","scheduleMessage","taskEntry","day","join","addTask","newTask","deleteTask","toggleTaskComplete","newBadges","notifications","updatedTasks","t","pointsToAdd","highPriorityTasks","totalCompletedTasks","earlyTasks","pointsToDeduct","max","msg","updateTask","updatedTask","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","icon","toLocaleDateString","weekday","year","month","onPointsUpdate","onThemeUnlock","_c","$RefreshReg$"],"sources":["D:/Final Project/study-buddy-planner/src/components/Layout.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { BookOpen } from \"lucide-react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faSun,\r\n  faMoon,\r\n  faWater,\r\n  faFire,\r\n  faLeaf,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport TaskManager from \"./TaskManager\";\r\nimport Analytics from \"./Analytics\";\r\nimport Rewards from \"./Rewards\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nfunction Layout() {\r\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\r\n  const [tasks, setTasks] = useState([]);\r\n  const [studyStats, setStudyStats] = useState({\r\n    totalHours: 0,\r\n    completedTasks: 0,\r\n    streak: 0,\r\n    lastActiveDate: null,\r\n    lastStreakUpdate: null,\r\n    studyHoursLog: [],\r\n  });\r\n  const [aiSuggestion, setAiSuggestion] = useState(\"\");\r\n  const [points, setPoints] = useState(0);\r\n  const [badges, setBadges] = useState([]);\r\n  const [currentTheme, setCurrentTheme] = useState(\"Light Mode\");\r\n  const [unlockedThemes, setUnlockedThemes] = useState([\"Light Mode\"]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const userId = \"user123\";\r\n\r\n  // Theme styles for all themes\r\n  const themeStyles = {\r\n    \"Light Mode\": \"bg-slate-50 text-gray-800\",\r\n    \"Dark Mode\": \"bg-gray-800 text-gray-200\",\r\n    \"Ocean Breeze\": \"bg-gradient-to-br from-blue-100 to-teal-200 text-blue-900\",\r\n    \"Sunset Glow\":\r\n      \"bg-gradient-to-br from-orange-200 via-pink-200 to-amber-200 text-orange-900 backdrop-blur-sm\",\r\n    \"Forest Whisper\":\r\n      \"bg-gradient-to-br from-green-200 via-teal-200 to-emerald-200 text-green-900 backdrop-blur-sm\",\r\n  };\r\n\r\n  const headerStyles = {\r\n    \"Light Mode\": \"bg-indigo-600 text-white\",\r\n    \"Dark Mode\": \"bg-indigo-900 text-gray-200\",\r\n    \"Ocean Breeze\": \"bg-blue-600 text-white\",\r\n    \"Sunset Glow\":\r\n      \"bg-gradient-to-r from-orange-600 to-pink-600 text-white shadow-lg\",\r\n    \"Forest Whisper\":\r\n      \"bg-gradient-to-r from-green-600 to-teal-600 text-white shadow-lg\",\r\n  };\r\n\r\n  const navStyles = {\r\n    \"Light Mode\": \"bg-white text-gray-500\",\r\n    \"Dark Mode\": \"bg-gray-700 text-gray-300\",\r\n    \"Ocean Breeze\": \"bg-blue-200 text-blue-700\",\r\n    \"Sunset Glow\": \"bg-orange-100 text-orange-700 shadow-sm\",\r\n    \"Forest Whisper\": \"bg-green-100 text-green-700 shadow-sm\",\r\n  };\r\n\r\n  // Map themes to their FontAwesome icons\r\n  const themeIcons = {\r\n    \"Light Mode\": faSun,\r\n    \"Dark Mode\": faMoon,\r\n    \"Ocean Breeze\": faWater,\r\n    \"Sunset Glow\": faFire,\r\n    \"Forest Whisper\": faLeaf,\r\n  };\r\n\r\n  // Function to find the next unlocked theme\r\n  const getNextTheme = () => {\r\n    if (unlockedThemes.length === 1) {\r\n      return \"Light Mode\"; // Only Light Mode is unlocked, cycle back to itself\r\n    }\r\n\r\n    const currentIndex = unlockedThemes.indexOf(currentTheme);\r\n    const nextIndex = (currentIndex + 1) % unlockedThemes.length;\r\n    return unlockedThemes[nextIndex];\r\n  };\r\n\r\n  // Handle theme change when clicking the icon\r\n  const handleThemeChange = () => {\r\n    const nextTheme = getNextTheme();\r\n    setCurrentTheme(nextTheme);\r\n    toast.info(`🎨 Switched to ${nextTheme}!`);\r\n  };\r\n\r\n  // Callbacks for Rewards.jsx\r\n  const handlePointsUpdate = (newPoints) => {\r\n    setPoints(newPoints);\r\n  };\r\n\r\n  const handleThemeUnlock = (themeName) => {\r\n    if (!unlockedThemes.includes(themeName)) {\r\n      setUnlockedThemes([...unlockedThemes, themeName]);\r\n    }\r\n  };\r\n\r\n  // Function to update streak\r\n  const updateStreak = (today) => {\r\n    setStudyStats((prev) => {\r\n      const lastActive = prev.lastActiveDate\r\n        ? new Date(prev.lastActiveDate)\r\n        : null;\r\n      const lastStreakUpdate = prev.lastStreakUpdate\r\n        ? new Date(prev.lastStreakUpdate)\r\n        : null;\r\n      const todayDate = new Date(today);\r\n\r\n      let newStreak = prev.streak;\r\n      let newLastActiveDate = today;\r\n      let newLastStreakUpdate = prev.lastStreakUpdate;\r\n\r\n      if (!lastActive || lastActive.toISOString().split(\"T\")[0] !== today) {\r\n        if (lastActive) {\r\n          const diffTime = todayDate - lastActive;\r\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n          if (diffDays === 1) {\r\n            newStreak = prev.streak + 1;\r\n            newLastStreakUpdate = today;\r\n          } else if (diffDays > 1) {\r\n            newStreak = 1;\r\n            newLastStreakUpdate = today;\r\n          }\r\n        } else {\r\n          newStreak = 1;\r\n          newLastStreakUpdate = today;\r\n        }\r\n      }\r\n\r\n      if (\r\n        lastStreakUpdate &&\r\n        new Date(lastStreakUpdate).toISOString().split(\"T\")[0] !== today\r\n      ) {\r\n        const diffTime = todayDate - new Date(lastStreakUpdate);\r\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n        if (diffDays > 1) {\r\n          newStreak = 1;\r\n          newLastStreakUpdate = today;\r\n        }\r\n      }\r\n\r\n      const newStats = {\r\n        ...prev,\r\n        streak: newStreak,\r\n        lastActiveDate: newLastActiveDate,\r\n        lastStreakUpdate: newLastStreakUpdate,\r\n        studyHoursLog: prev.studyHoursLog || [],\r\n      };\r\n      console.log(\"Updated studyStats (updateStreak):\", newStats);\r\n      return newStats;\r\n    });\r\n  };\r\n\r\n  // Fetch user data from backend on mount\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:5000/api/user/${userId}`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to fetch user data: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        console.log(\"Fetched data:\", data);\r\n\r\n        setTasks(data.tasks || []);\r\n        const fetchedStats = {\r\n          totalHours: data.studyStats?.totalHours || 0,\r\n          completedTasks: data.studyStats?.completedTasks || 0,\r\n          streak: data.studyStats?.streak || 0,\r\n          lastActiveDate: data.studyStats?.lastActiveDate || null,\r\n          lastStreakUpdate: data.studyStats?.lastStreakUpdate || null,\r\n          studyHoursLog: data.studyStats?.studyHoursLog || [],\r\n        };\r\n        console.log(\"Setting initial studyStats:\", fetchedStats);\r\n        setStudyStats(fetchedStats);\r\n        setPoints(data.points || 0);\r\n        setBadges(data.badges || []);\r\n        setCurrentTheme(data.currentTheme || \"Light Mode\");\r\n        setUnlockedThemes(data.unlockedThemes || [\"Light Mode\"]);\r\n\r\n        // Update streak\r\n        const today = new Date().toISOString().split(\"T\")[0];\r\n        console.log(\"Today's date:\", today);\r\n        const { lastActiveDate, streak, lastStreakUpdate } = fetchedStats;\r\n\r\n        let newStats = { ...fetchedStats };\r\n        if (lastStreakUpdate !== today) {\r\n          if (!lastActiveDate) {\r\n            console.log(\"No lastActiveDate, initializing with today's date...\");\r\n            newStats = {\r\n              ...fetchedStats,\r\n              lastActiveDate: today,\r\n              lastStreakUpdate: today,\r\n              studyHoursLog: fetchedStats.studyHoursLog || [],\r\n            };\r\n          } else {\r\n            const lastDate = new Date(lastActiveDate);\r\n            const currentDate = new Date(today);\r\n            const diffDays = (currentDate - lastDate) / (1000 * 60 * 60 * 24);\r\n            console.log(\"Days difference:\", diffDays);\r\n\r\n            if (diffDays === 1) {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                streak: fetchedStats.streak + 1,\r\n                lastActiveDate: today,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n              console.log(\"Updated studyStats (increment streak):\", newStats);\r\n            } else if (diffDays > 1) {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                streak: 0,\r\n                lastActiveDate: today,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n              console.log(\"Updated studyStats (reset streak):\", newStats);\r\n            } else {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n              console.log(\"Updated studyStats (same day):\", newStats);\r\n            }\r\n          }\r\n          setStudyStats(newStats);\r\n        } else {\r\n          console.log(\"Streak already updated today, skipping...\");\r\n        }\r\n\r\n        // Check if this fetch is likely due to a server restart\r\n        const lastFetchTimestamp = localStorage.getItem(\"lastFetchTimestamp\");\r\n        const currentTimestamp = Date.now();\r\n        localStorage.setItem(\"lastFetchTimestamp\", currentTimestamp.toString());\r\n\r\n        const lastActive = fetchedStats.lastActiveDate\r\n          ? new Date(fetchedStats.lastActiveDate).getTime()\r\n          : 0;\r\n        const timeSinceLastFetch = lastFetchTimestamp\r\n          ? currentTimestamp - parseInt(lastFetchTimestamp)\r\n          : Infinity;\r\n        const timeSinceLastActive = lastActive\r\n          ? currentTimestamp - lastActive\r\n          : Infinity;\r\n\r\n        if (\r\n          !lastFetchTimestamp ||\r\n          (timeSinceLastFetch > 60000 && timeSinceLastActive > 60000) ||\r\n          (fetchedStats.streak === 0 && fetchedStats.totalHours === 0)\r\n        ) {\r\n          toast.success(\"Progress saved successfully!\", { autoClose: 2000 });\r\n        }\r\n\r\n        // Set initial AI suggestion based on new conditions\r\n        setTimeout(() => {\r\n          const incompleteTasks = (data.tasks || []).filter(\r\n            (task) => !task.completed\r\n          );\r\n          if (incompleteTasks.length === 0) {\r\n            setAiSuggestion(\r\n              \"You have no incomplete tasks! Add a new task to keep progressing.\"\r\n            );\r\n            return;\r\n          }\r\n\r\n          const todayStr = new Date().toISOString().split(\"T\")[0];\r\n          const priorityValue = { High: 3, Medium: 2, Low: 1 };\r\n\r\n          const tasksDueToday = [];\r\n          const pastDueTasks = [];\r\n          const futureTasks = [];\r\n\r\n          incompleteTasks.forEach((task) => {\r\n            const taskDueDateStr = task.dueDate;\r\n            const diffDays =\r\n              (new Date(taskDueDateStr) - new Date(todayStr)) /\r\n              (1000 * 60 * 60 * 24);\r\n\r\n            if (taskDueDateStr === todayStr) {\r\n              tasksDueToday.push(task);\r\n            } else if (diffDays < 0) {\r\n              pastDueTasks.push({ ...task, dueDateDiff: Math.abs(diffDays) });\r\n            } else {\r\n              futureTasks.push({ ...task, dueDateDiff: diffDays });\r\n            }\r\n          });\r\n\r\n          tasksDueToday.sort(\r\n            (a, b) => priorityValue[b.priority] - priorityValue[a.priority]\r\n          );\r\n          pastDueTasks.sort((a, b) => {\r\n            if (a.dueDateDiff !== b.dueDateDiff) {\r\n              return a.dueDateDiff - b.dueDateDiff;\r\n            }\r\n            return priorityValue[b.priority] - priorityValue[a.priority];\r\n          });\r\n          futureTasks.sort((a, b) => {\r\n            if (a.dueDateDiff !== b.dueDateDiff) {\r\n              return a.dueDateDiff - b.dueDateDiff;\r\n            }\r\n            return priorityValue[b.priority] - priorityValue[a.priority];\r\n          });\r\n\r\n          let recommendedTask = null;\r\n\r\n          if (tasksDueToday.length > 0) {\r\n            recommendedTask = tasksDueToday[0];\r\n          } else if (pastDueTasks.length > 0) {\r\n            recommendedTask = pastDueTasks[0];\r\n          } else if (futureTasks.length > 0) {\r\n            recommendedTask = futureTasks[0];\r\n          }\r\n\r\n          if (recommendedTask) {\r\n            setAiSuggestion(\r\n              `Based on your schedule and learning patterns, I recommend focusing on your \"${recommendedTask.title}\" today.`\r\n            );\r\n          } else {\r\n            setAiSuggestion(\r\n              \"You have no incomplete tasks! Add a new task to keep progressing.\"\r\n            );\r\n          }\r\n        }, 1000);\r\n\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(\"Error fetching user data:\", err);\r\n        toast.error(\"Failed to load user data. Using defaults.\");\r\n        setTasks([\r\n          {\r\n            id: 1,\r\n            title: \"Complete Math Assignment\",\r\n            dueDate: \"2025-04-25\",\r\n            priority: \"High\",\r\n            subject: \"Math\",\r\n            completed: false,\r\n            completedDate: null,\r\n          },\r\n          {\r\n            id: 2,\r\n            title: \"Review Chemistry Notes\",\r\n            dueDate: \"2025-04-23\",\r\n            priority: \"Medium\",\r\n            subject: \"Science\",\r\n            completed: true,\r\n            completedDate: \"2025-04-23\",\r\n          },\r\n          {\r\n            id: 3,\r\n            title: \"Research Paper Outline\",\r\n            dueDate: \"2025-04-30\",\r\n            priority: \"High\",\r\n            subject: \"English\",\r\n            completed: false,\r\n            completedDate: null,\r\n          },\r\n        ]);\r\n\r\n        setTimeout(() => {\r\n          const defaultIncompleteTasks = [\r\n            {\r\n              id: 1,\r\n              title: \"Complete Math Assignment\",\r\n              dueDate: \"2025-04-25\",\r\n              priority: \"High\",\r\n              subject: \"Math\",\r\n              completed: false,\r\n              completedDate: null,\r\n            },\r\n            {\r\n              id: 2,\r\n              title: \"Review Chemistry Notes\",\r\n              dueDate: \"2025-04-23\",\r\n              priority: \"Medium\",\r\n              subject: \"Science\",\r\n              completed: true,\r\n              completedDate: \"2025-04-23\",\r\n            },\r\n            {\r\n              id: 3,\r\n              title: \"Research Paper Outline\",\r\n              dueDate: \"2025-04-30\",\r\n              priority: \"High\",\r\n              subject: \"English\",\r\n              completed: false,\r\n              completedDate: null,\r\n            },\r\n          ].filter((task) => !task.completed);\r\n\r\n          const todayStr = new Date().toISOString().split(\"T\")[0];\r\n          const priorityValue = { High: 3, Medium: 2, Low: 1 };\r\n\r\n          const tasksDueToday = [];\r\n          const pastDueTasks = [];\r\n          const futureTasks = [];\r\n\r\n          defaultIncompleteTasks.forEach((task) => {\r\n            const taskDueDateStr = task.dueDate;\r\n            const diffDays =\r\n              (new Date(taskDueDateStr) - new Date(todayStr)) /\r\n              (1000 * 60 * 60 * 24);\r\n\r\n            if (taskDueDateStr === todayStr) {\r\n              tasksDueToday.push(task);\r\n            } else if (diffDays < 0) {\r\n              pastDueTasks.push({ ...task, dueDateDiff: Math.abs(diffDays) });\r\n            } else {\r\n              futureTasks.push({ ...task, dueDateDiff: diffDays });\r\n            }\r\n          });\r\n\r\n          tasksDueToday.sort(\r\n            (a, b) => priorityValue[b.priority] - priorityValue[a.priority]\r\n          );\r\n          pastDueTasks.sort((a, b) => {\r\n            if (a.dueDateDiff !== b.dueDateDiff) {\r\n              return a.dueDateDiff - b.dueDateDiff;\r\n            }\r\n            return priorityValue[b.priority] - priorityValue[a.priority];\r\n          });\r\n          futureTasks.sort((a, b) => {\r\n            if (a.dueDateDiff !== b.dueDateDiff) {\r\n              return a.dueDateDiff - b.dueDateDiff;\r\n            }\r\n            return priorityValue[b.priority] - priorityValue[a.priority];\r\n          });\r\n\r\n          let recommendedTask = null;\r\n\r\n          if (tasksDueToday.length > 0) {\r\n            recommendedTask = tasksDueToday[0];\r\n          } else if (pastDueTasks.length > 0) {\r\n            recommendedTask = pastDueTasks[0];\r\n          } else if (futureTasks.length > 0) {\r\n            recommendedTask = futureTasks[0];\r\n          }\r\n\r\n          if (recommendedTask) {\r\n            setAiSuggestion(\r\n              `Based on your schedule and learning patterns, I recommend focusing on your \"${recommendedTask.title}\" today.`\r\n            );\r\n          } else {\r\n            setAiSuggestion(\r\n              \"You have no incomplete tasks! Add a new task to keep progressing.\"\r\n            );\r\n          }\r\n        }, 1000);\r\n\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Current studyStats (after update):\", studyStats);\r\n  }, [studyStats]);\r\n\r\n  useEffect(() => {\r\n    const completedCount = tasks.filter((task) => task.completed).length;\r\n    setStudyStats((prevStats) => {\r\n      const newStats = {\r\n        ...prevStats,\r\n        completedTasks: completedCount,\r\n        studyHoursLog: prevStats.studyHoursLog || [],\r\n      };\r\n      console.log(\"Updated studyStats (completedTasks):\", newStats);\r\n      return newStats;\r\n    });\r\n  }, [tasks]);\r\n\r\n  useEffect(() => {\r\n    const saveUserData = async () => {\r\n      try {\r\n        const serializedStudyStats = {\r\n          totalHours: studyStats.totalHours,\r\n          completedTasks: studyStats.completedTasks,\r\n          streak: studyStats.streak,\r\n          lastActiveDate: studyStats.lastActiveDate || null,\r\n          lastStreakUpdate: studyStats.lastStreakUpdate || null,\r\n          studyHoursLog: studyStats.studyHoursLog || [],\r\n        };\r\n\r\n        const dataToSend = {\r\n          tasks,\r\n          studyStats: serializedStudyStats,\r\n          points,\r\n          badges,\r\n          themes: [\r\n            \"Light Mode\",\r\n            \"Dark Mode\",\r\n            \"Ocean Breeze\",\r\n            \"Sunset Glow\",\r\n            \"Forest Whisper\",\r\n          ],\r\n          currentTheme,\r\n          unlockedThemes,\r\n        };\r\n\r\n        console.log(\r\n          \"Sending data to backend:\",\r\n          JSON.stringify(dataToSend, null, 2)\r\n        );\r\n\r\n        const response = await fetch(\r\n          `http://localhost:5000/api/user/${userId}`,\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(dataToSend),\r\n          }\r\n        );\r\n\r\n        console.log(\"Response status:\", response.status);\r\n        const responseBody = await response.text();\r\n        console.log(\"Response body:\", responseBody);\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\r\n            `Failed to save user data: ${response.status} - ${responseBody}`\r\n          );\r\n        }\r\n\r\n        console.log(\"Data saved successfully\");\r\n      } catch (err) {\r\n        console.error(\"Error saving user data:\", err);\r\n        toast.error(`Failed to save progress: ${err.message}`);\r\n      }\r\n    };\r\n\r\n    const debounceSave = setTimeout(() => {\r\n      saveUserData();\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(debounceSave);\r\n  }, [tasks, studyStats, points, badges, currentTheme, unlockedThemes]);\r\n\r\n  const logStudyHours = (hours) => {\r\n    const parsedHours = parseFloat(hours);\r\n    if (isNaN(parsedHours) || parsedHours <= 0) {\r\n      toast.error(\"Please enter a valid number of hours greater than 0.\");\r\n      return;\r\n    }\r\n    const roundedHours = Math.round(parsedHours * 100) / 100;\r\n    const today = new Date().toISOString().split(\"T\")[0];\r\n    setStudyStats((prev) => {\r\n      const studyHoursLog = prev.studyHoursLog || [];\r\n      const existingLog = studyHoursLog.find((log) => log.date === today);\r\n      let updatedLog;\r\n      if (existingLog) {\r\n        updatedLog = studyHoursLog.map((log) =>\r\n          log.date === today\r\n            ? {\r\n                ...log,\r\n                hours: Math.round((log.hours + roundedHours) * 100) / 100,\r\n              }\r\n            : log\r\n        );\r\n      } else {\r\n        updatedLog = [...studyHoursLog, { date: today, hours: roundedHours }];\r\n      }\r\n      const newStats = {\r\n        ...prev,\r\n        totalHours: Math.round((prev.totalHours + roundedHours) * 100) / 100,\r\n        studyHoursLog: updatedLog,\r\n      };\r\n      console.log(\"Updated studyStats (logStudyHours):\", newStats);\r\n      return newStats;\r\n    });\r\n    updateStreak(today);\r\n    toast.success(`Logged ${roundedHours} study hours!`);\r\n  };\r\n\r\n  const getStudyTips = () => {\r\n    setAiSuggestion(\"Loading new suggestions...\");\r\n    setTimeout(() => {\r\n      const tips = [\r\n        \"Try using the Pomodoro technique: 25 minutes of focused study followed by a 5-minute break.\",\r\n        \"For difficult subjects, try teaching the material to an imaginary student.\",\r\n        \"Create visual mind maps to connect key concepts in your subjects.\",\r\n        \"Review your notes within 24 hours of taking them to improve retention.\",\r\n        \"Study in short, frequent sessions rather than long cramming sessions.\",\r\n      ];\r\n      const randomTip = tips[Math.floor(Math.random() * tips.length)];\r\n      setAiSuggestion(randomTip);\r\n    }, 1500);\r\n  };\r\n\r\n  const generateSchedule = () => {\r\n    setAiSuggestion(\"Generating personalized study schedule...\");\r\n    setTimeout(() => {\r\n      const today = new Date();\r\n      const todayStr = new Date().toISOString().split(\"T\")[0];\r\n      const days = [\r\n        \"Sunday\",\r\n        \"Monday\",\r\n        \"Tuesday\",\r\n        \"Wednesday\",\r\n        \"Thursday\",\r\n        \"Friday\",\r\n        \"Saturday\",\r\n      ];\r\n      const todayDay = days[today.getDay()];\r\n\r\n      const incompleteTasks = tasks.filter((task) => !task.completed);\r\n      if (incompleteTasks.length === 0) {\r\n        setAiSuggestion(\r\n          \"You have no incomplete tasks to schedule. Add a new task to get started!\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      const tasksDueToday = [];\r\n      const pastDueTasks = [];\r\n      const futureTasksDueTomorrow = [];\r\n      const otherFutureTasks = [];\r\n\r\n      incompleteTasks.forEach((task) => {\r\n        const taskDueDate = new Date(task.dueDate);\r\n        const taskDueDateStr = task.dueDate;\r\n        const diffDays =\r\n          (new Date(taskDueDateStr) - new Date(todayStr)) /\r\n          (1000 * 60 * 60 * 24);\r\n\r\n        if (taskDueDateStr === todayStr) {\r\n          tasksDueToday.push(task);\r\n        } else if (diffDays < 0) {\r\n          pastDueTasks.push({ ...task, dueDateDiff: Math.abs(diffDays) });\r\n        } else {\r\n          if (diffDays === 1) {\r\n            futureTasksDueTomorrow.push({ ...task, dueDateDiff: diffDays });\r\n          } else {\r\n            otherFutureTasks.push({ ...task, dueDateDiff: diffDays });\r\n          }\r\n        }\r\n      });\r\n\r\n      const priorityValue = { High: 3, Medium: 2, Low: 1 };\r\n\r\n      tasksDueToday.sort(\r\n        (a, b) => priorityValue[b.priority] - priorityValue[a.priority]\r\n      );\r\n\r\n      pastDueTasks.sort((a, b) => {\r\n        if (a.dueDateDiff !== b.dueDateDiff) {\r\n          return a.dueDateDiff - b.dueDateDiff;\r\n        }\r\n        return priorityValue[b.priority] - priorityValue[a.priority];\r\n      });\r\n\r\n      futureTasksDueTomorrow.sort(\r\n        (a, b) => priorityValue[b.priority] - priorityValue[a.priority]\r\n      );\r\n\r\n      otherFutureTasks.sort((a, b) => {\r\n        if (a.dueDateDiff !== b.dueDateDiff) {\r\n          return a.dueDateDiff - b.dueDateDiff;\r\n        }\r\n        return priorityValue[b.priority] - priorityValue[a.priority];\r\n      });\r\n\r\n      const schedule = {\r\n        today: [],\r\n        futureDays: [],\r\n      };\r\n\r\n      const getHours = (priority) => {\r\n        return priority === \"High\" ? 2 : priority === \"Medium\" ? 1.5 : 1;\r\n      };\r\n\r\n      tasksDueToday.forEach((task) => {\r\n        const hours = getHours(task.priority);\r\n        schedule.today.push(`${task.title} (${hours} hours)`);\r\n      });\r\n\r\n      pastDueTasks.forEach((task) => {\r\n        const hours = getHours(task.priority);\r\n        schedule.today.push(`${task.title} (${hours} hours)`);\r\n      });\r\n\r\n      futureTasksDueTomorrow.forEach((task) => {\r\n        const hours = getHours(task.priority);\r\n        schedule.today.push(`${task.title} (${hours} hours)`);\r\n      });\r\n\r\n      otherFutureTasks.forEach((task) => {\r\n        const taskDueDate = new Date(task.dueDate);\r\n        const diffDays = task.dueDateDiff;\r\n        const hours = getHours(task.priority);\r\n\r\n        const scheduleDate = new Date(taskDueDate);\r\n        scheduleDate.setDate(taskDueDate.getDate() - 1);\r\n        const scheduleDateStr = scheduleDate.toISOString().split(\"T\")[0];\r\n        const scheduleDay = days[scheduleDate.getDay()];\r\n\r\n        let dayEntry = schedule.futureDays.find(\r\n          (entry) =>\r\n            entry.dayName === scheduleDay && entry.date === scheduleDateStr\r\n        );\r\n        if (!dayEntry) {\r\n          dayEntry = { dayName: scheduleDay, date: scheduleDateStr, tasks: [] };\r\n          schedule.futureDays.push(dayEntry);\r\n        }\r\n        dayEntry.tasks.push(`${task.title} (${hours} hours)`);\r\n      });\r\n\r\n      schedule.futureDays.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n      const scheduleMessage = [\r\n        \"Based on your upcoming tasks and past performance, here's a suggested schedule:\\n\",\r\n      ];\r\n\r\n      if (schedule.today.length > 0) {\r\n        scheduleMessage.push(`- ${todayDay} (Today):`);\r\n        schedule.today.forEach((taskEntry) => {\r\n          scheduleMessage.push(`  - ${taskEntry}`);\r\n        });\r\n      }\r\n\r\n      schedule.futureDays.forEach((day) => {\r\n        scheduleMessage.push(`- ${day.dayName} (${day.date}):`);\r\n        day.tasks.forEach((taskEntry) => {\r\n          scheduleMessage.push(`  - ${taskEntry}`);\r\n        });\r\n      });\r\n\r\n      if (schedule.today.length === 0 && schedule.futureDays.length === 0) {\r\n        scheduleMessage.push(\"No tasks to schedule for the immediate future.\");\r\n      }\r\n\r\n      setAiSuggestion(scheduleMessage.join(\"\\n\"));\r\n    }, 2000);\r\n  };\r\n\r\n  const addTask = (newTask) => {\r\n    const task = { id: Date.now(), ...newTask, completedDate: null };\r\n    setTasks([...tasks, task]);\r\n  };\r\n\r\n  const deleteTask = (id) => {\r\n    setTasks(tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskComplete = (id) => {\r\n    const task = tasks.find((task) => task.id === id);\r\n    if (!task) return;\r\n\r\n    const today = new Date().toISOString().split(\"T\")[0];\r\n    let newPoints = points;\r\n    let newBadges = [...badges];\r\n    let notifications = [];\r\n\r\n    const updatedTasks = tasks.map((t) =>\r\n      t.id === id\r\n        ? {\r\n            ...t,\r\n            completed: !t.completed,\r\n            completedDate: !t.completed ? today : null,\r\n          }\r\n        : t\r\n    );\r\n    setTasks(updatedTasks);\r\n\r\n    if (!task.completed) {\r\n      let pointsToAdd =\r\n        task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\r\n      newPoints = points + pointsToAdd;\r\n      notifications.push(`🎉 +${pointsToAdd} Points! Keep it up!`);\r\n\r\n      const highPriorityTasks = updatedTasks.filter(\r\n        (t) => t.priority === \"High\" && t.completed\r\n      ).length;\r\n      if (highPriorityTasks >= 5 && !badges.includes(\"Priority Master\")) {\r\n        newBadges.push(\"Priority Master\");\r\n        notifications.push(\"🏆 Badge Earned: Priority Master!\");\r\n      }\r\n\r\n      const totalCompletedTasks = updatedTasks.filter(\r\n        (t) => t.completed\r\n      ).length;\r\n      if (totalCompletedTasks >= 10 && !badges.includes(\"Task Titan\")) {\r\n        newBadges.push(\"Task Titan\");\r\n        notifications.push(\"🏆 Badge Earned: Task Titan!\");\r\n      }\r\n\r\n      const dueDate = new Date(task.dueDate);\r\n      const todayDate = new Date();\r\n      if (dueDate > todayDate) {\r\n        const earlyTasks = updatedTasks.filter(\r\n          (t) => new Date(t.dueDate) > todayDate && t.completed\r\n        ).length;\r\n        if (earlyTasks >= 3 && !badges.includes(\"Early Bird\")) {\r\n          newBadges.push(\"Early Bird\");\r\n          notifications.push(\"🏆 Badge Earned: Early Bird!\");\r\n        }\r\n      }\r\n\r\n      updateStreak(today);\r\n    } else {\r\n      let pointsToDeduct =\r\n        task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\r\n      newPoints = Math.max(0, points - pointsToDeduct);\r\n      notifications.push(\r\n        `↩️ -${pointsToDeduct} Points. Task unmarked as completed.`\r\n      );\r\n    }\r\n\r\n    setPoints(newPoints);\r\n    setBadges(newBadges);\r\n    notifications.forEach((msg) => toast.success(msg));\r\n  };\r\n\r\n  const updateTask = (updatedTask) => {\r\n    setTasks(\r\n      tasks.map((task) => (task.id === updatedTask.id ? updatedTask : task))\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (studyStats.streak >= 7 && !badges.includes(\"Streak Star\")) {\r\n      let newBadges = [...badges, \"Streak Star\"];\r\n      let newPoints = points + 50;\r\n\r\n      setBadges(newBadges);\r\n      setPoints(newPoints);\r\n\r\n      toast.success(\"🏆 Badge Earned: Streak Star!\");\r\n      toast.success(\"🎉 +50 Points for 7-Day Streak!\");\r\n    }\r\n  }, [studyStats.streak]);\r\n\r\n  const nextTheme = getNextTheme();\r\n\r\n  return (\r\n    <div className={`min-h-screen ${themeStyles[currentTheme]}`}>\r\n      <ToastContainer />\r\n      <header className={`p-4 ${headerStyles[currentTheme]}`}>\r\n        <div className=\"container mx-auto flex justify-between items-center\">\r\n          <div className=\"flex items-center\">\r\n            <h1 className=\"text-2xl font-bold flex items-center\">\r\n              <BookOpen className=\"mr-2\" />\r\n              StudyBuddy AI Planner\r\n            </h1>\r\n            <div\r\n              onClick={handleThemeChange}\r\n              className=\"ml-4 cursor-pointer text-xl\"\r\n            >\r\n              <FontAwesomeIcon icon={themeIcons[nextTheme]} />\r\n            </div>\r\n          </div>\r\n          <div\r\n            className={`px-4 py-2 rounded-lg text-sm ${\r\n              currentTheme === \"Dark Mode\"\r\n                ? \"bg-indigo-700 text-gray-200\"\r\n                : \"bg-indigo-700 text-white\"\r\n            }`}\r\n          >\r\n            {new Date().toLocaleDateString(\"en-US\", {\r\n              weekday: \"long\",\r\n              year: \"numeric\",\r\n              month: \"long\",\r\n              day: \"numeric\",\r\n            })}\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <nav className={`shadow ${navStyles[currentTheme]}`}>\r\n        <div className=\"container mx-auto\">\r\n          <div className=\"flex\">\r\n            <button\r\n              onClick={() => setActiveTab(\"dashboard\")}\r\n              className={`px-4 py-3 font-medium text-sm ${\r\n                activeTab === \"dashboard\"\r\n                  ? \"border-b-2 border-indigo-600 text-indigo-600\"\r\n                  : currentTheme === \"Dark Mode\"\r\n                    ? \"text-gray-300\"\r\n                    : \"text-gray-500\"\r\n              }`}\r\n            >\r\n              Dashboard\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab(\"tasks\")}\r\n              className={`px-4 py-3 font-medium text-sm ${\r\n                activeTab === \"tasks\"\r\n                  ? \"border-b-2 border-indigo-600 text-indigo-600\"\r\n                  : currentTheme === \"Dark Mode\"\r\n                    ? \"text-gray-300\"\r\n                    : \"text-gray-500\"\r\n              }`}\r\n            >\r\n              Tasks\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab(\"analytics\")}\r\n              className={`px-4 py-3 font-medium text-sm ${\r\n                activeTab === \"analytics\"\r\n                  ? \"border-b-2 border-indigo-600 text-indigo-600\"\r\n                  : currentTheme === \"Dark Mode\"\r\n                    ? \"text-gray-300\"\r\n                    : \"text-gray-500\"\r\n              }`}\r\n            >\r\n              Analytics\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab(\"rewards\")}\r\n              className={`px-4 py-3 font-medium text-sm ${\r\n                activeTab === \"rewards\"\r\n                  ? \"border-b-2 border-indigo-600 text-indigo-600\"\r\n                  : currentTheme === \"Dark Mode\"\r\n                    ? \"text-gray-300\"\r\n                    : \"text-gray-500\"\r\n              }`}\r\n            >\r\n              Rewards\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <main className=\"container mx-auto p-4\">\r\n        {loading ? (\r\n          <div className=\"text-center py-8\">\r\n            <div className=\"animate-pulse flex justify-center space-x-2\">\r\n              <div\r\n                className={`w-4 h-4 rounded-full ${\r\n                  currentTheme === \"Dark Mode\"\r\n                    ? \"bg-indigo-500\"\r\n                    : \"bg-indigo-600\"\r\n                }`}\r\n              ></div>\r\n              <div\r\n                className={`w-4 h-4 rounded-full ${\r\n                  currentTheme === \"Dark Mode\"\r\n                    ? \"bg-indigo-500\"\r\n                    : \"bg-indigo-600\"\r\n                }`}\r\n              ></div>\r\n              <div\r\n                className={`w-4 h-4 rounded-full ${\r\n                  currentTheme === \"Dark Mode\"\r\n                    ? \"bg-indigo-500\"\r\n                    : \"bg-indigo-600\"\r\n                }`}\r\n              ></div>\r\n            </div>\r\n            <p className=\"mt-2\">Loading your study data...</p>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            {activeTab === \"dashboard\" && (\r\n              <Dashboard\r\n                tasks={tasks}\r\n                studyStats={studyStats}\r\n                aiSuggestion={aiSuggestion}\r\n                getStudyTips={getStudyTips}\r\n                generateSchedule={generateSchedule}\r\n                setActiveTab={setActiveTab}\r\n                toggleTaskComplete={toggleTaskComplete}\r\n                deleteTask={deleteTask}\r\n                currentTheme={currentTheme}\r\n                logStudyHours={logStudyHours}\r\n              />\r\n            )}\r\n\r\n            {activeTab === \"tasks\" && (\r\n              <TaskManager\r\n                tasks={tasks}\r\n                addTask={addTask}\r\n                updateTask={updateTask}\r\n                deleteTask={deleteTask}\r\n                toggleTaskComplete={toggleTaskComplete}\r\n                currentTheme={currentTheme}\r\n              />\r\n            )}\r\n\r\n            {activeTab === \"analytics\" && (\r\n              <Analytics tasks={tasks} currentTheme={currentTheme} />\r\n            )}\r\n\r\n            {activeTab === \"rewards\" && (\r\n              <Rewards\r\n                points={points}\r\n                badges={badges}\r\n                studyStats={studyStats}\r\n                currentTheme={currentTheme}\r\n                onPointsUpdate={handlePointsUpdate}\r\n                onThemeUnlock={handleThemeUnlock}\r\n                unlockedThemes={unlockedThemes} // Added the missing prop\r\n              />\r\n            )}\r\n          </>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}