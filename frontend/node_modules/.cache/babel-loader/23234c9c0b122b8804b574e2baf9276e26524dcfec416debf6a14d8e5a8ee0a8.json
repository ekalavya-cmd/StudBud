{"ast":null,"code":"var _jsxFileName = \"D:\\\\Final Project\\\\study-buddy-planner\\\\src\\\\components\\\\Layout.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { BookOpen } from \"lucide-react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSun, faMoon, faWater, faFire, faLeaf } from \"@fortawesome/free-solid-svg-icons\";\nimport { parse, differenceInDays, format } from \"date-fns\";\nimport Dashboard from \"./Dashboard\";\nimport TaskManager from \"./TaskManager\";\nimport Analytics from \"./Analytics\";\nimport Rewards from \"./Rewards\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// Consolidated theme styles\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst themeStyles = {\n  \"Light Mode\": {\n    bg: \"bg-slate-50 text-gray-800\",\n    header: \"bg-indigo-600 text-white\",\n    nav: \"bg-white text-gray-500\",\n    activeTab: \"border-b-2 border-indigo-600 text-indigo-600\",\n    inactiveTab: \"text-gray-500\",\n    dateBadge: \"bg-indigo-700 text-white\",\n    loadingDot: \"bg-indigo-600\"\n  },\n  \"Dark Mode\": {\n    bg: \"bg-gray-800 text-gray-200\",\n    header: \"bg-indigo-900 text-gray-200\",\n    nav: \"bg-gray-700 text-gray-300\",\n    activeTab: \"border-b-2 border-indigo-600 text-indigo-600\",\n    inactiveTab: \"text-gray-300\",\n    dateBadge: \"bg-indigo-700 text-gray-200\",\n    loadingDot: \"bg-indigo-500\"\n  },\n  \"Ocean Breeze\": {\n    bg: \"bg-gradient-to-br from-blue-100 to-teal-200 text-blue-900\",\n    header: \"bg-blue-600 text-white\",\n    nav: \"bg-blue-200 text-blue-700\",\n    activeTab: \"border-b-2 border-indigo-600 text-indigo-600\",\n    inactiveTab: \"text-blue-700\",\n    dateBadge: \"bg-indigo-700 text-white\",\n    loadingDot: \"bg-blue-600\"\n  },\n  \"Sunset Glow\": {\n    bg: \"bg-gradient-to-br from-orange-200 via-pink-200 to-amber-200 text-orange-900 backdrop-blur-sm\",\n    header: \"bg-gradient-to-r from-orange-600 to-pink-600 text-white shadow-lg\",\n    nav: \"bg-orange-100 text-orange-700 shadow-sm\",\n    activeTab: \"border-b-2 border-indigo-600 text-indigo-600\",\n    inactiveTab: \"text-orange-700\",\n    dateBadge: \"bg-indigo-700 text-white\",\n    loadingDot: \"bg-orange-600\"\n  },\n  \"Forest Whisper\": {\n    bg: \"bg-gradient-to-br from-green-200 via-teal-200 to-emerald-200 text-green-900 backdrop-blur-sm\",\n    header: \"bg-gradient-to-r from-green-600 to-teal-600 text-white shadow-lg\",\n    nav: \"bg-green-100 text-green-700 shadow-sm\",\n    activeTab: \"border-b-2 border-indigo-600 text-indigo-600\",\n    inactiveTab: \"text-green-700\",\n    dateBadge: \"bg-indigo-700 text-white\",\n    loadingDot: \"bg-green-600\"\n  }\n};\n\n// Map themes to their FontAwesome icons\nconst themeIcons = {\n  \"Light Mode\": faSun,\n  \"Dark Mode\": faMoon,\n  \"Ocean Breeze\": faWater,\n  \"Sunset Glow\": faFire,\n  \"Forest Whisper\": faLeaf\n};\n\n// Utility function to calculate streak\nconst calculateStreak = (lastActiveDate, lastStreakUpdate, today) => {\n  const todayDate = parse(today, \"yyyy-MM-dd\", new Date());\n  let streak = 0;\n  let newLastActiveDate = today;\n  let newLastStreakUpdate = lastStreakUpdate;\n  if (!lastActiveDate) {\n    // First activity\n    streak = 1;\n    newLastStreakUpdate = today;\n  } else {\n    const lastActive = parse(lastActiveDate, \"yyyy-MM-dd\", new Date());\n    const diffDays = differenceInDays(todayDate, lastActive);\n    if (diffDays === 1) {\n      // Consecutive day\n      streak = (lastStreakUpdate ? parseInt(lastStreakUpdate, 10) : 0) + 1;\n      newLastStreakUpdate = today;\n    } else if (diffDays > 1) {\n      // Missed days, reset streak\n      streak = 1;\n      newLastStreakUpdate = today;\n    } else if (diffDays === 0) {\n      // Same day, no change in streak\n      streak = lastStreakUpdate ? parseInt(lastStreakUpdate, 10) : 0;\n    }\n  }\n  return {\n    streak,\n    lastActiveDate: newLastActiveDate,\n    lastStreakUpdate: newLastStreakUpdate\n  };\n};\n\n// Utility function to prioritize tasks for AI suggestions\nconst prioritizeTasks = (tasks, todayStr) => {\n  const incompleteTasks = tasks.filter(task => !task.completed);\n  if (incompleteTasks.length === 0) {\n    return {\n      recommendedTask: null,\n      suggestion: \"You have no incomplete tasks! Add a new task to keep progressing.\"\n    };\n  }\n  const priorityValue = {\n    High: 3,\n    Medium: 2,\n    Low: 1\n  };\n  const tasksDueToday = [];\n  const pastDueTasks = [];\n  const futureTasks = [];\n  incompleteTasks.forEach(task => {\n    const taskDueDateStr = task.dueDate;\n    const diffDays = differenceInDays(parse(taskDueDateStr, \"yyyy-MM-dd\", new Date()), parse(todayStr, \"yyyy-MM-dd\", new Date()));\n    if (taskDueDateStr === todayStr) {\n      tasksDueToday.push(task);\n    } else if (diffDays < 0) {\n      pastDueTasks.push({\n        ...task,\n        dueDateDiff: Math.abs(diffDays)\n      });\n    } else {\n      futureTasks.push({\n        ...task,\n        dueDateDiff: diffDays\n      });\n    }\n  });\n  tasksDueToday.sort((a, b) => priorityValue[b.priority] - priorityValue[a.priority]);\n  pastDueTasks.sort((a, b) => {\n    if (a.dueDateDiff !== b.dueDateDiff) return a.dueDateDiff - b.dueDateDiff;\n    return priorityValue[b.priority] - priorityValue[a.priority];\n  });\n  futureTasks.sort((a, b) => {\n    if (a.dueDateDiff !== b.dueDateDiff) return a.dueDateDiff - b.dueDateDiff;\n    return priorityValue[b.priority] - priorityValue[a.priority];\n  });\n  const recommendedTask = tasksDueToday[0] || pastDueTasks[0] || futureTasks[0] || null;\n  const suggestion = recommendedTask ? `Based on your schedule and learning patterns, I recommend focusing on your \"${recommendedTask.title}\" today.` : \"You have no incomplete tasks! Add a new task to keep progressing.\";\n  return {\n    recommendedTask,\n    suggestion\n  };\n};\nfunction Layout() {\n  _s();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [tasks, setTasks] = useState([]);\n  const [studyStats, setStudyStats] = useState({\n    totalHours: 0,\n    completedTasks: 0,\n    streak: 0,\n    lastActiveDate: null,\n    lastStreakUpdate: null,\n    studyHoursLog: []\n  });\n  const [aiSuggestion, setAiSuggestion] = useState(\"\");\n  const [points, setPoints] = useState(0);\n  const [badges, setBadges] = useState([]);\n  const [currentTheme, setCurrentTheme] = useState(\"Light Mode\");\n  const [unlockedThemes, setUnlockedThemes] = useState([\"Light Mode\"]);\n  const [loading, setLoading] = useState(true);\n  const userId = \"user123\";\n\n  // Memoized task prioritization for AI suggestion\n  const aiRecommendation = useMemo(() => {\n    const todayStr = format(new Date(), \"yyyy-MM-dd\");\n    return prioritizeTasks(tasks, todayStr);\n  }, [tasks]);\n\n  // Function to find the next unlocked theme\n  const getNextTheme = () => {\n    if (unlockedThemes.length === 1) return \"Light Mode\";\n    const currentIndex = unlockedThemes.indexOf(currentTheme);\n    const nextIndex = (currentIndex + 1) % unlockedThemes.length;\n    return unlockedThemes[nextIndex];\n  };\n\n  // Handle theme change\n  const handleThemeChange = () => {\n    const nextTheme = getNextTheme();\n    setCurrentTheme(nextTheme);\n    toast.info(`🎨 Switched to ${nextTheme}!`, {\n      autoClose: 2000\n    });\n  };\n\n  // Callbacks for Rewards.jsx\n  const handlePointsUpdate = newPoints => {\n    setPoints(newPoints);\n  };\n  const handleThemeUnlock = themeName => {\n    if (!unlockedThemes.includes(themeName)) {\n      setUnlockedThemes([...unlockedThemes, themeName]);\n    }\n  };\n\n  // Update streak\n  const updateStreak = today => {\n    setStudyStats(prev => {\n      const {\n        streak,\n        lastActiveDate,\n        lastStreakUpdate\n      } = calculateStreak(prev.lastActiveDate, prev.streak, today);\n      const newStats = {\n        ...prev,\n        streak,\n        lastActiveDate,\n        lastStreakUpdate,\n        studyHoursLog: prev.studyHoursLog || []\n      };\n      console.log(\"Updated studyStats (updateStreak):\", newStats);\n      return newStats;\n    });\n  };\n\n  // Fetch user data on mount\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        var _data$studyStats, _data$studyStats2, _data$studyStats3, _data$studyStats4, _data$studyStats5, _data$studyStats6;\n        const response = await fetch(`http://localhost:5000/api/user/${userId}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Fetched data:\", data);\n        setTasks(data.tasks || []);\n        const fetchedStats = {\n          totalHours: ((_data$studyStats = data.studyStats) === null || _data$studyStats === void 0 ? void 0 : _data$studyStats.totalHours) || 0,\n          completedTasks: ((_data$studyStats2 = data.studyStats) === null || _data$studyStats2 === void 0 ? void 0 : _data$studyStats2.completedTasks) || 0,\n          streak: ((_data$studyStats3 = data.studyStats) === null || _data$studyStats3 === void 0 ? void 0 : _data$studyStats3.streak) || 0,\n          lastActiveDate: ((_data$studyStats4 = data.studyStats) === null || _data$studyStats4 === void 0 ? void 0 : _data$studyStats4.lastActiveDate) || null,\n          lastStreakUpdate: ((_data$studyStats5 = data.studyStats) === null || _data$studyStats5 === void 0 ? void 0 : _data$studyStats5.lastStreakUpdate) || null,\n          studyHoursLog: ((_data$studyStats6 = data.studyStats) === null || _data$studyStats6 === void 0 ? void 0 : _data$studyStats6.studyHoursLog) || []\n        };\n        setStudyStats(fetchedStats);\n        setPoints(data.points || 0);\n        setBadges(data.badges || []);\n        setCurrentTheme(data.currentTheme || \"Light Mode\");\n        setUnlockedThemes(data.unlockedThemes || [\"Light Mode\"]);\n\n        // Update streak\n        const today = format(new Date(), \"yyyy-MM-dd\");\n        if (fetchedStats.lastStreakUpdate !== today) {\n          const {\n            streak,\n            lastActiveDate,\n            lastStreakUpdate\n          } = calculateStreak(fetchedStats.lastActiveDate, fetchedStats.streak, today);\n          const newStats = {\n            ...fetchedStats,\n            streak,\n            lastActiveDate,\n            lastStreakUpdate,\n            studyHoursLog: fetchedStats.studyHoursLog || []\n          };\n          setStudyStats(newStats);\n        }\n\n        // Check if this fetch is likely due to a server restart\n        const lastFetchTimestamp = localStorage.getItem(\"lastFetchTimestamp\");\n        const currentTimestamp = Date.now();\n        localStorage.setItem(\"lastFetchTimestamp\", currentTimestamp.toString());\n        const lastActive = fetchedStats.lastActiveDate ? new Date(fetchedStats.lastActiveDate).getTime() : 0;\n        const timeSinceLastFetch = lastFetchTimestamp ? currentTimestamp - parseInt(lastFetchTimestamp) : Infinity;\n        const timeSinceLastActive = lastActive ? currentTimestamp - lastActive : Infinity;\n        if (!lastFetchTimestamp || timeSinceLastFetch > 60000 && timeSinceLastActive > 60000 || fetchedStats.streak === 0 && fetchedStats.totalHours === 0) {\n          toast.success(\"Progress loaded successfully!\", {\n            autoClose: 2000\n          });\n        }\n\n        // Set initial AI suggestion\n        setTimeout(() => {\n          setAiSuggestion(aiRecommendation.suggestion);\n        }, 1000);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error fetching user data:\", err);\n        toast.error(`Failed to load user data: ${err.message}. Using defaults.`, {\n          autoClose: 3000\n        });\n        setTasks([{\n          id: 1,\n          title: \"Complete Math Assignment\",\n          dueDate: \"2025-04-25\",\n          priority: \"High\",\n          subject: \"Math\",\n          completed: false,\n          completedDate: null\n        }, {\n          id: 2,\n          title: \"Review Chemistry Notes\",\n          dueDate: \"2025-04-23\",\n          priority: \"Medium\",\n          subject: \"Science\",\n          completed: true,\n          completedDate: \"2025-04-23\"\n        }, {\n          id: 3,\n          title: \"Research Paper Outline\",\n          dueDate: \"2025-04-30\",\n          priority: \"High\",\n          subject: \"English\",\n          completed: false,\n          completedDate: null\n        }]);\n        setTimeout(() => {\n          setAiSuggestion(aiRecommendation.suggestion);\n        }, 1000);\n        setLoading(false);\n      }\n    };\n    fetchUserData();\n  }, [aiRecommendation.suggestion]);\n\n  // Update completedTasks in studyStats when tasks change\n  useEffect(() => {\n    const completedCount = tasks.filter(task => task.completed).length;\n    setStudyStats(prevStats => {\n      const newStats = {\n        ...prevStats,\n        completedTasks: completedCount,\n        studyHoursLog: prevStats.studyHoursLog || []\n      };\n      console.log(\"Updated studyStats (completedTasks):\", newStats);\n      return newStats;\n    });\n  }, [tasks]);\n\n  // Save user data to backend (debounced)\n  useEffect(() => {\n    const saveUserData = async () => {\n      try {\n        const serializedStudyStats = {\n          totalHours: studyStats.totalHours,\n          completedTasks: studyStats.completedTasks,\n          streak: studyStats.streak,\n          lastActiveDate: studyStats.lastActiveDate || null,\n          lastStreakUpdate: studyStats.lastStreakUpdate || null,\n          studyHoursLog: studyStats.studyHoursLog || []\n        };\n        const dataToSend = {\n          tasks,\n          studyStats: serializedStudyStats,\n          points,\n          badges,\n          themes: [\"Light Mode\", \"Dark Mode\", \"Ocean Breeze\", \"Sunset Glow\", \"Forest Whisper\"],\n          currentTheme,\n          unlockedThemes\n        };\n        const response = await fetch(`http://localhost:5000/api/user/${userId}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(dataToSend)\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        console.log(\"Data saved successfully\");\n      } catch (err) {\n        console.error(\"Error saving user data:\", err);\n        toast.error(`Failed to save progress: ${err.message}`, {\n          autoClose: 3000\n        });\n      }\n    };\n    const debounceSave = setTimeout(() => {\n      saveUserData();\n    }, 1000);\n    return () => clearTimeout(debounceSave);\n  }, [tasks, studyStats, points, badges, currentTheme, unlockedThemes]);\n\n  // Log study hours\n  const logStudyHours = hours => {\n    const parsedHours = parseFloat(hours);\n    if (isNaN(parsedHours) || parsedHours <= 0) {\n      toast.error(\"Please enter a valid number of hours greater than 0.\", {\n        autoClose: 2000\n      });\n      return;\n    }\n    const roundedHours = Math.round(parsedHours * 100) / 100;\n    const today = format(new Date(), \"yyyy-MM-dd\");\n    setStudyStats(prev => {\n      const studyHoursLog = prev.studyHoursLog || [];\n      const existingLog = studyHoursLog.find(log => log.date === today);\n      let updatedLog;\n      if (existingLog) {\n        updatedLog = studyHoursLog.map(log => log.date === today ? {\n          ...log,\n          hours: Math.round((log.hours + roundedHours) * 100) / 100\n        } : log);\n      } else {\n        updatedLog = [...studyHoursLog, {\n          date: today,\n          hours: roundedHours\n        }];\n      }\n      const newStats = {\n        ...prev,\n        totalHours: Math.round((prev.totalHours + roundedHours) * 100) / 100,\n        studyHoursLog: updatedLog\n      };\n      console.log(\"Updated studyStats (logStudyHours):\", newStats);\n      return newStats;\n    });\n    updateStreak(today);\n    toast.success(`Logged ${roundedHours} study hours!`, {\n      autoClose: 2000\n    });\n  };\n\n  // Get study tips\n  const getStudyTips = () => {\n    setAiSuggestion(\"Loading new suggestions...\");\n    setTimeout(() => {\n      const tips = [\"Try using the Pomodoro technique: 25 minutes of focused study followed by a 5-minute break.\", \"For difficult subjects, try teaching the material to an imaginary student.\", \"Create visual mind maps to connect key concepts in your subjects.\", \"Review your notes within 24 hours of taking them to improve retention.\", \"Study in short, frequent sessions rather than long cramming sessions.\"];\n      const randomTip = tips[Math.floor(Math.random() * tips.length)];\n      setAiSuggestion(randomTip);\n    }, 1500);\n  };\n\n  // Generate study schedule\n  const generateSchedule = () => {\n    setAiSuggestion(\"Generating personalized study schedule...\");\n    setTimeout(() => {\n      const today = new Date();\n      const todayStr = format(today, \"yyyy-MM-dd\");\n      const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      const todayDay = days[today.getDay()];\n      const incompleteTasks = tasks.filter(task => !task.completed);\n      if (incompleteTasks.length === 0) {\n        setAiSuggestion(\"You have no incomplete tasks to schedule. Add a new task to get started!\");\n        return;\n      }\n      const tasksDueToday = [];\n      const pastDueTasks = [];\n      const futureTasksDueTomorrow = [];\n      const otherFutureTasks = [];\n      incompleteTasks.forEach(task => {\n        const taskDueDateStr = task.dueDate;\n        const diffDays = differenceInDays(parse(taskDueDateStr, \"yyyy-MM-dd\", new Date()), parse(todayStr, \"yyyy-MM-dd\", new Date()));\n        if (taskDueDateStr === todayStr) {\n          tasksDueToday.push(task);\n        } else if (diffDays < 0) {\n          pastDueTasks.push({\n            ...task,\n            dueDateDiff: Math.abs(diffDays)\n          });\n        } else if (diffDays === 1) {\n          futureTasksDueTomorrow.push({\n            ...task,\n            dueDateDiff: diffDays\n          });\n        } else {\n          otherFutureTasks.push({\n            ...task,\n            dueDateDiff: diffDays\n          });\n        }\n      });\n      const priorityValue = {\n        High: 3,\n        Medium: 2,\n        Low: 1\n      };\n      tasksDueToday.sort((a, b) => priorityValue[b.priority] - priorityValue[a.priority]);\n      pastDueTasks.sort((a, b) => {\n        if (a.dueDateDiff !== b.dueDateDiff) return a.dueDateDiff - b.dueDateDiff;\n        return priorityValue[b.priority] - priorityValue[a.priority];\n      });\n      futureTasksDueTomorrow.sort((a, b) => priorityValue[b.priority] - priorityValue[a.priority]);\n      otherFutureTasks.sort((a, b) => {\n        if (a.dueDateDiff !== b.dueDateDiff) return a.dueDateDiff - b.dueDateDiff;\n        return priorityValue[b.priority] - priorityValue[a.priority];\n      });\n      const schedule = {\n        today: [],\n        futureDays: []\n      };\n      const getHours = priority => {\n        return priority === \"High\" ? 2 : priority === \"Medium\" ? 1.5 : 1;\n      };\n      tasksDueToday.forEach(task => {\n        const hours = getHours(task.priority);\n        schedule.today.push(`${task.title} (${hours} hours)`);\n      });\n      pastDueTasks.forEach(task => {\n        const hours = getHours(task.priority);\n        schedule.today.push(`${task.title} (${hours} hours)`);\n      });\n      futureTasksDueTomorrow.forEach(task => {\n        const hours = getHours(task.priority);\n        schedule.today.push(`${task.title} (${hours} hours)`);\n      });\n      otherFutureTasks.forEach(task => {\n        const taskDueDate = parse(task.dueDate, \"yyyy-MM-dd\", new Date());\n        const diffDays = task.dueDateDiff;\n        const hours = getHours(task.priority);\n        const scheduleDate = new Date(taskDueDate);\n        scheduleDate.setDate(taskDueDate.getDate() - 1);\n        const scheduleDateStr = format(scheduleDate, \"yyyy-MM-dd\");\n        const scheduleDay = days[scheduleDate.getDay()];\n        let dayEntry = schedule.futureDays.find(entry => entry.dayName === scheduleDay && entry.date === scheduleDateStr);\n        if (!dayEntry) {\n          dayEntry = {\n            dayName: scheduleDay,\n            date: scheduleDateStr,\n            tasks: []\n          };\n          schedule.futureDays.push(dayEntry);\n        }\n        dayEntry.tasks.push(`${task.title} (${hours} hours)`);\n      });\n      schedule.futureDays.sort((a, b) => new Date(a.date) - new Date(b.date));\n      const scheduleMessage = [\"Based on your upcoming tasks and past performance, here's a suggested schedule:\\n\"];\n      if (schedule.today.length > 0) {\n        scheduleMessage.push(`- ${todayDay} (Today):`);\n        schedule.today.forEach(taskEntry => {\n          scheduleMessage.push(`  - ${taskEntry}`);\n        });\n      }\n      schedule.futureDays.forEach(day => {\n        scheduleMessage.push(`- ${day.dayName} (${day.date}):`);\n        day.tasks.forEach(taskEntry => {\n          scheduleMessage.push(`  - ${taskEntry}`);\n        });\n      });\n      if (schedule.today.length === 0 && schedule.futureDays.length === 0) {\n        scheduleMessage.push(\"No tasks to schedule for the immediate future.\");\n      }\n      setAiSuggestion(scheduleMessage.join(\"\\n\"));\n    }, 2000);\n  };\n\n  // Add, delete, and update tasks\n  const addTask = newTask => {\n    const task = {\n      id: Date.now(),\n      ...newTask,\n      completedDate: null\n    };\n    setTasks([...tasks, task]);\n  };\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n  const toggleTaskComplete = id => {\n    const task = tasks.find(task => task.id === id);\n    if (!task) return;\n    const today = format(new Date(), \"yyyy-MM-dd\");\n    let newPoints = points;\n    let newBadges = [...badges];\n    let notifications = [];\n    const updatedTasks = tasks.map(t => t.id === id ? {\n      ...t,\n      completed: !t.completed,\n      completedDate: !t.completed ? today : null\n    } : t);\n    setTasks(updatedTasks);\n    if (!task.completed) {\n      let pointsToAdd = task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\n      newPoints = points + pointsToAdd;\n      notifications.push(`🎉 +${pointsToAdd} Points! Keep it up!`);\n      const highPriorityTasks = updatedTasks.filter(t => t.priority === \"High\" && t.completed).length;\n      if (highPriorityTasks >= 5 && !badges.includes(\"Priority Master\")) {\n        newBadges.push(\"Priority Master\");\n        notifications.push(\"🏆 Badge Earned: Priority Master!\");\n      }\n      const totalCompletedTasks = updatedTasks.filter(t => t.completed).length;\n      if (totalCompletedTasks >= 10 && !badges.includes(\"Task Titan\")) {\n        newBadges.push(\"Task Titan\");\n        notifications.push(\"🏆 Badge Earned: Task Titan!\");\n      }\n      const dueDate = parse(task.dueDate, \"yyyy-MM-dd\", new Date());\n      const todayDate = new Date();\n      if (dueDate > todayDate) {\n        const earlyTasks = updatedTasks.filter(t => parse(t.dueDate, \"yyyy-MM-dd\", new Date()) > todayDate && t.completed).length;\n        if (earlyTasks >= 3 && !badges.includes(\"Early Bird\")) {\n          newBadges.push(\"Early Bird\");\n          notifications.push(\"🏆 Badge Earned: Early Bird!\");\n        }\n      }\n      updateStreak(today);\n    } else {\n      let pointsToDeduct = task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\n      newPoints = Math.max(0, points - pointsToDeduct);\n      notifications.push(`↩️ -${pointsToDeduct} Points. Task unmarked as completed.`);\n    }\n    setPoints(newPoints);\n    setBadges(newBadges);\n    notifications.forEach(msg => toast.success(msg, {\n      autoClose: 2000\n    }));\n  };\n  const updateTask = updatedTask => {\n    setTasks(tasks.map(task => task.id === updatedTask.id ? updatedTask : task));\n  };\n\n  // Check for streak badge\n  useEffect(() => {\n    if (studyStats.streak >= 7 && !badges.includes(\"Streak Star\")) {\n      const newBadges = [...badges, \"Streak Star\"];\n      const newPoints = points + 50;\n      setBadges(newBadges);\n      setPoints(newPoints);\n      toast.success(\"🏆 Badge Earned: Streak Star!\", {\n        autoClose: 2000\n      });\n      toast.success(\"🎉 +50 Points for 7-Day Streak!\", {\n        autoClose: 2000\n      });\n    }\n  }, [studyStats.streak, badges, points]);\n  const nextTheme = getNextTheme();\n  const currentThemeStyles = themeStyles[currentTheme] || themeStyles[\"Light Mode\"];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `min-h-screen ${currentThemeStyles.bg}`,\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 739,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: `p-4 ${currentThemeStyles.header}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-2xl font-bold flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(BookOpen, {\n              className: \"mr-2\",\n              \"aria-hidden\": \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 744,\n              columnNumber: 15\n            }, this), \"StudyBuddy AI Planner\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 743,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleThemeChange,\n            className: \"ml-4 text-xl\",\n            \"aria-label\": `Switch to ${nextTheme} theme`,\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: themeIcons[nextTheme]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 752,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `px-4 py-2 rounded-lg text-sm ${currentThemeStyles.dateBadge}`,\n          children: format(new Date(), \"EEEE, MMMM d, yyyy\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 740,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n      className: `shadow ${currentThemeStyles.nav}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveTab(\"dashboard\"),\n            className: `px-4 py-3 font-medium text-sm ${activeTab === \"dashboard\" ? currentThemeStyles.activeTab : currentThemeStyles.inactiveTab}`,\n            \"aria-label\": \"View Dashboard\",\n            children: \"Dashboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 766,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveTab(\"tasks\"),\n            className: `px-4 py-3 font-medium text-sm ${activeTab === \"tasks\" ? currentThemeStyles.activeTab : currentThemeStyles.inactiveTab}`,\n            \"aria-label\": \"Manage Tasks\",\n            children: \"Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 777,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveTab(\"analytics\"),\n            className: `px-4 py-3 font-medium text-sm ${activeTab === \"analytics\" ? currentThemeStyles.activeTab : currentThemeStyles.inactiveTab}`,\n            \"aria-label\": \"View Analytics\",\n            children: \"Analytics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 788,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveTab(\"rewards\"),\n            className: `px-4 py-3 font-medium text-sm ${activeTab === \"rewards\" ? currentThemeStyles.activeTab : currentThemeStyles.inactiveTab}`,\n            \"aria-label\": \"View Rewards\",\n            children: \"Rewards\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 799,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 764,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container mx-auto p-4\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center py-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-pulse flex justify-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-4 h-4 rounded-full ${currentThemeStyles.loadingDot}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 818,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-4 h-4 rounded-full ${currentThemeStyles.loadingDot}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 821,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-4 h-4 rounded-full ${currentThemeStyles.loadingDot}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 824,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 817,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-2\",\n          children: \"Loading your study data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-500\",\n          children: \"Please wait while we fetch your tasks and progress.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 829,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 816,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [activeTab === \"dashboard\" && /*#__PURE__*/_jsxDEV(Dashboard, {\n          tasks: tasks,\n          studyStats: studyStats,\n          aiSuggestion: aiSuggestion,\n          getStudyTips: getStudyTips,\n          generateSchedule: generateSchedule,\n          setActiveTab: setActiveTab,\n          toggleTaskComplete: toggleTaskComplete,\n          deleteTask: deleteTask,\n          currentTheme: currentTheme,\n          logStudyHours: logStudyHours\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 15\n        }, this), activeTab === \"tasks\" && /*#__PURE__*/_jsxDEV(TaskManager, {\n          tasks: tasks,\n          addTask: addTask,\n          updateTask: updateTask,\n          deleteTask: deleteTask,\n          toggleTaskComplete: toggleTaskComplete,\n          currentTheme: currentTheme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 15\n        }, this), activeTab === \"analytics\" && /*#__PURE__*/_jsxDEV(Analytics, {\n          tasks: tasks,\n          currentTheme: currentTheme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 15\n        }, this), activeTab === \"rewards\" && /*#__PURE__*/_jsxDEV(Rewards, {\n          points: points,\n          badges: badges,\n          studyStats: studyStats,\n          currentTheme: currentTheme,\n          onPointsUpdate: handlePointsUpdate,\n          onThemeUnlock: handleThemeUnlock\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 814,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 738,\n    columnNumber: 5\n  }, this);\n}\n_s(Layout, \"q8jLq2atJ5igtxQSh7oL1S/LtR0=\");\n_c = Layout;\nexport default Layout;\nvar _c;\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","BookOpen","FontAwesomeIcon","faSun","faMoon","faWater","faFire","faLeaf","parse","differenceInDays","format","Dashboard","TaskManager","Analytics","Rewards","ToastContainer","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","themeStyles","bg","header","nav","activeTab","inactiveTab","dateBadge","loadingDot","themeIcons","calculateStreak","lastActiveDate","lastStreakUpdate","today","todayDate","Date","streak","newLastActiveDate","newLastStreakUpdate","lastActive","diffDays","parseInt","prioritizeTasks","tasks","todayStr","incompleteTasks","filter","task","completed","length","recommendedTask","suggestion","priorityValue","High","Medium","Low","tasksDueToday","pastDueTasks","futureTasks","forEach","taskDueDateStr","dueDate","push","dueDateDiff","Math","abs","sort","a","b","priority","title","Layout","_s","setActiveTab","setTasks","studyStats","setStudyStats","totalHours","completedTasks","studyHoursLog","aiSuggestion","setAiSuggestion","points","setPoints","badges","setBadges","currentTheme","setCurrentTheme","unlockedThemes","setUnlockedThemes","loading","setLoading","userId","aiRecommendation","getNextTheme","currentIndex","indexOf","nextIndex","handleThemeChange","nextTheme","info","autoClose","handlePointsUpdate","newPoints","handleThemeUnlock","themeName","includes","updateStreak","prev","newStats","console","log","fetchUserData","_data$studyStats","_data$studyStats2","_data$studyStats3","_data$studyStats4","_data$studyStats5","_data$studyStats6","response","fetch","ok","Error","status","data","json","fetchedStats","lastFetchTimestamp","localStorage","getItem","currentTimestamp","now","setItem","toString","getTime","timeSinceLastFetch","Infinity","timeSinceLastActive","success","setTimeout","err","error","message","id","subject","completedDate","completedCount","prevStats","saveUserData","serializedStudyStats","dataToSend","themes","method","headers","body","JSON","stringify","debounceSave","clearTimeout","logStudyHours","hours","parsedHours","parseFloat","isNaN","roundedHours","round","existingLog","find","date","updatedLog","map","getStudyTips","tips","randomTip","floor","random","generateSchedule","days","todayDay","getDay","futureTasksDueTomorrow","otherFutureTasks","schedule","futureDays","getHours","taskDueDate","scheduleDate","setDate","getDate","scheduleDateStr","scheduleDay","dayEntry","entry","dayName","scheduleMessage","taskEntry","day","join","addTask","newTask","deleteTask","toggleTaskComplete","newBadges","notifications","updatedTasks","t","pointsToAdd","highPriorityTasks","totalCompletedTasks","earlyTasks","pointsToDeduct","max","msg","updateTask","updatedTask","currentThemeStyles","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","icon","onPointsUpdate","onThemeUnlock","_c","$RefreshReg$"],"sources":["D:/Final Project/study-buddy-planner/src/components/Layout.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { BookOpen } from \"lucide-react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faSun,\r\n  faMoon,\r\n  faWater,\r\n  faFire,\r\n  faLeaf,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { parse, differenceInDays, format } from \"date-fns\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport TaskManager from \"./TaskManager\";\r\nimport Analytics from \"./Analytics\";\r\nimport Rewards from \"./Rewards\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n// Consolidated theme styles\r\nconst themeStyles = {\r\n  \"Light Mode\": {\r\n    bg: \"bg-slate-50 text-gray-800\",\r\n    header: \"bg-indigo-600 text-white\",\r\n    nav: \"bg-white text-gray-500\",\r\n    activeTab: \"border-b-2 border-indigo-600 text-indigo-600\",\r\n    inactiveTab: \"text-gray-500\",\r\n    dateBadge: \"bg-indigo-700 text-white\",\r\n    loadingDot: \"bg-indigo-600\",\r\n  },\r\n  \"Dark Mode\": {\r\n    bg: \"bg-gray-800 text-gray-200\",\r\n    header: \"bg-indigo-900 text-gray-200\",\r\n    nav: \"bg-gray-700 text-gray-300\",\r\n    activeTab: \"border-b-2 border-indigo-600 text-indigo-600\",\r\n    inactiveTab: \"text-gray-300\",\r\n    dateBadge: \"bg-indigo-700 text-gray-200\",\r\n    loadingDot: \"bg-indigo-500\",\r\n  },\r\n  \"Ocean Breeze\": {\r\n    bg: \"bg-gradient-to-br from-blue-100 to-teal-200 text-blue-900\",\r\n    header: \"bg-blue-600 text-white\",\r\n    nav: \"bg-blue-200 text-blue-700\",\r\n    activeTab: \"border-b-2 border-indigo-600 text-indigo-600\",\r\n    inactiveTab: \"text-blue-700\",\r\n    dateBadge: \"bg-indigo-700 text-white\",\r\n    loadingDot: \"bg-blue-600\",\r\n  },\r\n  \"Sunset Glow\": {\r\n    bg: \"bg-gradient-to-br from-orange-200 via-pink-200 to-amber-200 text-orange-900 backdrop-blur-sm\",\r\n    header: \"bg-gradient-to-r from-orange-600 to-pink-600 text-white shadow-lg\",\r\n    nav: \"bg-orange-100 text-orange-700 shadow-sm\",\r\n    activeTab: \"border-b-2 border-indigo-600 text-indigo-600\",\r\n    inactiveTab: \"text-orange-700\",\r\n    dateBadge: \"bg-indigo-700 text-white\",\r\n    loadingDot: \"bg-orange-600\",\r\n  },\r\n  \"Forest Whisper\": {\r\n    bg: \"bg-gradient-to-br from-green-200 via-teal-200 to-emerald-200 text-green-900 backdrop-blur-sm\",\r\n    header: \"bg-gradient-to-r from-green-600 to-teal-600 text-white shadow-lg\",\r\n    nav: \"bg-green-100 text-green-700 shadow-sm\",\r\n    activeTab: \"border-b-2 border-indigo-600 text-indigo-600\",\r\n    inactiveTab: \"text-green-700\",\r\n    dateBadge: \"bg-indigo-700 text-white\",\r\n    loadingDot: \"bg-green-600\",\r\n  },\r\n};\r\n\r\n// Map themes to their FontAwesome icons\r\nconst themeIcons = {\r\n  \"Light Mode\": faSun,\r\n  \"Dark Mode\": faMoon,\r\n  \"Ocean Breeze\": faWater,\r\n  \"Sunset Glow\": faFire,\r\n  \"Forest Whisper\": faLeaf,\r\n};\r\n\r\n// Utility function to calculate streak\r\nconst calculateStreak = (lastActiveDate, lastStreakUpdate, today) => {\r\n  const todayDate = parse(today, \"yyyy-MM-dd\", new Date());\r\n  let streak = 0;\r\n  let newLastActiveDate = today;\r\n  let newLastStreakUpdate = lastStreakUpdate;\r\n\r\n  if (!lastActiveDate) {\r\n    // First activity\r\n    streak = 1;\r\n    newLastStreakUpdate = today;\r\n  } else {\r\n    const lastActive = parse(lastActiveDate, \"yyyy-MM-dd\", new Date());\r\n    const diffDays = differenceInDays(todayDate, lastActive);\r\n\r\n    if (diffDays === 1) {\r\n      // Consecutive day\r\n      streak = (lastStreakUpdate ? parseInt(lastStreakUpdate, 10) : 0) + 1;\r\n      newLastStreakUpdate = today;\r\n    } else if (diffDays > 1) {\r\n      // Missed days, reset streak\r\n      streak = 1;\r\n      newLastStreakUpdate = today;\r\n    } else if (diffDays === 0) {\r\n      // Same day, no change in streak\r\n      streak = lastStreakUpdate ? parseInt(lastStreakUpdate, 10) : 0;\r\n    }\r\n  }\r\n\r\n  return {\r\n    streak,\r\n    lastActiveDate: newLastActiveDate,\r\n    lastStreakUpdate: newLastStreakUpdate,\r\n  };\r\n};\r\n\r\n// Utility function to prioritize tasks for AI suggestions\r\nconst prioritizeTasks = (tasks, todayStr) => {\r\n  const incompleteTasks = tasks.filter((task) => !task.completed);\r\n  if (incompleteTasks.length === 0) {\r\n    return {\r\n      recommendedTask: null,\r\n      suggestion:\r\n        \"You have no incomplete tasks! Add a new task to keep progressing.\",\r\n    };\r\n  }\r\n\r\n  const priorityValue = { High: 3, Medium: 2, Low: 1 };\r\n  const tasksDueToday = [];\r\n  const pastDueTasks = [];\r\n  const futureTasks = [];\r\n\r\n  incompleteTasks.forEach((task) => {\r\n    const taskDueDateStr = task.dueDate;\r\n    const diffDays = differenceInDays(\r\n      parse(taskDueDateStr, \"yyyy-MM-dd\", new Date()),\r\n      parse(todayStr, \"yyyy-MM-dd\", new Date())\r\n    );\r\n\r\n    if (taskDueDateStr === todayStr) {\r\n      tasksDueToday.push(task);\r\n    } else if (diffDays < 0) {\r\n      pastDueTasks.push({ ...task, dueDateDiff: Math.abs(diffDays) });\r\n    } else {\r\n      futureTasks.push({ ...task, dueDateDiff: diffDays });\r\n    }\r\n  });\r\n\r\n  tasksDueToday.sort(\r\n    (a, b) => priorityValue[b.priority] - priorityValue[a.priority]\r\n  );\r\n  pastDueTasks.sort((a, b) => {\r\n    if (a.dueDateDiff !== b.dueDateDiff) return a.dueDateDiff - b.dueDateDiff;\r\n    return priorityValue[b.priority] - priorityValue[a.priority];\r\n  });\r\n  futureTasks.sort((a, b) => {\r\n    if (a.dueDateDiff !== b.dueDateDiff) return a.dueDateDiff - b.dueDateDiff;\r\n    return priorityValue[b.priority] - priorityValue[a.priority];\r\n  });\r\n\r\n  const recommendedTask =\r\n    tasksDueToday[0] || pastDueTasks[0] || futureTasks[0] || null;\r\n\r\n  const suggestion = recommendedTask\r\n    ? `Based on your schedule and learning patterns, I recommend focusing on your \"${recommendedTask.title}\" today.`\r\n    : \"You have no incomplete tasks! Add a new task to keep progressing.\";\r\n\r\n  return { recommendedTask, suggestion };\r\n};\r\n\r\nfunction Layout() {\r\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\r\n  const [tasks, setTasks] = useState([]);\r\n  const [studyStats, setStudyStats] = useState({\r\n    totalHours: 0,\r\n    completedTasks: 0,\r\n    streak: 0,\r\n    lastActiveDate: null,\r\n    lastStreakUpdate: null,\r\n    studyHoursLog: [],\r\n  });\r\n  const [aiSuggestion, setAiSuggestion] = useState(\"\");\r\n  const [points, setPoints] = useState(0);\r\n  const [badges, setBadges] = useState([]);\r\n  const [currentTheme, setCurrentTheme] = useState(\"Light Mode\");\r\n  const [unlockedThemes, setUnlockedThemes] = useState([\"Light Mode\"]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const userId = \"user123\";\r\n\r\n  // Memoized task prioritization for AI suggestion\r\n  const aiRecommendation = useMemo(() => {\r\n    const todayStr = format(new Date(), \"yyyy-MM-dd\");\r\n    return prioritizeTasks(tasks, todayStr);\r\n  }, [tasks]);\r\n\r\n  // Function to find the next unlocked theme\r\n  const getNextTheme = () => {\r\n    if (unlockedThemes.length === 1) return \"Light Mode\";\r\n    const currentIndex = unlockedThemes.indexOf(currentTheme);\r\n    const nextIndex = (currentIndex + 1) % unlockedThemes.length;\r\n    return unlockedThemes[nextIndex];\r\n  };\r\n\r\n  // Handle theme change\r\n  const handleThemeChange = () => {\r\n    const nextTheme = getNextTheme();\r\n    setCurrentTheme(nextTheme);\r\n    toast.info(`🎨 Switched to ${nextTheme}!`, { autoClose: 2000 });\r\n  };\r\n\r\n  // Callbacks for Rewards.jsx\r\n  const handlePointsUpdate = (newPoints) => {\r\n    setPoints(newPoints);\r\n  };\r\n\r\n  const handleThemeUnlock = (themeName) => {\r\n    if (!unlockedThemes.includes(themeName)) {\r\n      setUnlockedThemes([...unlockedThemes, themeName]);\r\n    }\r\n  };\r\n\r\n  // Update streak\r\n  const updateStreak = (today) => {\r\n    setStudyStats((prev) => {\r\n      const { streak, lastActiveDate, lastStreakUpdate } = calculateStreak(\r\n        prev.lastActiveDate,\r\n        prev.streak,\r\n        today\r\n      );\r\n      const newStats = {\r\n        ...prev,\r\n        streak,\r\n        lastActiveDate,\r\n        lastStreakUpdate,\r\n        studyHoursLog: prev.studyHoursLog || [],\r\n      };\r\n      console.log(\"Updated studyStats (updateStreak):\", newStats);\r\n      return newStats;\r\n    });\r\n  };\r\n\r\n  // Fetch user data on mount\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:5000/api/user/${userId}`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        console.log(\"Fetched data:\", data);\r\n\r\n        setTasks(data.tasks || []);\r\n        const fetchedStats = {\r\n          totalHours: data.studyStats?.totalHours || 0,\r\n          completedTasks: data.studyStats?.completedTasks || 0,\r\n          streak: data.studyStats?.streak || 0,\r\n          lastActiveDate: data.studyStats?.lastActiveDate || null,\r\n          lastStreakUpdate: data.studyStats?.lastStreakUpdate || null,\r\n          studyHoursLog: data.studyStats?.studyHoursLog || [],\r\n        };\r\n        setStudyStats(fetchedStats);\r\n        setPoints(data.points || 0);\r\n        setBadges(data.badges || []);\r\n        setCurrentTheme(data.currentTheme || \"Light Mode\");\r\n        setUnlockedThemes(data.unlockedThemes || [\"Light Mode\"]);\r\n\r\n        // Update streak\r\n        const today = format(new Date(), \"yyyy-MM-dd\");\r\n        if (fetchedStats.lastStreakUpdate !== today) {\r\n          const { streak, lastActiveDate, lastStreakUpdate } = calculateStreak(\r\n            fetchedStats.lastActiveDate,\r\n            fetchedStats.streak,\r\n            today\r\n          );\r\n          const newStats = {\r\n            ...fetchedStats,\r\n            streak,\r\n            lastActiveDate,\r\n            lastStreakUpdate,\r\n            studyHoursLog: fetchedStats.studyHoursLog || [],\r\n          };\r\n          setStudyStats(newStats);\r\n        }\r\n\r\n        // Check if this fetch is likely due to a server restart\r\n        const lastFetchTimestamp = localStorage.getItem(\"lastFetchTimestamp\");\r\n        const currentTimestamp = Date.now();\r\n        localStorage.setItem(\"lastFetchTimestamp\", currentTimestamp.toString());\r\n\r\n        const lastActive = fetchedStats.lastActiveDate\r\n          ? new Date(fetchedStats.lastActiveDate).getTime()\r\n          : 0;\r\n        const timeSinceLastFetch = lastFetchTimestamp\r\n          ? currentTimestamp - parseInt(lastFetchTimestamp)\r\n          : Infinity;\r\n        const timeSinceLastActive = lastActive\r\n          ? currentTimestamp - lastActive\r\n          : Infinity;\r\n\r\n        if (\r\n          !lastFetchTimestamp ||\r\n          (timeSinceLastFetch > 60000 && timeSinceLastActive > 60000) ||\r\n          (fetchedStats.streak === 0 && fetchedStats.totalHours === 0)\r\n        ) {\r\n          toast.success(\"Progress loaded successfully!\", { autoClose: 2000 });\r\n        }\r\n\r\n        // Set initial AI suggestion\r\n        setTimeout(() => {\r\n          setAiSuggestion(aiRecommendation.suggestion);\r\n        }, 1000);\r\n\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(\"Error fetching user data:\", err);\r\n        toast.error(\r\n          `Failed to load user data: ${err.message}. Using defaults.`,\r\n          {\r\n            autoClose: 3000,\r\n          }\r\n        );\r\n        setTasks([\r\n          {\r\n            id: 1,\r\n            title: \"Complete Math Assignment\",\r\n            dueDate: \"2025-04-25\",\r\n            priority: \"High\",\r\n            subject: \"Math\",\r\n            completed: false,\r\n            completedDate: null,\r\n          },\r\n          {\r\n            id: 2,\r\n            title: \"Review Chemistry Notes\",\r\n            dueDate: \"2025-04-23\",\r\n            priority: \"Medium\",\r\n            subject: \"Science\",\r\n            completed: true,\r\n            completedDate: \"2025-04-23\",\r\n          },\r\n          {\r\n            id: 3,\r\n            title: \"Research Paper Outline\",\r\n            dueDate: \"2025-04-30\",\r\n            priority: \"High\",\r\n            subject: \"English\",\r\n            completed: false,\r\n            completedDate: null,\r\n          },\r\n        ]);\r\n\r\n        setTimeout(() => {\r\n          setAiSuggestion(aiRecommendation.suggestion);\r\n        }, 1000);\r\n\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUserData();\r\n  }, [aiRecommendation.suggestion]);\r\n\r\n  // Update completedTasks in studyStats when tasks change\r\n  useEffect(() => {\r\n    const completedCount = tasks.filter((task) => task.completed).length;\r\n    setStudyStats((prevStats) => {\r\n      const newStats = {\r\n        ...prevStats,\r\n        completedTasks: completedCount,\r\n        studyHoursLog: prevStats.studyHoursLog || [],\r\n      };\r\n      console.log(\"Updated studyStats (completedTasks):\", newStats);\r\n      return newStats;\r\n    });\r\n  }, [tasks]);\r\n\r\n  // Save user data to backend (debounced)\r\n  useEffect(() => {\r\n    const saveUserData = async () => {\r\n      try {\r\n        const serializedStudyStats = {\r\n          totalHours: studyStats.totalHours,\r\n          completedTasks: studyStats.completedTasks,\r\n          streak: studyStats.streak,\r\n          lastActiveDate: studyStats.lastActiveDate || null,\r\n          lastStreakUpdate: studyStats.lastStreakUpdate || null,\r\n          studyHoursLog: studyStats.studyHoursLog || [],\r\n        };\r\n\r\n        const dataToSend = {\r\n          tasks,\r\n          studyStats: serializedStudyStats,\r\n          points,\r\n          badges,\r\n          themes: [\r\n            \"Light Mode\",\r\n            \"Dark Mode\",\r\n            \"Ocean Breeze\",\r\n            \"Sunset Glow\",\r\n            \"Forest Whisper\",\r\n          ],\r\n          currentTheme,\r\n          unlockedThemes,\r\n        };\r\n\r\n        const response = await fetch(\r\n          `http://localhost:5000/api/user/${userId}`,\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(dataToSend),\r\n          }\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        console.log(\"Data saved successfully\");\r\n      } catch (err) {\r\n        console.error(\"Error saving user data:\", err);\r\n        toast.error(`Failed to save progress: ${err.message}`, {\r\n          autoClose: 3000,\r\n        });\r\n      }\r\n    };\r\n\r\n    const debounceSave = setTimeout(() => {\r\n      saveUserData();\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(debounceSave);\r\n  }, [tasks, studyStats, points, badges, currentTheme, unlockedThemes]);\r\n\r\n  // Log study hours\r\n  const logStudyHours = (hours) => {\r\n    const parsedHours = parseFloat(hours);\r\n    if (isNaN(parsedHours) || parsedHours <= 0) {\r\n      toast.error(\"Please enter a valid number of hours greater than 0.\", {\r\n        autoClose: 2000,\r\n      });\r\n      return;\r\n    }\r\n    const roundedHours = Math.round(parsedHours * 100) / 100;\r\n    const today = format(new Date(), \"yyyy-MM-dd\");\r\n    setStudyStats((prev) => {\r\n      const studyHoursLog = prev.studyHoursLog || [];\r\n      const existingLog = studyHoursLog.find((log) => log.date === today);\r\n      let updatedLog;\r\n      if (existingLog) {\r\n        updatedLog = studyHoursLog.map((log) =>\r\n          log.date === today\r\n            ? {\r\n                ...log,\r\n                hours: Math.round((log.hours + roundedHours) * 100) / 100,\r\n              }\r\n            : log\r\n        );\r\n      } else {\r\n        updatedLog = [...studyHoursLog, { date: today, hours: roundedHours }];\r\n      }\r\n      const newStats = {\r\n        ...prev,\r\n        totalHours: Math.round((prev.totalHours + roundedHours) * 100) / 100,\r\n        studyHoursLog: updatedLog,\r\n      };\r\n      console.log(\"Updated studyStats (logStudyHours):\", newStats);\r\n      return newStats;\r\n    });\r\n    updateStreak(today);\r\n    toast.success(`Logged ${roundedHours} study hours!`, { autoClose: 2000 });\r\n  };\r\n\r\n  // Get study tips\r\n  const getStudyTips = () => {\r\n    setAiSuggestion(\"Loading new suggestions...\");\r\n    setTimeout(() => {\r\n      const tips = [\r\n        \"Try using the Pomodoro technique: 25 minutes of focused study followed by a 5-minute break.\",\r\n        \"For difficult subjects, try teaching the material to an imaginary student.\",\r\n        \"Create visual mind maps to connect key concepts in your subjects.\",\r\n        \"Review your notes within 24 hours of taking them to improve retention.\",\r\n        \"Study in short, frequent sessions rather than long cramming sessions.\",\r\n      ];\r\n      const randomTip = tips[Math.floor(Math.random() * tips.length)];\r\n      setAiSuggestion(randomTip);\r\n    }, 1500);\r\n  };\r\n\r\n  // Generate study schedule\r\n  const generateSchedule = () => {\r\n    setAiSuggestion(\"Generating personalized study schedule...\");\r\n    setTimeout(() => {\r\n      const today = new Date();\r\n      const todayStr = format(today, \"yyyy-MM-dd\");\r\n      const days = [\r\n        \"Sunday\",\r\n        \"Monday\",\r\n        \"Tuesday\",\r\n        \"Wednesday\",\r\n        \"Thursday\",\r\n        \"Friday\",\r\n        \"Saturday\",\r\n      ];\r\n      const todayDay = days[today.getDay()];\r\n\r\n      const incompleteTasks = tasks.filter((task) => !task.completed);\r\n      if (incompleteTasks.length === 0) {\r\n        setAiSuggestion(\r\n          \"You have no incomplete tasks to schedule. Add a new task to get started!\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      const tasksDueToday = [];\r\n      const pastDueTasks = [];\r\n      const futureTasksDueTomorrow = [];\r\n      const otherFutureTasks = [];\r\n\r\n      incompleteTasks.forEach((task) => {\r\n        const taskDueDateStr = task.dueDate;\r\n        const diffDays = differenceInDays(\r\n          parse(taskDueDateStr, \"yyyy-MM-dd\", new Date()),\r\n          parse(todayStr, \"yyyy-MM-dd\", new Date())\r\n        );\r\n\r\n        if (taskDueDateStr === todayStr) {\r\n          tasksDueToday.push(task);\r\n        } else if (diffDays < 0) {\r\n          pastDueTasks.push({ ...task, dueDateDiff: Math.abs(diffDays) });\r\n        } else if (diffDays === 1) {\r\n          futureTasksDueTomorrow.push({ ...task, dueDateDiff: diffDays });\r\n        } else {\r\n          otherFutureTasks.push({ ...task, dueDateDiff: diffDays });\r\n        }\r\n      });\r\n\r\n      const priorityValue = { High: 3, Medium: 2, Low: 1 };\r\n\r\n      tasksDueToday.sort(\r\n        (a, b) => priorityValue[b.priority] - priorityValue[a.priority]\r\n      );\r\n      pastDueTasks.sort((a, b) => {\r\n        if (a.dueDateDiff !== b.dueDateDiff)\r\n          return a.dueDateDiff - b.dueDateDiff;\r\n        return priorityValue[b.priority] - priorityValue[a.priority];\r\n      });\r\n      futureTasksDueTomorrow.sort(\r\n        (a, b) => priorityValue[b.priority] - priorityValue[a.priority]\r\n      );\r\n      otherFutureTasks.sort((a, b) => {\r\n        if (a.dueDateDiff !== b.dueDateDiff)\r\n          return a.dueDateDiff - b.dueDateDiff;\r\n        return priorityValue[b.priority] - priorityValue[a.priority];\r\n      });\r\n\r\n      const schedule = {\r\n        today: [],\r\n        futureDays: [],\r\n      };\r\n\r\n      const getHours = (priority) => {\r\n        return priority === \"High\" ? 2 : priority === \"Medium\" ? 1.5 : 1;\r\n      };\r\n\r\n      tasksDueToday.forEach((task) => {\r\n        const hours = getHours(task.priority);\r\n        schedule.today.push(`${task.title} (${hours} hours)`);\r\n      });\r\n\r\n      pastDueTasks.forEach((task) => {\r\n        const hours = getHours(task.priority);\r\n        schedule.today.push(`${task.title} (${hours} hours)`);\r\n      });\r\n\r\n      futureTasksDueTomorrow.forEach((task) => {\r\n        const hours = getHours(task.priority);\r\n        schedule.today.push(`${task.title} (${hours} hours)`);\r\n      });\r\n\r\n      otherFutureTasks.forEach((task) => {\r\n        const taskDueDate = parse(task.dueDate, \"yyyy-MM-dd\", new Date());\r\n        const diffDays = task.dueDateDiff;\r\n        const hours = getHours(task.priority);\r\n\r\n        const scheduleDate = new Date(taskDueDate);\r\n        scheduleDate.setDate(taskDueDate.getDate() - 1);\r\n        const scheduleDateStr = format(scheduleDate, \"yyyy-MM-dd\");\r\n        const scheduleDay = days[scheduleDate.getDay()];\r\n\r\n        let dayEntry = schedule.futureDays.find(\r\n          (entry) =>\r\n            entry.dayName === scheduleDay && entry.date === scheduleDateStr\r\n        );\r\n        if (!dayEntry) {\r\n          dayEntry = { dayName: scheduleDay, date: scheduleDateStr, tasks: [] };\r\n          schedule.futureDays.push(dayEntry);\r\n        }\r\n        dayEntry.tasks.push(`${task.title} (${hours} hours)`);\r\n      });\r\n\r\n      schedule.futureDays.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n      const scheduleMessage = [\r\n        \"Based on your upcoming tasks and past performance, here's a suggested schedule:\\n\",\r\n      ];\r\n\r\n      if (schedule.today.length > 0) {\r\n        scheduleMessage.push(`- ${todayDay} (Today):`);\r\n        schedule.today.forEach((taskEntry) => {\r\n          scheduleMessage.push(`  - ${taskEntry}`);\r\n        });\r\n      }\r\n\r\n      schedule.futureDays.forEach((day) => {\r\n        scheduleMessage.push(`- ${day.dayName} (${day.date}):`);\r\n        day.tasks.forEach((taskEntry) => {\r\n          scheduleMessage.push(`  - ${taskEntry}`);\r\n        });\r\n      });\r\n\r\n      if (schedule.today.length === 0 && schedule.futureDays.length === 0) {\r\n        scheduleMessage.push(\"No tasks to schedule for the immediate future.\");\r\n      }\r\n\r\n      setAiSuggestion(scheduleMessage.join(\"\\n\"));\r\n    }, 2000);\r\n  };\r\n\r\n  // Add, delete, and update tasks\r\n  const addTask = (newTask) => {\r\n    const task = { id: Date.now(), ...newTask, completedDate: null };\r\n    setTasks([...tasks, task]);\r\n  };\r\n\r\n  const deleteTask = (id) => {\r\n    setTasks(tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskComplete = (id) => {\r\n    const task = tasks.find((task) => task.id === id);\r\n    if (!task) return;\r\n\r\n    const today = format(new Date(), \"yyyy-MM-dd\");\r\n    let newPoints = points;\r\n    let newBadges = [...badges];\r\n    let notifications = [];\r\n\r\n    const updatedTasks = tasks.map((t) =>\r\n      t.id === id\r\n        ? {\r\n            ...t,\r\n            completed: !t.completed,\r\n            completedDate: !t.completed ? today : null,\r\n          }\r\n        : t\r\n    );\r\n    setTasks(updatedTasks);\r\n\r\n    if (!task.completed) {\r\n      let pointsToAdd =\r\n        task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\r\n      newPoints = points + pointsToAdd;\r\n      notifications.push(`🎉 +${pointsToAdd} Points! Keep it up!`);\r\n\r\n      const highPriorityTasks = updatedTasks.filter(\r\n        (t) => t.priority === \"High\" && t.completed\r\n      ).length;\r\n      if (highPriorityTasks >= 5 && !badges.includes(\"Priority Master\")) {\r\n        newBadges.push(\"Priority Master\");\r\n        notifications.push(\"🏆 Badge Earned: Priority Master!\");\r\n      }\r\n\r\n      const totalCompletedTasks = updatedTasks.filter(\r\n        (t) => t.completed\r\n      ).length;\r\n      if (totalCompletedTasks >= 10 && !badges.includes(\"Task Titan\")) {\r\n        newBadges.push(\"Task Titan\");\r\n        notifications.push(\"🏆 Badge Earned: Task Titan!\");\r\n      }\r\n\r\n      const dueDate = parse(task.dueDate, \"yyyy-MM-dd\", new Date());\r\n      const todayDate = new Date();\r\n      if (dueDate > todayDate) {\r\n        const earlyTasks = updatedTasks.filter(\r\n          (t) =>\r\n            parse(t.dueDate, \"yyyy-MM-dd\", new Date()) > todayDate &&\r\n            t.completed\r\n        ).length;\r\n        if (earlyTasks >= 3 && !badges.includes(\"Early Bird\")) {\r\n          newBadges.push(\"Early Bird\");\r\n          notifications.push(\"🏆 Badge Earned: Early Bird!\");\r\n        }\r\n      }\r\n\r\n      updateStreak(today);\r\n    } else {\r\n      let pointsToDeduct =\r\n        task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\r\n      newPoints = Math.max(0, points - pointsToDeduct);\r\n      notifications.push(\r\n        `↩️ -${pointsToDeduct} Points. Task unmarked as completed.`\r\n      );\r\n    }\r\n\r\n    setPoints(newPoints);\r\n    setBadges(newBadges);\r\n    notifications.forEach((msg) => toast.success(msg, { autoClose: 2000 }));\r\n  };\r\n\r\n  const updateTask = (updatedTask) => {\r\n    setTasks(\r\n      tasks.map((task) => (task.id === updatedTask.id ? updatedTask : task))\r\n    );\r\n  };\r\n\r\n  // Check for streak badge\r\n  useEffect(() => {\r\n    if (studyStats.streak >= 7 && !badges.includes(\"Streak Star\")) {\r\n      const newBadges = [...badges, \"Streak Star\"];\r\n      const newPoints = points + 50;\r\n\r\n      setBadges(newBadges);\r\n      setPoints(newPoints);\r\n\r\n      toast.success(\"🏆 Badge Earned: Streak Star!\", { autoClose: 2000 });\r\n      toast.success(\"🎉 +50 Points for 7-Day Streak!\", { autoClose: 2000 });\r\n    }\r\n  }, [studyStats.streak, badges, points]);\r\n\r\n  const nextTheme = getNextTheme();\r\n  const currentThemeStyles =\r\n    themeStyles[currentTheme] || themeStyles[\"Light Mode\"];\r\n\r\n  return (\r\n    <div className={`min-h-screen ${currentThemeStyles.bg}`}>\r\n      <ToastContainer />\r\n      <header className={`p-4 ${currentThemeStyles.header}`}>\r\n        <div className=\"container mx-auto flex justify-between items-center\">\r\n          <div className=\"flex items-center\">\r\n            <h1 className=\"text-2xl font-bold flex items-center\">\r\n              <BookOpen className=\"mr-2\" aria-hidden=\"true\" />\r\n              StudyBuddy AI Planner\r\n            </h1>\r\n            <button\r\n              onClick={handleThemeChange}\r\n              className=\"ml-4 text-xl\"\r\n              aria-label={`Switch to ${nextTheme} theme`}\r\n            >\r\n              <FontAwesomeIcon icon={themeIcons[nextTheme]} />\r\n            </button>\r\n          </div>\r\n          <div\r\n            className={`px-4 py-2 rounded-lg text-sm ${currentThemeStyles.dateBadge}`}\r\n          >\r\n            {format(new Date(), \"EEEE, MMMM d, yyyy\")}\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <nav className={`shadow ${currentThemeStyles.nav}`}>\r\n        <div className=\"container mx-auto\">\r\n          <div className=\"flex\">\r\n            <button\r\n              onClick={() => setActiveTab(\"dashboard\")}\r\n              className={`px-4 py-3 font-medium text-sm ${\r\n                activeTab === \"dashboard\"\r\n                  ? currentThemeStyles.activeTab\r\n                  : currentThemeStyles.inactiveTab\r\n              }`}\r\n              aria-label=\"View Dashboard\"\r\n            >\r\n              Dashboard\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab(\"tasks\")}\r\n              className={`px-4 py-3 font-medium text-sm ${\r\n                activeTab === \"tasks\"\r\n                  ? currentThemeStyles.activeTab\r\n                  : currentThemeStyles.inactiveTab\r\n              }`}\r\n              aria-label=\"Manage Tasks\"\r\n            >\r\n              Tasks\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab(\"analytics\")}\r\n              className={`px-4 py-3 font-medium text-sm ${\r\n                activeTab === \"analytics\"\r\n                  ? currentThemeStyles.activeTab\r\n                  : currentThemeStyles.inactiveTab\r\n              }`}\r\n              aria-label=\"View Analytics\"\r\n            >\r\n              Analytics\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab(\"rewards\")}\r\n              className={`px-4 py-3 font-medium text-sm ${\r\n                activeTab === \"rewards\"\r\n                  ? currentThemeStyles.activeTab\r\n                  : currentThemeStyles.inactiveTab\r\n              }`}\r\n              aria-label=\"View Rewards\"\r\n            >\r\n              Rewards\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <main className=\"container mx-auto p-4\">\r\n        {loading ? (\r\n          <div className=\"text-center py-8\">\r\n            <div className=\"animate-pulse flex justify-center space-x-2\">\r\n              <div\r\n                className={`w-4 h-4 rounded-full ${currentThemeStyles.loadingDot}`}\r\n              />\r\n              <div\r\n                className={`w-4 h-4 rounded-full ${currentThemeStyles.loadingDot}`}\r\n              />\r\n              <div\r\n                className={`w-4 h-4 rounded-full ${currentThemeStyles.loadingDot}`}\r\n              />\r\n            </div>\r\n            <p className=\"mt-2\">Loading your study data...</p>\r\n            <p className=\"text-sm text-gray-500\">\r\n              Please wait while we fetch your tasks and progress.\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            {activeTab === \"dashboard\" && (\r\n              <Dashboard\r\n                tasks={tasks}\r\n                studyStats={studyStats}\r\n                aiSuggestion={aiSuggestion}\r\n                getStudyTips={getStudyTips}\r\n                generateSchedule={generateSchedule}\r\n                setActiveTab={setActiveTab}\r\n                toggleTaskComplete={toggleTaskComplete}\r\n                deleteTask={deleteTask}\r\n                currentTheme={currentTheme}\r\n                logStudyHours={logStudyHours}\r\n              />\r\n            )}\r\n            {activeTab === \"tasks\" && (\r\n              <TaskManager\r\n                tasks={tasks}\r\n                addTask={addTask}\r\n                updateTask={updateTask}\r\n                deleteTask={deleteTask}\r\n                toggleTaskComplete={toggleTaskComplete}\r\n                currentTheme={currentTheme}\r\n              />\r\n            )}\r\n            {activeTab === \"analytics\" && (\r\n              <Analytics tasks={tasks} currentTheme={currentTheme} />\r\n            )}\r\n            {activeTab === \"rewards\" && (\r\n              <Rewards\r\n                points={points}\r\n                badges={badges}\r\n                studyStats={studyStats}\r\n                currentTheme={currentTheme}\r\n                onPointsUpdate={handlePointsUpdate}\r\n                onThemeUnlock={handleThemeUnlock}\r\n              />\r\n            )}\r\n          </>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}