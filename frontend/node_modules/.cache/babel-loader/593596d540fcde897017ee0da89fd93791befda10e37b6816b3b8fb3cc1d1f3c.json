{"ast":null,"code":"var _jsxFileName = \"D:\\\\study-buddy-planner\\\\frontend\\\\src\\\\components\\\\Layout.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./layout/Header\";\nimport Navigation from \"./layout/Navigation\";\nimport MainContent from \"./layout/MainContent\";\nimport Footer from \"./layout/Footer\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { getStudySuggestion } from \"../services/aiService\";\nimport { getCardStyles } from \"../utils/themeUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Layout() {\n  _s();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [tasks, setTasks] = useState([]);\n  const [studyStats, setStudyStats] = useState({\n    totalHours: 0,\n    completedTasks: 0,\n    streak: 0,\n    lastActiveDate: null,\n    lastStreakUpdate: null,\n    studyHoursLog: []\n  });\n  const [aiSuggestion, setAiSuggestion] = useState(\"\");\n  const [aiSuggestionType, setAiSuggestionType] = useState(\"task\");\n  const [isAiLoading, setIsAiLoading] = useState(false);\n  const [points, setPoints] = useState(0);\n  const [badges, setBadges] = useState([]);\n  const [currentTheme, setCurrentTheme] = useState(\"Light Mode\");\n  const [unlockedThemes, setUnlockedThemes] = useState([\"Light Mode\"]);\n  const [loading, setLoading] = useState(true);\n  const userId = \"user123\";\n  const styles = getCardStyles(currentTheme);\n  const getLocalDateString = date => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\n    const day = String(date.getDate()).padStart(2, \"0\");\n    return `${year}-${month}-${day}`;\n  };\n  const getNextTheme = () => {\n    if (unlockedThemes.length === 1) {\n      return \"Light Mode\";\n    }\n    const currentIndex = unlockedThemes.indexOf(currentTheme);\n    const nextIndex = (currentIndex + 1) % unlockedThemes.length;\n    return unlockedThemes[nextIndex];\n  };\n  const handleThemeChange = () => {\n    const nextTheme = getNextTheme();\n    setCurrentTheme(nextTheme);\n  };\n  const handlePointsUpdate = newPoints => {\n    setPoints(newPoints);\n  };\n  const handleThemeUnlock = themeName => {\n    if (!unlockedThemes.includes(themeName)) {\n      setUnlockedThemes([...unlockedThemes, themeName]);\n    }\n  };\n  const updateStreak = today => {\n    setStudyStats(prev => {\n      const lastActive = prev.lastActiveDate ? new Date(prev.lastActiveDate) : null;\n      const lastStreakUpdate = prev.lastStreakUpdate ? new Date(prev.lastStreakUpdate) : null;\n      const todayDate = new Date(today);\n      let newStreak = prev.streak;\n      let newLastActiveDate = today;\n      let newLastStreakUpdate = prev.lastStreakUpdate;\n      const lastActiveDateString = lastActive ? getLocalDateString(lastActive) : null;\n      const lastStreakUpdateDateString = lastStreakUpdate ? getLocalDateString(lastStreakUpdate) : null;\n      if (!lastActive || lastActiveDateString !== today) {\n        if (lastActive) {\n          const diffTime = todayDate - lastActive;\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          if (diffDays === 1) {\n            newStreak = prev.streak + 1;\n            newLastStreakUpdate = today;\n          } else if (diffDays > 1) {\n            newStreak = 1;\n            newLastStreakUpdate = today;\n          }\n        } else {\n          newStreak = 1;\n          newLastStreakUpdate = today;\n        }\n      }\n      if (lastStreakUpdate && lastStreakUpdateDateString !== today) {\n        const diffTime = todayDate - new Date(lastStreakUpdate);\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        if (diffDays > 1) {\n          newStreak = 1;\n          newLastStreakUpdate = today;\n        }\n      }\n      const newStats = {\n        ...prev,\n        streak: newStreak,\n        lastActiveDate: newLastActiveDate,\n        lastStreakUpdate: newLastStreakUpdate,\n        studyHoursLog: prev.studyHoursLog || []\n      };\n      return newStats;\n    });\n  };\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        var _data$studyStats, _data$studyStats2, _data$studyStats3, _data$studyStats4, _data$studyStats5, _data$studyStats6;\n        const response = await fetch(`http://localhost:5000/api/user/${userId}`);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch user data: ${response.status}`);\n        }\n        const data = await response.json();\n        const fetchedTasks = (data.tasks || []).map(task => {\n          var _task$pointsAwarded, _task$hours;\n          return {\n            ...task,\n            pointsAwarded: (_task$pointsAwarded = task.pointsAwarded) !== null && _task$pointsAwarded !== void 0 ? _task$pointsAwarded : false,\n            hours: (_task$hours = task.hours) !== null && _task$hours !== void 0 ? _task$hours : 0\n          };\n        });\n        setTasks(fetchedTasks);\n        const fetchedStats = {\n          totalHours: ((_data$studyStats = data.studyStats) === null || _data$studyStats === void 0 ? void 0 : _data$studyStats.totalHours) || 0,\n          completedTasks: ((_data$studyStats2 = data.studyStats) === null || _data$studyStats2 === void 0 ? void 0 : _data$studyStats2.completedTasks) || 0,\n          streak: ((_data$studyStats3 = data.studyStats) === null || _data$studyStats3 === void 0 ? void 0 : _data$studyStats3.streak) || 0,\n          lastActiveDate: ((_data$studyStats4 = data.studyStats) === null || _data$studyStats4 === void 0 ? void 0 : _data$studyStats4.lastActiveDate) || null,\n          lastStreakUpdate: ((_data$studyStats5 = data.studyStats) === null || _data$studyStats5 === void 0 ? void 0 : _data$studyStats5.lastStreakUpdate) || null,\n          studyHoursLog: ((_data$studyStats6 = data.studyStats) === null || _data$studyStats6 === void 0 ? void 0 : _data$studyStats6.studyHoursLog) || []\n        };\n        setStudyStats(fetchedStats);\n        setPoints(data.points || 0);\n        setBadges(data.badges || []);\n        setCurrentTheme(data.currentTheme || \"Light Mode\");\n        setUnlockedThemes(data.unlockedThemes || [\"Light Mode\"]);\n        const today = getLocalDateString(new Date());\n        const {\n          lastActiveDate,\n          streak,\n          lastStreakUpdate\n        } = fetchedStats;\n        let newStats = {\n          ...fetchedStats\n        };\n        if (lastStreakUpdate !== today) {\n          if (!lastActiveDate) {\n            newStats = {\n              ...fetchedStats,\n              lastActiveDate: today,\n              lastStreakUpdate: today,\n              studyHoursLog: fetchedStats.studyHoursLog || []\n            };\n          } else {\n            const lastDate = new Date(lastActiveDate);\n            const currentDate = new Date(today);\n            const diffDays = (currentDate - lastDate) / (1000 * 60 * 60 * 24);\n            if (diffDays === 1) {\n              newStats = {\n                ...fetchedStats,\n                streak: fetchedStats.streak + 1,\n                lastActiveDate: today,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n            } else if (diffDays > 1) {\n              newStats = {\n                ...fetchedStats,\n                streak: 0,\n                lastActiveDate: today,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n            } else {\n              newStats = {\n                ...fetchedStats,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n            }\n          }\n          setStudyStats(newStats);\n        }\n        const lastFetchTimestamp = localStorage.getItem(\"lastFetchTimestamp\");\n        const currentTimestamp = Date.now();\n        localStorage.setItem(\"lastFetchTimestamp\", currentTimestamp.toString());\n        setTimeout(async () => {\n          const incompleteTasks = fetchedTasks.filter(task => !task.completed);\n          if (incompleteTasks.length === 0) {\n            setAiSuggestion(\"You have no incomplete tasks! Add a new task to keep progressing.\");\n            setAiSuggestionType(\"task\");\n          } else {\n            setAiSuggestion(\"Looks like you have some tasks to tackle! Add or complete a task to keep progressing.\");\n            setAiSuggestionType(\"task\");\n          }\n        }, 1000);\n        setLoading(false);\n      } catch (err) {\n        toast.error(\"Failed to load user data. Please try again later.\");\n        setAiSuggestion(\"Add a new task to get started!\");\n        setAiSuggestionType(\"task\");\n        setLoading(false);\n      }\n    };\n    fetchUserData();\n  }, []);\n  useEffect(() => {\n    if (isAiLoading) return;\n    if (aiSuggestionType !== \"task\") return;\n    const incompleteTasks = tasks.filter(task => !task.completed);\n    if (incompleteTasks.length === 0) {\n      setAiSuggestion(\"You have no incomplete tasks! Add a new task to keep progressing.\");\n      setAiSuggestionType(\"task\");\n    } else {\n      setAiSuggestion(\"Looks like you have some tasks to tackle! Add or complete a task to keep progressing.\");\n      setAiSuggestionType(\"task\");\n    }\n  }, [tasks, isAiLoading, aiSuggestionType]);\n  useEffect(() => {\n    const completedCount = tasks.filter(task => task.completed).length;\n    setStudyStats(prevStats => ({\n      ...prevStats,\n      completedTasks: completedCount,\n      studyHoursLog: prevStats.studyHoursLog || []\n    }));\n  }, [tasks]);\n  useEffect(() => {\n    const saveUserData = async () => {\n      try {\n        const serializedStudyStats = {\n          totalHours: studyStats.totalHours,\n          completedTasks: studyStats.completedTasks,\n          streak: studyStats.streak,\n          lastActiveDate: studyStats.lastActiveDate || null,\n          lastStreakUpdate: studyStats.lastStreakUpdate || null,\n          studyHoursLog: studyStats.studyHoursLog || []\n        };\n        const dataToSend = {\n          tasks,\n          studyStats: serializedStudyStats,\n          points,\n          badges,\n          themes: [\"Light Mode\", \"Dark Mode\", \"Ocean Breeze\", \"Sunset Glow\", \"Forest Whisper\"],\n          currentTheme,\n          unlockedThemes\n        };\n        const response = await fetch(`http://localhost:5000/api/user/${userId}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(dataToSend)\n        });\n        if (!response.ok) {\n          throw new Error(`Failed to save user data: ${response.status} - ${await response.text()}`);\n        }\n      } catch (err) {\n        toast.error(`Failed to save progress: ${err.message}`);\n      }\n    };\n    const debounceSave = setTimeout(() => {\n      saveUserData();\n    }, 1000);\n    return () => clearTimeout(debounceSave);\n  }, [tasks, studyStats, points, badges, currentTheme, unlockedThemes]);\n  const logStudyHours = hours => {\n    const parsedHours = parseFloat(hours);\n    if (isNaN(parsedHours) || parsedHours <= 0) {\n      toast.error(\"Please enter a valid number of hours greater than 0.\");\n      return;\n    }\n    const roundedHours = Math.round(parsedHours * 100) / 100;\n    const today = getLocalDateString(new Date());\n    setStudyStats(prev => {\n      const studyHoursLog = prev.studyHoursLog || [];\n      const existingLog = studyHoursLog.find(log => log.date === today);\n      let updatedLog;\n      if (existingLog) {\n        updatedLog = studyHoursLog.map(log => log.date === today ? {\n          ...log,\n          hours: Math.round((log.hours + roundedHours) * 100) / 100\n        } : log);\n      } else {\n        updatedLog = [...studyHoursLog, {\n          date: today,\n          hours: roundedHours\n        }];\n      }\n      const newStats = {\n        ...prev,\n        totalHours: Math.round((prev.totalHours + roundedHours) * 100) / 100,\n        studyHoursLog: updatedLog\n      };\n      return newStats;\n    });\n    updateStreak(today);\n  };\n  const deductStudyHours = (hours, completedDate) => {\n    const parsedHours = parseFloat(hours);\n    if (isNaN(parsedHours) || parsedHours <= 0) return;\n    const roundedHours = Math.round(parsedHours * 100) / 100;\n    setStudyStats(prev => {\n      const studyHoursLog = prev.studyHoursLog || [];\n      const logDate = completedDate;\n      const existingLog = studyHoursLog.find(log => log.date === logDate);\n      let updatedLog;\n      if (existingLog) {\n        const newHours = Math.max(0, existingLog.hours - roundedHours);\n        updatedLog = studyHoursLog.map(log => log.date === logDate ? {\n          ...log,\n          hours: Math.round(newHours * 100) / 100\n        } : log).filter(log => log.hours > 0);\n      } else {\n        updatedLog = studyHoursLog;\n      }\n      const newTotalHours = Math.max(0, prev.totalHours - roundedHours);\n      const newStats = {\n        ...prev,\n        totalHours: Math.round(newTotalHours * 100) / 100,\n        studyHoursLog: updatedLog\n      };\n      return newStats;\n    });\n  };\n  const getStudyTips = async () => {\n    setIsAiLoading(true);\n    setAiSuggestion(\"Loading a fresh study tip...\");\n    setAiSuggestionType(\"loading\");\n    try {\n      const timestamp = Date.now();\n      const prompt = {\n        tasks: [],\n        studyStats: {},\n        customPrompt: `You are an AI study assistant for students across all subjects, focusing on improving learning efficiency. Generate a concise study tip (2-3 sentences, max 50 words) that is clear, actionable, and applicable to any subject. Format the tip as follows:\n\nHere's a study tip for students:\n\n- [A concise, actionable study tip that improves learning efficiency]\n\n**Instructions:**\n- **Objective**: State what the tip improves (e.g., memory retention, focus, time management).\n- **Actionable Advice**: Provide a specific action (e.g., \"Study in 25-minute blocks with 5-minute breaks\").\n- **Scientific/Practical Basis**: Include a brief reason (e.g., \"This boosts productivity by matching attention spans\").\n- **Context/Applicability**: Mention when it works best (e.g., \"Ideal for long study sessions\").\n- Ensure variety by focusing on a different aspect of learning each time (e.g., memory, focus, time management).\n- Keep it simple and under 50 words, focusing on the crux without over-explaining.\n- Do NOT start the tip with \"Practice coding daily\" or any repetitive phrase.\n- Do not include additional sections like \"General Study Tip\" or \"Habits\".\n\n**Examples of concise tips:**\n- To improve focus, study in 25-minute blocks with 5-minute breaks, known as the Pomodoro Technique. This matches your brain's attention span, boosting productivity. Ideal for long study sessions.\n- Enhance memory by reviewing notes 1 day, 1 week, and 1 month after learning, using spaced repetition. This strengthens recall, per cognitive science. Best for exam prep over weeks.\n\n(Request ID: ${timestamp})`\n      };\n      const response = await getStudySuggestion(prompt);\n      console.log(\"Study Tip API Response:\", response);\n      let studyTip = \"Failed to fetch a valid study tip.\";\n      if (typeof response === \"string\" && response.trim()) {\n        studyTip = response.trim();\n        studyTip = studyTip.replace(/^\\d+\\.\\s*/, \"\");\n        if (!studyTip.startsWith(\"Here's a study tip for students:\")) {\n          studyTip = `Here's a study tip for students:\\n\\n- ${studyTip}`;\n        }\n      } else if (Array.isArray(response) && response.length > 0) {\n        studyTip = response.find(item => typeof item === \"string\" && item.trim()) || studyTip;\n        studyTip = studyTip.trim();\n        studyTip = studyTip.replace(/^\\d+\\.\\s*/, \"\");\n        if (!studyTip.startsWith(\"Here's a study tip for students:\")) {\n          studyTip = `Here's a study tip for students:\\n\\n- ${studyTip}`;\n        }\n      }\n      setAiSuggestion(studyTip);\n      setAiSuggestionType(\"studyTip\");\n    } catch (error) {\n      console.error(\"Error fetching study tip:\", error);\n      setAiSuggestion(\"Failed to fetch study tip. Please try again later.\");\n      setAiSuggestionType(\"error\");\n    } finally {\n      setIsAiLoading(false);\n    }\n  };\n  const generateSchedule = async () => {\n    setIsAiLoading(true);\n    setAiSuggestion(\"Generating your progress report...\");\n    setAiSuggestionType(\"loading\");\n    try {\n      var _studyStats$studyHour;\n      const today = getLocalDateString(new Date());\n      const todayStudyHours = ((_studyStats$studyHour = studyStats.studyHoursLog.find(log => log.date === today)) === null || _studyStats$studyHour === void 0 ? void 0 : _studyStats$studyHour.hours) || 0;\n      const tasksCompletedToday = tasks.filter(task => task.completed && task.completedDate === today);\n      const totalTasksCompletedToday = tasksCompletedToday.length;\n      const highPriorityCompleted = tasksCompletedToday.filter(task => task.priority === \"High\").length;\n      const mediumPriorityCompleted = tasksCompletedToday.filter(task => task.priority === \"Medium\").length;\n      const lowPriorityCompleted = tasksCompletedToday.filter(task => task.priority === \"Low\").length;\n      const timestamp = Date.now();\n      const prompt = {\n        tasks: [],\n        studyStats: {\n          todayStudyHours,\n          totalTasksCompletedToday\n        },\n        customPrompt: `Generate a list of 10 short motivational messages (each 1-2 sentences, max 30 words) for a student who has studied for ${todayStudyHours} hours today and completed ${totalTasksCompletedToday} tasks. Each message should be unique, encouraging, and focused on their progress in their studies. Format each message on a new line without numbering or bullet points. (Request ID: ${timestamp})`\n      };\n      const response = await getStudySuggestion(prompt);\n      let motivationalMessage;\n      if (typeof response === \"string\") {\n        const messages = response.split(\"\\n\").filter(msg => msg.trim() !== \"\");\n        motivationalMessage = messages.length > 0 ? messages[0].replace(/^\"(.*)\"$/, \"$1\") : \"Keep up the great effort in your studies!\";\n      } else if (Array.isArray(response)) {\n        motivationalMessage = response.length > 0 ? response[0].replace(/^\"(.*)\"$/, \"$1\") : \"Keep up the great effort in your studies!\";\n      } else {\n        motivationalMessage = \"Keep up the great effort in your studies!\";\n      }\n      motivationalMessage = motivationalMessage.replace(/^\"(.*)\"$/, \"$1\");\n      motivationalMessage = motivationalMessage.replace(/^\\d+\\.\\s*/, \"\").trim();\n      const progressMessage = `Here’s your progress for today (${today}):\\n\\n- Total Study Hours Today: ${todayStudyHours} hour${todayStudyHours !== 1 ? \"s\" : \"\"}\\n- Tasks Completed Today: ${totalTasksCompletedToday}\\n- High Priority Tasks Completed Today: ${highPriorityCompleted}\\n- Medium Priority Tasks Completed Today: ${mediumPriorityCompleted}\\n- Low Priority Tasks Completed Today: ${lowPriorityCompleted}\\n\\n${motivationalMessage}`;\n      setAiSuggestion(progressMessage);\n      setAiSuggestionType(\"progressReport\");\n    } catch (error) {\n      console.error(\"Error generating progress report:\", error);\n      setAiSuggestion(\"Failed to generate progress report. Please try again later.\");\n      setAiSuggestionType(\"error\");\n    } finally {\n      setIsAiLoading(false);\n    }\n  };\n  const addTask = newTask => {\n    const task = {\n      id: Date.now(),\n      ...newTask,\n      completedDate: null,\n      pointsAwarded: false,\n      hours: newTask.hours || 0\n    };\n    setTasks([...tasks, task]);\n  };\n  const deleteTask = id => {\n    const taskToDelete = tasks.find(task => task.id === id);\n    if (!taskToDelete) return;\n    if (taskToDelete.completed) {\n      if (taskToDelete.hours > 0 && taskToDelete.completedDate) {\n        deductStudyHours(taskToDelete.hours, taskToDelete.completedDate);\n      }\n      if (taskToDelete.pointsAwarded) {\n        const pointsToDeduct = taskToDelete.priority === \"High\" ? 30 : taskToDelete.priority === \"Medium\" ? 20 : 10;\n        setPoints(prevPoints => prevPoints - pointsToDeduct);\n        toast.info(`↩️ -${pointsToDeduct} Points. Task deleted.`, {\n          toastId: `delete-task-${id}`\n        });\n      }\n    }\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n  const toggleTaskComplete = id => {\n    const task = tasks.find(task => task.id === id);\n    if (!task) return;\n    const today = getLocalDateString(new Date());\n    let newPoints = points;\n    let newBadges = [...badges];\n    let notifications = [];\n    const updatedTasks = tasks.map(t => t.id === id ? {\n      ...t,\n      completed: !t.completed,\n      completedDate: !t.completed ? today : null,\n      pointsAwarded: t.pointsAwarded\n    } : t);\n    const updatedTask = updatedTasks.find(t => t.id === id);\n    const pointsToAddOrDeduct = task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\n    if (!task.completed) {\n      if (!updatedTask.pointsAwarded) {\n        newPoints = points + pointsToAddOrDeduct;\n        notifications.push(`🎉 +${pointsToAddOrDeduct} Points! Keep it up!`);\n        updatedTask.pointsAwarded = true;\n      }\n      if (task.hours > 0) {\n        logStudyHours(task.hours);\n      }\n      const highPriorityTasks = updatedTasks.filter(t => t.priority === \"High\" && t.completed).length;\n      if (highPriorityTasks >= 5 && !badges.includes(\"Priority Master\")) {\n        newBadges.push(\"Priority Master\");\n        notifications.push(\"🏆 Badge Earned: Priority Master!\");\n      }\n      const totalCompletedTasks = updatedTasks.filter(t => t.completed).length;\n      if (totalCompletedTasks >= 10 && !badges.includes(\"Task Titan\")) {\n        newBadges.push(\"Task Titan\");\n        notifications.push(\"🏆 Badge Earned: Task Titan!\");\n      }\n      const dueDate = new Date(task.dueDate);\n      const todayDate = new Date();\n      if (dueDate > todayDate) {\n        const earlyTasks = updatedTasks.filter(t => new Date(t.dueDate) > todayDate && t.completed).length;\n        if (earlyTasks >= 3 && !badges.includes(\"Early Bird\")) {\n          newBadges.push(\"Early Bird\");\n          notifications.push(\"🏆 Badge Earned: Early Bird!\");\n        }\n      }\n      updateStreak(today);\n    } else {\n      if (updatedTask.pointsAwarded) {\n        newPoints = points - pointsToAddOrDeduct;\n        notifications.push(`↩️ -${pointsToAddOrDeduct} Points. Task unmarked as completed.`);\n        updatedTask.pointsAwarded = false;\n      }\n      if (task.hours > 0 && task.completedDate) {\n        deductStudyHours(task.hours, task.completedDate);\n      }\n    }\n    setTasks(updatedTasks);\n    setPoints(newPoints);\n    setBadges(newBadges);\n    notifications.forEach(msg => toast.success(msg));\n  };\n  const updateTask = updatedTask => {\n    setTasks(tasks.map(task => task.id === updatedTask.id ? updatedTask : task));\n  };\n  useEffect(() => {\n    if (studyStats.streak >= 7 && !badges.includes(\"Streak Star\")) {\n      let newBadges = [...badges, \"Streak Star\"];\n      let newPoints = points + 50;\n      setBadges(newBadges);\n      setPoints(newPoints);\n      toast.success(\"🏆 Badge Earned: Streak Star!\");\n      toast.success(\"🎉 +50 Points for 7-Day Streak!\");\n    }\n  }, [studyStats.streak]);\n  const nextTheme = getNextTheme();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `min-h-screen flex flex-col ${styles.layoutTheme}`,\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 656,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      currentTheme: currentTheme,\n      nextTheme: nextTheme,\n      onThemeChange: handleThemeChange,\n      setActiveTab: setActiveTab\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      activeTab: activeTab,\n      setActiveTab: setActiveTab,\n      currentTheme: currentTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n      activeTab: activeTab,\n      loading: loading,\n      tasks: tasks,\n      studyStats: studyStats,\n      aiSuggestion: aiSuggestion,\n      getStudyTips: getStudyTips,\n      generateSchedule: generateSchedule,\n      setActiveTab: setActiveTab,\n      toggleTaskComplete: toggleTaskComplete,\n      currentTheme: currentTheme,\n      logStudyHours: logStudyHours,\n      deductStudyHours: deductStudyHours,\n      addTask: addTask,\n      updateTask: updateTask,\n      deleteTask: deleteTask,\n      points: points,\n      badges: badges,\n      onPointsUpdate: handlePointsUpdate,\n      onThemeUnlock: handleThemeUnlock,\n      unlockedThemes: unlockedThemes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      currentTheme: currentTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 655,\n    columnNumber: 5\n  }, this);\n}\n_s(Layout, \"Nx3p1vQuyNZpbvHQHHrjrGpmdXY=\");\n_c = Layout;\nexport default Layout;\nvar _c;\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"names":["React","useState","useEffect","Header","Navigation","MainContent","Footer","ToastContainer","toast","getStudySuggestion","getCardStyles","jsxDEV","_jsxDEV","Layout","_s","activeTab","setActiveTab","tasks","setTasks","studyStats","setStudyStats","totalHours","completedTasks","streak","lastActiveDate","lastStreakUpdate","studyHoursLog","aiSuggestion","setAiSuggestion","aiSuggestionType","setAiSuggestionType","isAiLoading","setIsAiLoading","points","setPoints","badges","setBadges","currentTheme","setCurrentTheme","unlockedThemes","setUnlockedThemes","loading","setLoading","userId","styles","getLocalDateString","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","getNextTheme","length","currentIndex","indexOf","nextIndex","handleThemeChange","nextTheme","handlePointsUpdate","newPoints","handleThemeUnlock","themeName","includes","updateStreak","today","prev","lastActive","Date","todayDate","newStreak","newLastActiveDate","newLastStreakUpdate","lastActiveDateString","lastStreakUpdateDateString","diffTime","diffDays","Math","ceil","newStats","fetchUserData","_data$studyStats","_data$studyStats2","_data$studyStats3","_data$studyStats4","_data$studyStats5","_data$studyStats6","response","fetch","ok","Error","status","data","json","fetchedTasks","map","task","_task$pointsAwarded","_task$hours","pointsAwarded","hours","fetchedStats","lastDate","currentDate","lastFetchTimestamp","localStorage","getItem","currentTimestamp","now","setItem","toString","setTimeout","incompleteTasks","filter","completed","err","error","completedCount","prevStats","saveUserData","serializedStudyStats","dataToSend","themes","method","headers","body","JSON","stringify","text","message","debounceSave","clearTimeout","logStudyHours","parsedHours","parseFloat","isNaN","roundedHours","round","existingLog","find","log","updatedLog","deductStudyHours","completedDate","logDate","newHours","max","newTotalHours","getStudyTips","timestamp","prompt","customPrompt","console","studyTip","trim","replace","startsWith","Array","isArray","item","generateSchedule","_studyStats$studyHour","todayStudyHours","tasksCompletedToday","totalTasksCompletedToday","highPriorityCompleted","priority","mediumPriorityCompleted","lowPriorityCompleted","motivationalMessage","messages","split","msg","progressMessage","addTask","newTask","id","deleteTask","taskToDelete","pointsToDeduct","prevPoints","info","toastId","toggleTaskComplete","newBadges","notifications","updatedTasks","t","updatedTask","pointsToAddOrDeduct","push","highPriorityTasks","totalCompletedTasks","dueDate","earlyTasks","forEach","success","updateTask","className","layoutTheme","children","fileName","_jsxFileName","lineNumber","columnNumber","onThemeChange","onPointsUpdate","onThemeUnlock","_c","$RefreshReg$"],"sources":["D:/study-buddy-planner/frontend/src/components/Layout.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Header from \"./layout/Header\";\r\nimport Navigation from \"./layout/Navigation\";\r\nimport MainContent from \"./layout/MainContent\";\r\nimport Footer from \"./layout/Footer\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { getStudySuggestion } from \"../services/aiService\";\r\nimport { getCardStyles } from \"../utils/themeUtils\";\r\n\r\nfunction Layout() {\r\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\r\n  const [tasks, setTasks] = useState([]);\r\n  const [studyStats, setStudyStats] = useState({\r\n    totalHours: 0,\r\n    completedTasks: 0,\r\n    streak: 0,\r\n    lastActiveDate: null,\r\n    lastStreakUpdate: null,\r\n    studyHoursLog: [],\r\n  });\r\n  const [aiSuggestion, setAiSuggestion] = useState(\"\");\r\n  const [aiSuggestionType, setAiSuggestionType] = useState(\"task\");\r\n  const [isAiLoading, setIsAiLoading] = useState(false);\r\n  const [points, setPoints] = useState(0);\r\n  const [badges, setBadges] = useState([]);\r\n  const [currentTheme, setCurrentTheme] = useState(\"Light Mode\");\r\n  const [unlockedThemes, setUnlockedThemes] = useState([\"Light Mode\"]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const userId = \"user123\";\r\n  const styles = getCardStyles(currentTheme);\r\n\r\n  const getLocalDateString = (date) => {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  const getNextTheme = () => {\r\n    if (unlockedThemes.length === 1) {\r\n      return \"Light Mode\";\r\n    }\r\n    const currentIndex = unlockedThemes.indexOf(currentTheme);\r\n    const nextIndex = (currentIndex + 1) % unlockedThemes.length;\r\n    return unlockedThemes[nextIndex];\r\n  };\r\n\r\n  const handleThemeChange = () => {\r\n    const nextTheme = getNextTheme();\r\n    setCurrentTheme(nextTheme);\r\n  };\r\n\r\n  const handlePointsUpdate = (newPoints) => {\r\n    setPoints(newPoints);\r\n  };\r\n\r\n  const handleThemeUnlock = (themeName) => {\r\n    if (!unlockedThemes.includes(themeName)) {\r\n      setUnlockedThemes([...unlockedThemes, themeName]);\r\n    }\r\n  };\r\n\r\n  const updateStreak = (today) => {\r\n    setStudyStats((prev) => {\r\n      const lastActive = prev.lastActiveDate\r\n        ? new Date(prev.lastActiveDate)\r\n        : null;\r\n      const lastStreakUpdate = prev.lastStreakUpdate\r\n        ? new Date(prev.lastStreakUpdate)\r\n        : null;\r\n      const todayDate = new Date(today);\r\n\r\n      let newStreak = prev.streak;\r\n      let newLastActiveDate = today;\r\n      let newLastStreakUpdate = prev.lastStreakUpdate;\r\n\r\n      const lastActiveDateString = lastActive\r\n        ? getLocalDateString(lastActive)\r\n        : null;\r\n      const lastStreakUpdateDateString = lastStreakUpdate\r\n        ? getLocalDateString(lastStreakUpdate)\r\n        : null;\r\n\r\n      if (!lastActive || lastActiveDateString !== today) {\r\n        if (lastActive) {\r\n          const diffTime = todayDate - lastActive;\r\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n          if (diffDays === 1) {\r\n            newStreak = prev.streak + 1;\r\n            newLastStreakUpdate = today;\r\n          } else if (diffDays > 1) {\r\n            newStreak = 1;\r\n            newLastStreakUpdate = today;\r\n          }\r\n        } else {\r\n          newStreak = 1;\r\n          newLastStreakUpdate = today;\r\n        }\r\n      }\r\n\r\n      if (lastStreakUpdate && lastStreakUpdateDateString !== today) {\r\n        const diffTime = todayDate - new Date(lastStreakUpdate);\r\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n        if (diffDays > 1) {\r\n          newStreak = 1;\r\n          newLastStreakUpdate = today;\r\n        }\r\n      }\r\n\r\n      const newStats = {\r\n        ...prev,\r\n        streak: newStreak,\r\n        lastActiveDate: newLastActiveDate,\r\n        lastStreakUpdate: newLastStreakUpdate,\r\n        studyHoursLog: prev.studyHoursLog || [],\r\n      };\r\n      return newStats;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:5000/api/user/${userId}`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to fetch user data: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n\r\n        const fetchedTasks = (data.tasks || []).map((task) => ({\r\n          ...task,\r\n          pointsAwarded: task.pointsAwarded ?? false,\r\n          hours: task.hours ?? 0,\r\n        }));\r\n        setTasks(fetchedTasks);\r\n\r\n        const fetchedStats = {\r\n          totalHours: data.studyStats?.totalHours || 0,\r\n          completedTasks: data.studyStats?.completedTasks || 0,\r\n          streak: data.studyStats?.streak || 0,\r\n          lastActiveDate: data.studyStats?.lastActiveDate || null,\r\n          lastStreakUpdate: data.studyStats?.lastStreakUpdate || null,\r\n          studyHoursLog: data.studyStats?.studyHoursLog || [],\r\n        };\r\n        setStudyStats(fetchedStats);\r\n        setPoints(data.points || 0);\r\n        setBadges(data.badges || []);\r\n        setCurrentTheme(data.currentTheme || \"Light Mode\");\r\n        setUnlockedThemes(data.unlockedThemes || [\"Light Mode\"]);\r\n\r\n        const today = getLocalDateString(new Date());\r\n        const { lastActiveDate, streak, lastStreakUpdate } = fetchedStats;\r\n\r\n        let newStats = { ...fetchedStats };\r\n        if (lastStreakUpdate !== today) {\r\n          if (!lastActiveDate) {\r\n            newStats = {\r\n              ...fetchedStats,\r\n              lastActiveDate: today,\r\n              lastStreakUpdate: today,\r\n              studyHoursLog: fetchedStats.studyHoursLog || [],\r\n            };\r\n          } else {\r\n            const lastDate = new Date(lastActiveDate);\r\n            const currentDate = new Date(today);\r\n            const diffDays = (currentDate - lastDate) / (1000 * 60 * 60 * 24);\r\n\r\n            if (diffDays === 1) {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                streak: fetchedStats.streak + 1,\r\n                lastActiveDate: today,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n            } else if (diffDays > 1) {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                streak: 0,\r\n                lastActiveDate: today,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n            } else {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n            }\r\n          }\r\n          setStudyStats(newStats);\r\n        }\r\n\r\n        const lastFetchTimestamp = localStorage.getItem(\"lastFetchTimestamp\");\r\n        const currentTimestamp = Date.now();\r\n        localStorage.setItem(\"lastFetchTimestamp\", currentTimestamp.toString());\r\n\r\n        setTimeout(async () => {\r\n          const incompleteTasks = fetchedTasks.filter(\r\n            (task) => !task.completed\r\n          );\r\n          if (incompleteTasks.length === 0) {\r\n            setAiSuggestion(\r\n              \"You have no incomplete tasks! Add a new task to keep progressing.\"\r\n            );\r\n            setAiSuggestionType(\"task\");\r\n          } else {\r\n            setAiSuggestion(\r\n              \"Looks like you have some tasks to tackle! Add or complete a task to keep progressing.\"\r\n            );\r\n            setAiSuggestionType(\"task\");\r\n          }\r\n        }, 1000);\r\n\r\n        setLoading(false);\r\n      } catch (err) {\r\n        toast.error(\"Failed to load user data. Please try again later.\");\r\n        setAiSuggestion(\"Add a new task to get started!\");\r\n        setAiSuggestionType(\"task\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isAiLoading) return;\r\n    if (aiSuggestionType !== \"task\") return;\r\n\r\n    const incompleteTasks = tasks.filter((task) => !task.completed);\r\n    if (incompleteTasks.length === 0) {\r\n      setAiSuggestion(\r\n        \"You have no incomplete tasks! Add a new task to keep progressing.\"\r\n      );\r\n      setAiSuggestionType(\"task\");\r\n    } else {\r\n      setAiSuggestion(\r\n        \"Looks like you have some tasks to tackle! Add or complete a task to keep progressing.\"\r\n      );\r\n      setAiSuggestionType(\"task\");\r\n    }\r\n  }, [tasks, isAiLoading, aiSuggestionType]);\r\n\r\n  useEffect(() => {\r\n    const completedCount = tasks.filter((task) => task.completed).length;\r\n    setStudyStats((prevStats) => ({\r\n      ...prevStats,\r\n      completedTasks: completedCount,\r\n      studyHoursLog: prevStats.studyHoursLog || [],\r\n    }));\r\n  }, [tasks]);\r\n\r\n  useEffect(() => {\r\n    const saveUserData = async () => {\r\n      try {\r\n        const serializedStudyStats = {\r\n          totalHours: studyStats.totalHours,\r\n          completedTasks: studyStats.completedTasks,\r\n          streak: studyStats.streak,\r\n          lastActiveDate: studyStats.lastActiveDate || null,\r\n          lastStreakUpdate: studyStats.lastStreakUpdate || null,\r\n          studyHoursLog: studyStats.studyHoursLog || [],\r\n        };\r\n\r\n        const dataToSend = {\r\n          tasks,\r\n          studyStats: serializedStudyStats,\r\n          points,\r\n          badges,\r\n          themes: [\r\n            \"Light Mode\",\r\n            \"Dark Mode\",\r\n            \"Ocean Breeze\",\r\n            \"Sunset Glow\",\r\n            \"Forest Whisper\",\r\n          ],\r\n          currentTheme,\r\n          unlockedThemes,\r\n        };\r\n\r\n        const response = await fetch(\r\n          `http://localhost:5000/api/user/${userId}`,\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(dataToSend),\r\n          }\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\r\n            `Failed to save user data: ${response.status} - ${await response.text()}`\r\n          );\r\n        }\r\n      } catch (err) {\r\n        toast.error(`Failed to save progress: ${err.message}`);\r\n      }\r\n    };\r\n\r\n    const debounceSave = setTimeout(() => {\r\n      saveUserData();\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(debounceSave);\r\n  }, [tasks, studyStats, points, badges, currentTheme, unlockedThemes]);\r\n\r\n  const logStudyHours = (hours) => {\r\n    const parsedHours = parseFloat(hours);\r\n    if (isNaN(parsedHours) || parsedHours <= 0) {\r\n      toast.error(\"Please enter a valid number of hours greater than 0.\");\r\n      return;\r\n    }\r\n    const roundedHours = Math.round(parsedHours * 100) / 100;\r\n    const today = getLocalDateString(new Date());\r\n    setStudyStats((prev) => {\r\n      const studyHoursLog = prev.studyHoursLog || [];\r\n      const existingLog = studyHoursLog.find((log) => log.date === today);\r\n      let updatedLog;\r\n      if (existingLog) {\r\n        updatedLog = studyHoursLog.map((log) =>\r\n          log.date === today\r\n            ? {\r\n                ...log,\r\n                hours: Math.round((log.hours + roundedHours) * 100) / 100,\r\n              }\r\n            : log\r\n        );\r\n      } else {\r\n        updatedLog = [...studyHoursLog, { date: today, hours: roundedHours }];\r\n      }\r\n      const newStats = {\r\n        ...prev,\r\n        totalHours: Math.round((prev.totalHours + roundedHours) * 100) / 100,\r\n        studyHoursLog: updatedLog,\r\n      };\r\n      return newStats;\r\n    });\r\n    updateStreak(today);\r\n  };\r\n\r\n  const deductStudyHours = (hours, completedDate) => {\r\n    const parsedHours = parseFloat(hours);\r\n    if (isNaN(parsedHours) || parsedHours <= 0) return;\r\n    const roundedHours = Math.round(parsedHours * 100) / 100;\r\n    setStudyStats((prev) => {\r\n      const studyHoursLog = prev.studyHoursLog || [];\r\n      const logDate = completedDate;\r\n      const existingLog = studyHoursLog.find((log) => log.date === logDate);\r\n      let updatedLog;\r\n      if (existingLog) {\r\n        const newHours = Math.max(0, existingLog.hours - roundedHours);\r\n        updatedLog = studyHoursLog\r\n          .map((log) =>\r\n            log.date === logDate\r\n              ? { ...log, hours: Math.round(newHours * 100) / 100 }\r\n              : log\r\n          )\r\n          .filter((log) => log.hours > 0);\r\n      } else {\r\n        updatedLog = studyHoursLog;\r\n      }\r\n      const newTotalHours = Math.max(0, prev.totalHours - roundedHours);\r\n      const newStats = {\r\n        ...prev,\r\n        totalHours: Math.round(newTotalHours * 100) / 100,\r\n        studyHoursLog: updatedLog,\r\n      };\r\n      return newStats;\r\n    });\r\n  };\r\n\r\n  const getStudyTips = async () => {\r\n    setIsAiLoading(true);\r\n    setAiSuggestion(\"Loading a fresh study tip...\");\r\n    setAiSuggestionType(\"loading\");\r\n    try {\r\n      const timestamp = Date.now();\r\n      const prompt = {\r\n        tasks: [],\r\n        studyStats: {},\r\n        customPrompt: `You are an AI study assistant for students across all subjects, focusing on improving learning efficiency. Generate a concise study tip (2-3 sentences, max 50 words) that is clear, actionable, and applicable to any subject. Format the tip as follows:\r\n\r\nHere's a study tip for students:\r\n\r\n- [A concise, actionable study tip that improves learning efficiency]\r\n\r\n**Instructions:**\r\n- **Objective**: State what the tip improves (e.g., memory retention, focus, time management).\r\n- **Actionable Advice**: Provide a specific action (e.g., \"Study in 25-minute blocks with 5-minute breaks\").\r\n- **Scientific/Practical Basis**: Include a brief reason (e.g., \"This boosts productivity by matching attention spans\").\r\n- **Context/Applicability**: Mention when it works best (e.g., \"Ideal for long study sessions\").\r\n- Ensure variety by focusing on a different aspect of learning each time (e.g., memory, focus, time management).\r\n- Keep it simple and under 50 words, focusing on the crux without over-explaining.\r\n- Do NOT start the tip with \"Practice coding daily\" or any repetitive phrase.\r\n- Do not include additional sections like \"General Study Tip\" or \"Habits\".\r\n\r\n**Examples of concise tips:**\r\n- To improve focus, study in 25-minute blocks with 5-minute breaks, known as the Pomodoro Technique. This matches your brain's attention span, boosting productivity. Ideal for long study sessions.\r\n- Enhance memory by reviewing notes 1 day, 1 week, and 1 month after learning, using spaced repetition. This strengthens recall, per cognitive science. Best for exam prep over weeks.\r\n\r\n(Request ID: ${timestamp})`,\r\n      };\r\n      const response = await getStudySuggestion(prompt);\r\n\r\n      console.log(\"Study Tip API Response:\", response);\r\n\r\n      let studyTip = \"Failed to fetch a valid study tip.\";\r\n      if (typeof response === \"string\" && response.trim()) {\r\n        studyTip = response.trim();\r\n        studyTip = studyTip.replace(/^\\d+\\.\\s*/, \"\");\r\n        if (!studyTip.startsWith(\"Here's a study tip for students:\")) {\r\n          studyTip = `Here's a study tip for students:\\n\\n- ${studyTip}`;\r\n        }\r\n      } else if (Array.isArray(response) && response.length > 0) {\r\n        studyTip =\r\n          response.find((item) => typeof item === \"string\" && item.trim()) ||\r\n          studyTip;\r\n        studyTip = studyTip.trim();\r\n        studyTip = studyTip.replace(/^\\d+\\.\\s*/, \"\");\r\n        if (!studyTip.startsWith(\"Here's a study tip for students:\")) {\r\n          studyTip = `Here's a study tip for students:\\n\\n- ${studyTip}`;\r\n        }\r\n      }\r\n\r\n      setAiSuggestion(studyTip);\r\n      setAiSuggestionType(\"studyTip\");\r\n    } catch (error) {\r\n      console.error(\"Error fetching study tip:\", error);\r\n      setAiSuggestion(\"Failed to fetch study tip. Please try again later.\");\r\n      setAiSuggestionType(\"error\");\r\n    } finally {\r\n      setIsAiLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateSchedule = async () => {\r\n    setIsAiLoading(true);\r\n    setAiSuggestion(\"Generating your progress report...\");\r\n    setAiSuggestionType(\"loading\");\r\n    try {\r\n      const today = getLocalDateString(new Date());\r\n      const todayStudyHours =\r\n        studyStats.studyHoursLog.find((log) => log.date === today)?.hours || 0;\r\n      const tasksCompletedToday = tasks.filter(\r\n        (task) => task.completed && task.completedDate === today\r\n      );\r\n      const totalTasksCompletedToday = tasksCompletedToday.length;\r\n      const highPriorityCompleted = tasksCompletedToday.filter(\r\n        (task) => task.priority === \"High\"\r\n      ).length;\r\n      const mediumPriorityCompleted = tasksCompletedToday.filter(\r\n        (task) => task.priority === \"Medium\"\r\n      ).length;\r\n      const lowPriorityCompleted = tasksCompletedToday.filter(\r\n        (task) => task.priority === \"Low\"\r\n      ).length;\r\n\r\n      const timestamp = Date.now();\r\n      const prompt = {\r\n        tasks: [],\r\n        studyStats: {\r\n          todayStudyHours,\r\n          totalTasksCompletedToday,\r\n        },\r\n        customPrompt: `Generate a list of 10 short motivational messages (each 1-2 sentences, max 30 words) for a student who has studied for ${todayStudyHours} hours today and completed ${totalTasksCompletedToday} tasks. Each message should be unique, encouraging, and focused on their progress in their studies. Format each message on a new line without numbering or bullet points. (Request ID: ${timestamp})`,\r\n      };\r\n      const response = await getStudySuggestion(prompt);\r\n\r\n      let motivationalMessage;\r\n      if (typeof response === \"string\") {\r\n        const messages = response\r\n          .split(\"\\n\")\r\n          .filter((msg) => msg.trim() !== \"\");\r\n        motivationalMessage =\r\n          messages.length > 0\r\n            ? messages[0].replace(/^\"(.*)\"$/, \"$1\")\r\n            : \"Keep up the great effort in your studies!\";\r\n      } else if (Array.isArray(response)) {\r\n        motivationalMessage =\r\n          response.length > 0\r\n            ? response[0].replace(/^\"(.*)\"$/, \"$1\")\r\n            : \"Keep up the great effort in your studies!\";\r\n      } else {\r\n        motivationalMessage = \"Keep up the great effort in your studies!\";\r\n      }\r\n\r\n      motivationalMessage = motivationalMessage.replace(/^\"(.*)\"$/, \"$1\");\r\n      motivationalMessage = motivationalMessage.replace(/^\\d+\\.\\s*/, \"\").trim();\r\n\r\n      const progressMessage = `Here’s your progress for today (${today}):\\n\\n- Total Study Hours Today: ${todayStudyHours} hour${todayStudyHours !== 1 ? \"s\" : \"\"}\\n- Tasks Completed Today: ${totalTasksCompletedToday}\\n- High Priority Tasks Completed Today: ${highPriorityCompleted}\\n- Medium Priority Tasks Completed Today: ${mediumPriorityCompleted}\\n- Low Priority Tasks Completed Today: ${lowPriorityCompleted}\\n\\n${motivationalMessage}`;\r\n      setAiSuggestion(progressMessage);\r\n      setAiSuggestionType(\"progressReport\");\r\n    } catch (error) {\r\n      console.error(\"Error generating progress report:\", error);\r\n      setAiSuggestion(\r\n        \"Failed to generate progress report. Please try again later.\"\r\n      );\r\n      setAiSuggestionType(\"error\");\r\n    } finally {\r\n      setIsAiLoading(false);\r\n    }\r\n  };\r\n\r\n  const addTask = (newTask) => {\r\n    const task = {\r\n      id: Date.now(),\r\n      ...newTask,\r\n      completedDate: null,\r\n      pointsAwarded: false,\r\n      hours: newTask.hours || 0,\r\n    };\r\n    setTasks([...tasks, task]);\r\n  };\r\n\r\n  const deleteTask = (id) => {\r\n    const taskToDelete = tasks.find((task) => task.id === id);\r\n    if (!taskToDelete) return;\r\n\r\n    if (taskToDelete.completed) {\r\n      if (taskToDelete.hours > 0 && taskToDelete.completedDate) {\r\n        deductStudyHours(taskToDelete.hours, taskToDelete.completedDate);\r\n      }\r\n\r\n      if (taskToDelete.pointsAwarded) {\r\n        const pointsToDeduct =\r\n          taskToDelete.priority === \"High\"\r\n            ? 30\r\n            : taskToDelete.priority === \"Medium\"\r\n              ? 20\r\n              : 10;\r\n        setPoints((prevPoints) => prevPoints - pointsToDeduct);\r\n        toast.info(`↩️ -${pointsToDeduct} Points. Task deleted.`, {\r\n          toastId: `delete-task-${id}`,\r\n        });\r\n      }\r\n    }\r\n\r\n    setTasks(tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskComplete = (id) => {\r\n    const task = tasks.find((task) => task.id === id);\r\n    if (!task) return;\r\n\r\n    const today = getLocalDateString(new Date());\r\n    let newPoints = points;\r\n    let newBadges = [...badges];\r\n    let notifications = [];\r\n\r\n    const updatedTasks = tasks.map((t) =>\r\n      t.id === id\r\n        ? {\r\n            ...t,\r\n            completed: !t.completed,\r\n            completedDate: !t.completed ? today : null,\r\n            pointsAwarded: t.pointsAwarded,\r\n          }\r\n        : t\r\n    );\r\n\r\n    const updatedTask = updatedTasks.find((t) => t.id === id);\r\n    const pointsToAddOrDeduct =\r\n      task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\r\n\r\n    if (!task.completed) {\r\n      if (!updatedTask.pointsAwarded) {\r\n        newPoints = points + pointsToAddOrDeduct;\r\n        notifications.push(`🎉 +${pointsToAddOrDeduct} Points! Keep it up!`);\r\n        updatedTask.pointsAwarded = true;\r\n      }\r\n\r\n      if (task.hours > 0) {\r\n        logStudyHours(task.hours);\r\n      }\r\n\r\n      const highPriorityTasks = updatedTasks.filter(\r\n        (t) => t.priority === \"High\" && t.completed\r\n      ).length;\r\n      if (highPriorityTasks >= 5 && !badges.includes(\"Priority Master\")) {\r\n        newBadges.push(\"Priority Master\");\r\n        notifications.push(\"🏆 Badge Earned: Priority Master!\");\r\n      }\r\n\r\n      const totalCompletedTasks = updatedTasks.filter(\r\n        (t) => t.completed\r\n      ).length;\r\n      if (totalCompletedTasks >= 10 && !badges.includes(\"Task Titan\")) {\r\n        newBadges.push(\"Task Titan\");\r\n        notifications.push(\"🏆 Badge Earned: Task Titan!\");\r\n      }\r\n\r\n      const dueDate = new Date(task.dueDate);\r\n      const todayDate = new Date();\r\n      if (dueDate > todayDate) {\r\n        const earlyTasks = updatedTasks.filter(\r\n          (t) => new Date(t.dueDate) > todayDate && t.completed\r\n        ).length;\r\n        if (earlyTasks >= 3 && !badges.includes(\"Early Bird\")) {\r\n          newBadges.push(\"Early Bird\");\r\n          notifications.push(\"🏆 Badge Earned: Early Bird!\");\r\n        }\r\n      }\r\n\r\n      updateStreak(today);\r\n    } else {\r\n      if (updatedTask.pointsAwarded) {\r\n        newPoints = points - pointsToAddOrDeduct;\r\n        notifications.push(\r\n          `↩️ -${pointsToAddOrDeduct} Points. Task unmarked as completed.`\r\n        );\r\n        updatedTask.pointsAwarded = false;\r\n      }\r\n\r\n      if (task.hours > 0 && task.completedDate) {\r\n        deductStudyHours(task.hours, task.completedDate);\r\n      }\r\n    }\r\n\r\n    setTasks(updatedTasks);\r\n    setPoints(newPoints);\r\n    setBadges(newBadges);\r\n    notifications.forEach((msg) => toast.success(msg));\r\n  };\r\n\r\n  const updateTask = (updatedTask) => {\r\n    setTasks(\r\n      tasks.map((task) => (task.id === updatedTask.id ? updatedTask : task))\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (studyStats.streak >= 7 && !badges.includes(\"Streak Star\")) {\r\n      let newBadges = [...badges, \"Streak Star\"];\r\n      let newPoints = points + 50;\r\n\r\n      setBadges(newBadges);\r\n      setPoints(newPoints);\r\n\r\n      toast.success(\"🏆 Badge Earned: Streak Star!\");\r\n      toast.success(\"🎉 +50 Points for 7-Day Streak!\");\r\n    }\r\n  }, [studyStats.streak]);\r\n\r\n  const nextTheme = getNextTheme();\r\n\r\n  return (\r\n    <div className={`min-h-screen flex flex-col ${styles.layoutTheme}`}>\r\n      <ToastContainer />\r\n      <Header\r\n        currentTheme={currentTheme}\r\n        nextTheme={nextTheme}\r\n        onThemeChange={handleThemeChange}\r\n        setActiveTab={setActiveTab}\r\n      />\r\n      <Navigation\r\n        activeTab={activeTab}\r\n        setActiveTab={setActiveTab}\r\n        currentTheme={currentTheme}\r\n      />\r\n      <MainContent\r\n        activeTab={activeTab}\r\n        loading={loading}\r\n        tasks={tasks}\r\n        studyStats={studyStats}\r\n        aiSuggestion={aiSuggestion}\r\n        getStudyTips={getStudyTips}\r\n        generateSchedule={generateSchedule}\r\n        setActiveTab={setActiveTab}\r\n        toggleTaskComplete={toggleTaskComplete}\r\n        currentTheme={currentTheme}\r\n        logStudyHours={logStudyHours}\r\n        deductStudyHours={deductStudyHours}\r\n        addTask={addTask}\r\n        updateTask={updateTask}\r\n        deleteTask={deleteTask}\r\n        points={points}\r\n        badges={badges}\r\n        onPointsUpdate={handlePointsUpdate}\r\n        onThemeUnlock={handleThemeUnlock}\r\n        unlockedThemes={unlockedThemes}\r\n      />\r\n      <Footer currentTheme={currentTheme} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}