{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\StudBud\\\\frontend\\\\src\\\\components\\\\Layout.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/components/Layout.jsx\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./layout/Header\";\nimport Navigation from \"./layout/Navigation\";\nimport MainContent from \"./layout/MainContent\";\nimport Footer from \"./layout/Footer\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { getStudySuggestion } from \"../services/aiService\";\nimport { getCardStyles } from \"./utils/themeUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Layout() {\n  _s();\n  // Initialize activeTab from localStorage, default to \"dashboard\" if not set\n  const [activeTab, setActiveTab] = useState(() => {\n    const savedTab = localStorage.getItem(\"activeTab\");\n    return savedTab || \"dashboard\";\n  });\n  const [tasks, setTasks] = useState([]);\n  const [studyStats, setStudyStats] = useState({\n    totalHours: 0,\n    completedTasks: 0,\n    streak: 0,\n    lastActiveDate: null,\n    lastStreakUpdate: null,\n    studyHoursLog: []\n  });\n  const [aiSuggestion, setAiSuggestion] = useState(\"\");\n  const [aiSuggestionType, setAiSuggestionType] = useState(\"task\");\n  const [isAiLoading, setIsAiLoading] = useState(false);\n  const [points, setPoints] = useState(0);\n  const [badges, setBadges] = useState([]);\n  const [currentTheme, setCurrentTheme] = useState(\"Light Mode\");\n  const [unlockedThemes, setUnlockedThemes] = useState([\"Light Mode\"]);\n  const [loading, setLoading] = useState(true);\n\n  // Persist activeTab to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem(\"activeTab\", activeTab);\n  }, [activeTab]);\n  const userId = \"user123\";\n  const styles = getCardStyles(currentTheme);\n  const getLocalDateString = date => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\n    const day = String(date.getDate()).padStart(2, \"0\");\n    return `${year}-${month}-${day}`;\n  };\n  const getNextTheme = () => {\n    if (unlockedThemes.length === 1) {\n      return \"Light Mode\";\n    }\n    const currentIndex = unlockedThemes.indexOf(currentTheme);\n    const nextIndex = (currentIndex + 1) % unlockedThemes.length;\n    return unlockedThemes[nextIndex];\n  };\n  const handleThemeChange = () => {\n    const nextTheme = getNextTheme();\n    setCurrentTheme(nextTheme);\n  };\n  const handlePointsUpdate = newPoints => {\n    setPoints(newPoints);\n  };\n  const handleThemeUnlock = themeName => {\n    if (!unlockedThemes.includes(themeName)) {\n      setUnlockedThemes([...unlockedThemes, themeName]);\n    }\n  };\n  const updateStreak = today => {\n    setStudyStats(prev => {\n      const lastActive = prev.lastActiveDate ? new Date(prev.lastActiveDate) : null;\n      const lastStreakUpdate = prev.lastStreakUpdate ? new Date(prev.lastStreakUpdate) : null;\n      const todayDate = new Date(today);\n      let newStreak = prev.streak;\n      let newLastActiveDate = today;\n      let newLastStreakUpdate = prev.lastStreakUpdate;\n      const lastActiveDateString = lastActive ? getLocalDateString(lastActive) : null;\n      const lastStreakUpdateDateString = lastStreakUpdate ? getLocalDateString(lastStreakUpdate) : null;\n      if (!lastActive || lastActiveDateString !== today) {\n        if (lastActive) {\n          const diffTime = todayDate - lastActive;\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          if (diffDays === 1) {\n            newStreak = prev.streak + 1;\n            newLastStreakUpdate = today;\n          } else if (diffDays > 1) {\n            newStreak = 1;\n            newLastStreakUpdate = today;\n          }\n        } else {\n          newStreak = 1;\n          newLastStreakUpdate = today;\n        }\n      }\n      if (lastStreakUpdate && lastStreakUpdateDateString !== today) {\n        const diffTime = todayDate - new Date(lastStreakUpdate);\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        if (diffDays > 1) {\n          newStreak = 1;\n          newLastStreakUpdate = today;\n        }\n      }\n      const newStats = {\n        ...prev,\n        streak: newStreak,\n        lastActiveDate: newLastActiveDate,\n        lastStreakUpdate: newLastStreakUpdate,\n        studyHoursLog: prev.studyHoursLog || []\n      };\n      return newStats;\n    });\n  };\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        var _data$studyStats, _data$studyStats2, _data$studyStats3, _data$studyStats4, _data$studyStats5, _data$studyStats6;\n        const response = await fetch(`http://localhost:5000/api/user/${userId}`);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch user data: ${response.status}`);\n        }\n        const data = await response.json();\n        const fetchedTasks = (data.tasks || []).map(task => {\n          var _task$pointsAwarded, _task$hours;\n          return {\n            ...task,\n            pointsAwarded: (_task$pointsAwarded = task.pointsAwarded) !== null && _task$pointsAwarded !== void 0 ? _task$pointsAwarded : false,\n            hours: (_task$hours = task.hours) !== null && _task$hours !== void 0 ? _task$hours : 0\n          };\n        });\n        setTasks(fetchedTasks);\n        const fetchedStats = {\n          totalHours: ((_data$studyStats = data.studyStats) === null || _data$studyStats === void 0 ? void 0 : _data$studyStats.totalHours) || 0,\n          completedTasks: ((_data$studyStats2 = data.studyStats) === null || _data$studyStats2 === void 0 ? void 0 : _data$studyStats2.completedTasks) || 0,\n          streak: ((_data$studyStats3 = data.studyStats) === null || _data$studyStats3 === void 0 ? void 0 : _data$studyStats3.streak) || 0,\n          lastActiveDate: ((_data$studyStats4 = data.studyStats) === null || _data$studyStats4 === void 0 ? void 0 : _data$studyStats4.lastActiveDate) || null,\n          lastStreakUpdate: ((_data$studyStats5 = data.studyStats) === null || _data$studyStats5 === void 0 ? void 0 : _data$studyStats5.lastStreakUpdate) || null,\n          studyHoursLog: ((_data$studyStats6 = data.studyStats) === null || _data$studyStats6 === void 0 ? void 0 : _data$studyStats6.studyHoursLog) || []\n        };\n        setStudyStats(fetchedStats);\n        setPoints(data.points || 0);\n        setBadges(data.badges || []);\n        setCurrentTheme(data.currentTheme || \"Light Mode\");\n        setUnlockedThemes(data.unlockedThemes || [\"Light Mode\"]);\n        const today = getLocalDateString(new Date());\n        const {\n          lastActiveDate,\n          lastStreakUpdate\n        } = fetchedStats;\n        let newStats = {\n          ...fetchedStats\n        };\n        if (lastStreakUpdate !== today) {\n          if (!lastActiveDate) {\n            newStats = {\n              ...fetchedStats,\n              lastActiveDate: today,\n              lastStreakUpdate: today,\n              studyHoursLog: fetchedStats.studyHoursLog || []\n            };\n          } else {\n            const lastDate = new Date(lastActiveDate);\n            const currentDate = new Date(today);\n            const diffDays = (currentDate - lastDate) / (1000 * 60 * 60 * 24);\n            if (diffDays === 1) {\n              newStats = {\n                ...fetchedStats,\n                streak: fetchedStats.streak + 1,\n                lastActiveDate: today,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n            } else if (diffDays > 1) {\n              newStats = {\n                ...fetchedStats,\n                streak: 0,\n                lastActiveDate: today,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n            } else {\n              newStats = {\n                ...fetchedStats,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n            }\n          }\n          setStudyStats(newStats);\n        }\n\n        // Direct store of timestamp without using a variable\n        localStorage.setItem(\"lastFetchTimestamp\", Date.now().toString());\n        setTimeout(async () => {\n          const incompleteTasks = fetchedTasks.filter(task => !task.completed);\n          if (incompleteTasks.length === 0) {\n            setAiSuggestion(\"You have no incomplete tasks! Add a new task to keep progressing.\");\n            setAiSuggestionType(\"task\");\n          } else {\n            setAiSuggestion(\"Looks like you have some tasks to tackle! Add or complete a task to keep progressing.\");\n            setAiSuggestionType(\"task\");\n          }\n        }, 1000);\n        setLoading(false);\n      } catch (err) {\n        toast.error(\"Failed to load user data. Please try again later.\");\n        setAiSuggestion(\"Add a new task to get started!\");\n        setAiSuggestionType(\"task\");\n        setLoading(false);\n      }\n    };\n    fetchUserData();\n  }, []);\n  useEffect(() => {\n    if (isAiLoading) return;\n    if (aiSuggestionType !== \"task\") return;\n    const incompleteTasks = tasks.filter(task => !task.completed);\n    if (incompleteTasks.length === 0) {\n      setAiSuggestion(\"You have no incomplete tasks! Add a new task to keep progressing.\");\n      setAiSuggestionType(\"task\");\n    } else {\n      setAiSuggestion(\"Looks like you have some tasks to tackle! Add or complete a task to keep progressing.\");\n      setAiSuggestionType(\"task\");\n    }\n  }, [tasks, isAiLoading, aiSuggestionType]);\n  useEffect(() => {\n    const completedCount = tasks.filter(task => task.completed).length;\n    setStudyStats(prevStats => ({\n      ...prevStats,\n      completedTasks: completedCount,\n      studyHoursLog: prevStats.studyHoursLog || []\n    }));\n  }, [tasks]);\n  const saveUserData = async () => {\n    try {\n      const serializedStudyStats = {\n        totalHours: studyStats.totalHours,\n        completedTasks: studyStats.completedTasks,\n        streak: studyStats.streak,\n        lastActiveDate: studyStats.lastActiveDate || null,\n        lastStreakUpdate: studyStats.lastStreakUpdate || null,\n        studyHoursLog: studyStats.studyHoursLog || []\n      };\n      const dataToSend = {\n        tasks,\n        studyStats: serializedStudyStats,\n        points,\n        badges,\n        themes: [\"Light Mode\", \"Dark Mode\", \"Ocean Breeze\", \"Sunset Glow\", \"Forest Whisper\"],\n        currentTheme,\n        unlockedThemes\n      };\n      const response = await fetch(`http://localhost:5000/api/user/${userId}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(dataToSend)\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to save user data: ${response.status} - ${await response.text()}`);\n      }\n    } catch (err) {\n      toast.error(`Failed to save progress: ${err.message}`);\n    }\n  };\n  useEffect(() => {\n    const debounceSave = setTimeout(() => {\n      saveUserData();\n    }, 1000);\n    return () => clearTimeout(debounceSave);\n  }, [tasks, studyStats, points, badges, currentTheme, unlockedThemes]);\n  const logStudyHours = hours => {\n    const parsedHours = parseFloat(hours);\n    if (isNaN(parsedHours) || parsedHours <= 0) {\n      toast.error(\"Please enter a valid number of hours greater than 0.\");\n      return;\n    }\n    const roundedHours = Math.round(parsedHours * 100) / 100;\n    const today = getLocalDateString(new Date());\n    setStudyStats(prev => {\n      const studyHoursLog = prev.studyHoursLog || [];\n      const existingLog = studyHoursLog.find(log => log.date === today);\n      let updatedLog;\n      if (existingLog) {\n        updatedLog = studyHoursLog.map(log => log.date === today ? {\n          ...log,\n          hours: Math.round((log.hours + roundedHours) * 100) / 100\n        } : log);\n      } else {\n        updatedLog = [...studyHoursLog, {\n          date: today,\n          hours: roundedHours\n        }];\n      }\n      const newStats = {\n        ...prev,\n        totalHours: Math.round((prev.totalHours + roundedHours) * 100) / 100,\n        studyHoursLog: updatedLog\n      };\n      return newStats;\n    });\n    updateStreak(today);\n  };\n  const deductStudyHours = (hours, completedDate) => {\n    const parsedHours = parseFloat(hours);\n    if (isNaN(parsedHours) || parsedHours <= 0) return;\n    const roundedHours = Math.round(parsedHours * 100) / 100;\n    setStudyStats(prev => {\n      const studyHoursLog = prev.studyHoursLog || [];\n      const logDate = completedDate;\n      const existingLog = studyHoursLog.find(log => log.date === logDate);\n      let updatedLog;\n      if (existingLog) {\n        const newHours = Math.max(0, existingLog.hours - roundedHours);\n        updatedLog = studyHoursLog.map(log => log.date === logDate ? {\n          ...log,\n          hours: Math.round(newHours * 100) / 100\n        } : log).filter(log => log.hours > 0);\n      } else {\n        updatedLog = studyHoursLog;\n      }\n      const newTotalHours = Math.max(0, prev.totalHours - roundedHours);\n      const newStats = {\n        ...prev,\n        totalHours: Math.round(newTotalHours * 100) / 100,\n        studyHoursLog: updatedLog\n      };\n      return newStats;\n    });\n  };\n\n  // Updated getStudyTips and generateSchedule functions for Layout.jsx\n\n  // Complete and corrected Layout.jsx functions\n\n  const getStudyTips = async () => {\n    setIsAiLoading(true);\n    setAiSuggestion(\"Loading a fresh study tip...\");\n    setAiSuggestionType(\"loading\");\n    try {\n      const timestamp = Date.now();\n      const prompt = {\n        tasks: [],\n        studyStats: {},\n        customPrompt: `Generate a concise study tip (2-3 sentences, max 50 words) that is clear, actionable, and applicable to any subject. Format the tip as follows:\n\nHere's a study tip for students:\n\n- [A concise, actionable study tip that improves learning efficiency]\n\n**Instructions:**\n- **Objective**: State what the tip improves (e.g., memory retention, focus, time management).\n- **Actionable Advice**: Provide a specific action (e.g., \"Study in 25-minute blocks with 5-minute breaks\").\n- **Scientific/Practical Basis**: Include a brief reason (e.g., \"This boosts productivity by matching attention spans\").\n- **Context/Applicability**: Mention when it works best (e.g., \"Ideal for long study sessions\").\n- Ensure variety by focusing on a different aspect of learning each time (e.g., memory, focus, time management).\n- Keep it simple and under 50 words, focusing on the crux without over-explaining.\n- Do NOT start the tip with \"Practice coding daily\" or any repetitive phrase.\n- Do not include additional sections like \"General Study Tip\" or \"Habits\".\n\n**Examples of concise tips:**\n- To improve focus, study in 25-minute blocks with 5-minute breaks, known as the Pomodoro Technique. This matches your brain's attention span, boosting productivity. Ideal for long study sessions.\n- Enhance memory by reviewing notes 1 day, 1 week, and 1 month after learning, using spaced repetition. This strengthens recall, per cognitive science. Best for exam prep over weeks.\n\n(Request ID: ${timestamp})`\n      };\n      const response = await getStudySuggestion(prompt);\n      let studyTip = \"Failed to fetch a valid study tip.\";\n      if (typeof response === \"string\" && response.trim()) {\n        studyTip = response.trim();\n        // Clean up any numbering\n        studyTip = studyTip.replace(/^\\d+\\.\\s*/, \"\");\n        // Ensure it starts with the expected format\n        if (!studyTip.toLowerCase().includes(\"here's a study tip\")) {\n          studyTip = `Here's a study tip for students:\\n\\n- ${studyTip}`;\n        }\n      } else if (Array.isArray(response) && response.length > 0) {\n        studyTip = response.find(item => typeof item === \"string\" && item.trim()) || studyTip;\n        studyTip = studyTip.trim();\n        studyTip = studyTip.replace(/^\\d+\\.\\s*/, \"\");\n        if (!studyTip.toLowerCase().includes(\"here's a study tip\")) {\n          studyTip = `Here's a study tip for students:\\n\\n- ${studyTip}`;\n        }\n      }\n\n      // Extra validation to ensure we never display the error message when we have content\n      if (studyTip === \"Failed to fetch a valid study tip.\" && typeof response === \"string\" && response.trim().length > 10) {\n        // If we have some substantial content but it didn't match our format expectations,\n        // use it anyway with proper formatting\n        studyTip = `Here's a study tip for students:\\n\\n- ${response.trim()}`;\n      }\n\n      // Filter out any tech-specific content\n      if (studyTip.toLowerCase().includes(\"coding\") || studyTip.toLowerCase().includes(\"programming\") || studyTip.toLowerCase().includes(\"developer\") || studyTip.toLowerCase().includes(\"tech\") || studyTip.toLowerCase().includes(\"it field\")) {\n        studyTip = \"Here's a study tip for students:\\n\\n- Create mind maps to visualize connections between different concepts. This spatial organization helps your brain form meaningful associations and see the bigger picture in complex subjects, from sciences to humanities.\";\n      }\n      setAiSuggestion(studyTip);\n      setAiSuggestionType(\"studyTip\");\n    } catch (error) {\n      setAiSuggestion(\"Failed to fetch study tip. Please try again later.\");\n      setAiSuggestionType(\"error\");\n    } finally {\n      setIsAiLoading(false);\n    }\n  };\n  const generateSchedule = async () => {\n    setIsAiLoading(true);\n    setAiSuggestion(\"Generating your progress report...\");\n    setAiSuggestionType(\"loading\");\n    try {\n      var _studyStats$studyHour;\n      const today = getLocalDateString(new Date());\n      const todayStudyHours = ((_studyStats$studyHour = studyStats.studyHoursLog.find(log => log.date === today)) === null || _studyStats$studyHour === void 0 ? void 0 : _studyStats$studyHour.hours) || 0;\n      const tasksCompletedToday = tasks.filter(task => task.completed && task.completedDate === today);\n      const totalTasksCompletedToday = tasksCompletedToday.length;\n      const highPriorityCompleted = tasksCompletedToday.filter(task => task.priority === \"High\").length;\n      const mediumPriorityCompleted = tasksCompletedToday.filter(task => task.priority === \"Medium\").length;\n      const lowPriorityCompleted = tasksCompletedToday.filter(task => task.priority === \"Low\").length;\n      const timestamp = Date.now();\n      const prompt = {\n        tasks: [],\n        studyStats: {\n          todayStudyHours,\n          totalTasksCompletedToday,\n          streak: studyStats.streak || 0,\n          totalHours: studyStats.totalHours || 0,\n          completedTasks: tasks.filter(task => task.completed).length\n        },\n        customPrompt: `Generate a list of 10 short motivational messages (each 1-2 sentences, max 30 words) for a student who has studied for ${todayStudyHours} hours today and completed ${totalTasksCompletedToday} tasks. The messages should be applicable to students in all fields, not just computing or IT. Each message should be unique, encouraging, and focused on their progress in their studies. Format each message on a new line without numbering or bullet points. (Request ID: ${timestamp})`\n      };\n      const response = await getStudySuggestion(prompt);\n      let motivationalMessage;\n      if (typeof response === \"string\") {\n        const messages = response.split(\"\\n\").filter(msg => msg.trim() !== \"\");\n        motivationalMessage = messages.length > 0 ? messages[0].replace(/^\"(.*)\"$/, \"$1\") : \"Keep up the great effort in your studies!\";\n      } else if (Array.isArray(response)) {\n        motivationalMessage = response.length > 0 ? response[0].replace(/^\"(.*)\"$/, \"$1\") : \"Keep up the great effort in your studies!\";\n      } else {\n        motivationalMessage = \"Keep up the great effort in your studies!\";\n      }\n      motivationalMessage = motivationalMessage.replace(/^\"(.*)\"$/, \"$1\");\n      motivationalMessage = motivationalMessage.replace(/^\\d+\\.\\s*/, \"\").trim();\n\n      // Make sure the response isn't just \"- High Priority:\" or another header\n      if (response === \"- High Priority:\" || response.trim().startsWith(\"- High Priority:\") || response.trim().startsWith(\"Here's your progress\")) {\n        // Determine progress level based on stats\n        let progressCategory = \"beginner\";\n        const streak = studyStats.streak || 0;\n        const totalHours = studyStats.totalHours || 0;\n        const completedTasks = tasks.filter(task => task.completed).length;\n        if (streak > 14 || totalHours > 50 || completedTasks > 30) {\n          progressCategory = \"advanced\";\n        } else if (streak > 5 || totalHours > 20 || completedTasks > 10) {\n          progressCategory = \"intermediate\";\n        }\n\n        // Use appropriate fallback message based on progress and today's activity\n        const noProgressToday = todayStudyHours === 0 && totalTasksCompletedToday === 0;\n        if (noProgressToday) {\n          motivationalMessage = \"Starting your learning journey is often the hardest part. Remember that every expert was once a beginner, and your willingness to begin sets you apart. Take that first step today!\";\n        } else if (progressCategory === \"beginner\") {\n          motivationalMessage = \"Your commitment to learning is impressive. These early steps build the foundation for all your future success, regardless of what field you're studying.\";\n        } else if (progressCategory === \"intermediate\") {\n          motivationalMessage = \"The consistent effort you're showing in your studies demonstrates real dedication. This steady progress is exactly how lasting expertise is built in any discipline.\";\n        } else {\n          // advanced\n          motivationalMessage = \"The depth of knowledge you're building through your sustained commitment to learning is remarkable. Few people achieve this level of dedication, and it will serve you well throughout your life and career.\";\n        }\n      }\n\n      // Ensure we don't accidentally include the date twice\n      if (motivationalMessage.includes(\"progress for today\")) {\n        motivationalMessage = \"Your commitment to learning is inspiring. Keep nurturing your skills and knowledge, and you'll achieve remarkable results in your field.\";\n      }\n\n      // Filter out any references to specific fields like \"tech\" or \"coding\"\n      if (motivationalMessage.includes(\"coding\") || motivationalMessage.includes(\"programming\") || motivationalMessage.includes(\"tech\") || motivationalMessage.includes(\"IT\") || motivationalMessage.includes(\"developer\")) {\n        motivationalMessage = \"Your dedication to learning will open doors to opportunities in your field. Each study session builds valuable skills that will serve you throughout your career.\";\n      }\n      const progressMessage = `Here's your progress for today (${today}):\\n\\n- Total Study Hours Today: ${todayStudyHours} hour${todayStudyHours !== 1 ? \"s\" : \"\"}\\n- Tasks Completed Today: ${totalTasksCompletedToday}\\n- High Priority Tasks Completed Today: ${highPriorityCompleted}\\n- Medium Priority Tasks Completed Today: ${mediumPriorityCompleted}\\n- Low Priority Tasks Completed Today: ${lowPriorityCompleted}\\n\\n${motivationalMessage}`;\n      setAiSuggestion(progressMessage);\n      setAiSuggestionType(\"progressReport\");\n    } catch (error) {\n      setAiSuggestion(\"Failed to generate progress report. Please try again later.\");\n      setAiSuggestionType(\"error\");\n    } finally {\n      setIsAiLoading(false);\n    }\n  };\n  const addTask = newTask => {\n    const task = {\n      id: Date.now(),\n      ...newTask,\n      completedDate: null,\n      pointsAwarded: false,\n      hours: newTask.hours || 0\n    };\n    setTasks([...tasks, task]);\n  };\n  const deleteTask = id => {\n    const taskToDelete = tasks.find(task => task.id === id);\n    if (!taskToDelete) return;\n    if (taskToDelete.completed) {\n      if (taskToDelete.hours > 0 && taskToDelete.completedDate) {\n        deductStudyHours(taskToDelete.hours, taskToDelete.completedDate);\n      }\n      if (taskToDelete.pointsAwarded) {\n        const pointsToDeduct = taskToDelete.priority === \"High\" ? 30 : taskToDelete.priority === \"Medium\" ? 20 : 10;\n        setPoints(prevPoints => prevPoints - pointsToDeduct);\n        toast.info(`↩️ -${pointsToDeduct} Points. Task deleted.`, {\n          toastId: `delete-task-${id}`\n        });\n      }\n    }\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n  const toggleTaskComplete = id => {\n    const task = tasks.find(task => task.id === id);\n    if (!task) return;\n    const today = getLocalDateString(new Date());\n    let newPoints = points;\n    let newBadges = [...badges];\n    let notifications = [];\n    const updatedTasks = tasks.map(t => t.id === id ? {\n      ...t,\n      completed: !t.completed,\n      completedDate: !t.completed ? today : null,\n      pointsAwarded: t.pointsAwarded\n    } : t);\n    const updatedTask = updatedTasks.find(t => t.id === id);\n    const pointsToAddOrDeduct = task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\n    if (!task.completed) {\n      if (!updatedTask.pointsAwarded) {\n        newPoints = points + pointsToAddOrDeduct;\n        notifications.push(`🎉 +${pointsToAddOrDeduct} Points! Keep it up!`);\n        updatedTask.pointsAwarded = true;\n      }\n      if (task.hours > 0) {\n        logStudyHours(task.hours);\n      }\n      const highPriorityTasks = updatedTasks.filter(t => t.priority === \"High\" && t.completed).length;\n      if (highPriorityTasks >= 5 && !badges.includes(\"Priority Master\")) {\n        newBadges.push(\"Priority Master\");\n        notifications.push(\"🏆 Badge Earned: Priority Master!\");\n      }\n      const totalCompletedTasks = updatedTasks.filter(t => t.completed).length;\n      if (totalCompletedTasks >= 10 && !badges.includes(\"Task Titan\")) {\n        newBadges.push(\"Task Titan\");\n        notifications.push(\"🏆 Badge Earned: Task Titan!\");\n      }\n\n      // Check for Early Bird badge: tasks completed before their due date\n      const earlyTasks = updatedTasks.filter(t => t.completed && t.completedDate && t.dueDate && t.completedDate < t.dueDate).length;\n      if (earlyTasks >= 3 && !badges.includes(\"Early Bird\")) {\n        newBadges.push(\"Early Bird\");\n        notifications.push(\"🏆 Badge Earned: Early Bird!\");\n      }\n      updateStreak(today);\n    } else {\n      if (updatedTask.pointsAwarded) {\n        newPoints = points - pointsToAddOrDeduct;\n        notifications.push(`↩️ -${pointsToAddOrDeduct} Points. Task unmarked as completed.`);\n        updatedTask.pointsAwarded = false;\n      }\n      if (task.hours > 0 && task.completedDate) {\n        deductStudyHours(task.hours, task.completedDate);\n      }\n    }\n    setTasks(updatedTasks);\n    setPoints(newPoints);\n    setBadges(newBadges);\n    notifications.forEach(msg => toast.success(msg));\n  };\n  const updateTask = updatedTask => {\n    setTasks(tasks.map(task => task.id === updatedTask.id ? updatedTask : task));\n  };\n\n  // Fix for useEffect with missing dependencies\n  useEffect(() => {\n    if (studyStats.streak >= 7 && !badges.includes(\"Streak Star\")) {\n      let newBadges = [...badges, \"Streak Star\"];\n      let newPoints = points + 50;\n      setBadges(newBadges);\n      setPoints(newPoints);\n      toast.success(\"🏆 Badge Earned: Streak Star!\");\n      toast.success(\"🎉 +50 Points for 7-Day Streak!\");\n\n      // Save data after awarding streak badge\n      const debounceSave = setTimeout(() => {\n        saveUserData();\n      }, 1000);\n      return () => clearTimeout(debounceSave);\n    }\n  }, [studyStats.streak, badges, points]); // Added missing dependencies\n\n  const nextTheme = getNextTheme();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `min-h-screen flex flex-col ${styles.layoutTheme}`,\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 754,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      currentTheme: currentTheme,\n      nextTheme: nextTheme,\n      onThemeChange: handleThemeChange,\n      setActiveTab: setActiveTab\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      activeTab: activeTab,\n      setActiveTab: setActiveTab,\n      currentTheme: currentTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 761,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n      activeTab: activeTab,\n      loading: loading,\n      tasks: tasks,\n      studyStats: studyStats,\n      aiSuggestion: aiSuggestion,\n      getStudyTips: getStudyTips,\n      generateSchedule: generateSchedule,\n      setActiveTab: setActiveTab,\n      toggleTaskComplete: toggleTaskComplete,\n      currentTheme: currentTheme,\n      logStudyHours: logStudyHours,\n      deductStudyHours: deductStudyHours,\n      addTask: addTask,\n      updateTask: updateTask,\n      deleteTask: deleteTask,\n      points: points,\n      badges: badges,\n      onPointsUpdate: handlePointsUpdate,\n      onThemeUnlock: handleThemeUnlock,\n      unlockedThemes: unlockedThemes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 766,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      currentTheme: currentTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 753,\n    columnNumber: 5\n  }, this);\n}\n_s(Layout, \"iWVP8Ac9YqTv8TwyVMW8Z3UiU9g=\");\n_c = Layout;\nexport default Layout;\nvar _c;\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"names":["React","useState","useEffect","Header","Navigation","MainContent","Footer","ToastContainer","toast","getStudySuggestion","getCardStyles","jsxDEV","_jsxDEV","Layout","_s","activeTab","setActiveTab","savedTab","localStorage","getItem","tasks","setTasks","studyStats","setStudyStats","totalHours","completedTasks","streak","lastActiveDate","lastStreakUpdate","studyHoursLog","aiSuggestion","setAiSuggestion","aiSuggestionType","setAiSuggestionType","isAiLoading","setIsAiLoading","points","setPoints","badges","setBadges","currentTheme","setCurrentTheme","unlockedThemes","setUnlockedThemes","loading","setLoading","setItem","userId","styles","getLocalDateString","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","getNextTheme","length","currentIndex","indexOf","nextIndex","handleThemeChange","nextTheme","handlePointsUpdate","newPoints","handleThemeUnlock","themeName","includes","updateStreak","today","prev","lastActive","Date","todayDate","newStreak","newLastActiveDate","newLastStreakUpdate","lastActiveDateString","lastStreakUpdateDateString","diffTime","diffDays","Math","ceil","newStats","fetchUserData","_data$studyStats","_data$studyStats2","_data$studyStats3","_data$studyStats4","_data$studyStats5","_data$studyStats6","response","fetch","ok","Error","status","data","json","fetchedTasks","map","task","_task$pointsAwarded","_task$hours","pointsAwarded","hours","fetchedStats","lastDate","currentDate","now","toString","setTimeout","incompleteTasks","filter","completed","err","error","completedCount","prevStats","saveUserData","serializedStudyStats","dataToSend","themes","method","headers","body","JSON","stringify","text","message","debounceSave","clearTimeout","logStudyHours","parsedHours","parseFloat","isNaN","roundedHours","round","existingLog","find","log","updatedLog","deductStudyHours","completedDate","logDate","newHours","max","newTotalHours","getStudyTips","timestamp","prompt","customPrompt","studyTip","trim","replace","toLowerCase","Array","isArray","item","generateSchedule","_studyStats$studyHour","todayStudyHours","tasksCompletedToday","totalTasksCompletedToday","highPriorityCompleted","priority","mediumPriorityCompleted","lowPriorityCompleted","motivationalMessage","messages","split","msg","startsWith","progressCategory","noProgressToday","progressMessage","addTask","newTask","id","deleteTask","taskToDelete","pointsToDeduct","prevPoints","info","toastId","toggleTaskComplete","newBadges","notifications","updatedTasks","t","updatedTask","pointsToAddOrDeduct","push","highPriorityTasks","totalCompletedTasks","earlyTasks","dueDate","forEach","success","updateTask","className","layoutTheme","children","fileName","_jsxFileName","lineNumber","columnNumber","onThemeChange","onPointsUpdate","onThemeUnlock","_c","$RefreshReg$"],"sources":["D:/Projects/StudBud/frontend/src/components/Layout.jsx"],"sourcesContent":["// frontend/src/components/Layout.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Header from \"./layout/Header\";\r\nimport Navigation from \"./layout/Navigation\";\r\nimport MainContent from \"./layout/MainContent\";\r\nimport Footer from \"./layout/Footer\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { getStudySuggestion } from \"../services/aiService\";\r\nimport { getCardStyles } from \"./utils/themeUtils\";\r\n\r\nfunction Layout() {\r\n  // Initialize activeTab from localStorage, default to \"dashboard\" if not set\r\n  const [activeTab, setActiveTab] = useState(() => {\r\n    const savedTab = localStorage.getItem(\"activeTab\");\r\n    return savedTab || \"dashboard\";\r\n  });\r\n  const [tasks, setTasks] = useState([]);\r\n  const [studyStats, setStudyStats] = useState({\r\n    totalHours: 0,\r\n    completedTasks: 0,\r\n    streak: 0,\r\n    lastActiveDate: null,\r\n    lastStreakUpdate: null,\r\n    studyHoursLog: [],\r\n  });\r\n  const [aiSuggestion, setAiSuggestion] = useState(\"\");\r\n  const [aiSuggestionType, setAiSuggestionType] = useState(\"task\");\r\n  const [isAiLoading, setIsAiLoading] = useState(false);\r\n  const [points, setPoints] = useState(0);\r\n  const [badges, setBadges] = useState([]);\r\n  const [currentTheme, setCurrentTheme] = useState(\"Light Mode\");\r\n  const [unlockedThemes, setUnlockedThemes] = useState([\"Light Mode\"]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Persist activeTab to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem(\"activeTab\", activeTab);\r\n  }, [activeTab]);\r\n\r\n  const userId = \"user123\";\r\n  const styles = getCardStyles(currentTheme);\r\n\r\n  const getLocalDateString = (date) => {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  const getNextTheme = () => {\r\n    if (unlockedThemes.length === 1) {\r\n      return \"Light Mode\";\r\n    }\r\n    const currentIndex = unlockedThemes.indexOf(currentTheme);\r\n    const nextIndex = (currentIndex + 1) % unlockedThemes.length;\r\n    return unlockedThemes[nextIndex];\r\n  };\r\n\r\n  const handleThemeChange = () => {\r\n    const nextTheme = getNextTheme();\r\n    setCurrentTheme(nextTheme);\r\n  };\r\n\r\n  const handlePointsUpdate = (newPoints) => {\r\n    setPoints(newPoints);\r\n  };\r\n\r\n  const handleThemeUnlock = (themeName) => {\r\n    if (!unlockedThemes.includes(themeName)) {\r\n      setUnlockedThemes([...unlockedThemes, themeName]);\r\n    }\r\n  };\r\n\r\n  const updateStreak = (today) => {\r\n    setStudyStats((prev) => {\r\n      const lastActive = prev.lastActiveDate\r\n        ? new Date(prev.lastActiveDate)\r\n        : null;\r\n      const lastStreakUpdate = prev.lastStreakUpdate\r\n        ? new Date(prev.lastStreakUpdate)\r\n        : null;\r\n      const todayDate = new Date(today);\r\n\r\n      let newStreak = prev.streak;\r\n      let newLastActiveDate = today;\r\n      let newLastStreakUpdate = prev.lastStreakUpdate;\r\n\r\n      const lastActiveDateString = lastActive\r\n        ? getLocalDateString(lastActive)\r\n        : null;\r\n      const lastStreakUpdateDateString = lastStreakUpdate\r\n        ? getLocalDateString(lastStreakUpdate)\r\n        : null;\r\n\r\n      if (!lastActive || lastActiveDateString !== today) {\r\n        if (lastActive) {\r\n          const diffTime = todayDate - lastActive;\r\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n          if (diffDays === 1) {\r\n            newStreak = prev.streak + 1;\r\n            newLastStreakUpdate = today;\r\n          } else if (diffDays > 1) {\r\n            newStreak = 1;\r\n            newLastStreakUpdate = today;\r\n          }\r\n        } else {\r\n          newStreak = 1;\r\n          newLastStreakUpdate = today;\r\n        }\r\n      }\r\n\r\n      if (lastStreakUpdate && lastStreakUpdateDateString !== today) {\r\n        const diffTime = todayDate - new Date(lastStreakUpdate);\r\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n        if (diffDays > 1) {\r\n          newStreak = 1;\r\n          newLastStreakUpdate = today;\r\n        }\r\n      }\r\n\r\n      const newStats = {\r\n        ...prev,\r\n        streak: newStreak,\r\n        lastActiveDate: newLastActiveDate,\r\n        lastStreakUpdate: newLastStreakUpdate,\r\n        studyHoursLog: prev.studyHoursLog || [],\r\n      };\r\n      return newStats;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:5000/api/user/${userId}`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to fetch user data: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n\r\n        const fetchedTasks = (data.tasks || []).map((task) => ({\r\n          ...task,\r\n          pointsAwarded: task.pointsAwarded ?? false,\r\n          hours: task.hours ?? 0,\r\n        }));\r\n        setTasks(fetchedTasks);\r\n\r\n        const fetchedStats = {\r\n          totalHours: data.studyStats?.totalHours || 0,\r\n          completedTasks: data.studyStats?.completedTasks || 0,\r\n          streak: data.studyStats?.streak || 0,\r\n          lastActiveDate: data.studyStats?.lastActiveDate || null,\r\n          lastStreakUpdate: data.studyStats?.lastStreakUpdate || null,\r\n          studyHoursLog: data.studyStats?.studyHoursLog || [],\r\n        };\r\n        setStudyStats(fetchedStats);\r\n        setPoints(data.points || 0);\r\n        setBadges(data.badges || []);\r\n        setCurrentTheme(data.currentTheme || \"Light Mode\");\r\n        setUnlockedThemes(data.unlockedThemes || [\"Light Mode\"]);\r\n\r\n        const today = getLocalDateString(new Date());\r\n        const { lastActiveDate, lastStreakUpdate } = fetchedStats;\r\n\r\n        let newStats = { ...fetchedStats };\r\n        if (lastStreakUpdate !== today) {\r\n          if (!lastActiveDate) {\r\n            newStats = {\r\n              ...fetchedStats,\r\n              lastActiveDate: today,\r\n              lastStreakUpdate: today,\r\n              studyHoursLog: fetchedStats.studyHoursLog || [],\r\n            };\r\n          } else {\r\n            const lastDate = new Date(lastActiveDate);\r\n            const currentDate = new Date(today);\r\n            const diffDays = (currentDate - lastDate) / (1000 * 60 * 60 * 24);\r\n\r\n            if (diffDays === 1) {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                streak: fetchedStats.streak + 1,\r\n                lastActiveDate: today,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n            } else if (diffDays > 1) {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                streak: 0,\r\n                lastActiveDate: today,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n            } else {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n            }\r\n          }\r\n          setStudyStats(newStats);\r\n        }\r\n\r\n        // Direct store of timestamp without using a variable\r\n        localStorage.setItem(\"lastFetchTimestamp\", Date.now().toString());\r\n\r\n        setTimeout(async () => {\r\n          const incompleteTasks = fetchedTasks.filter(\r\n            (task) => !task.completed\r\n          );\r\n          if (incompleteTasks.length === 0) {\r\n            setAiSuggestion(\r\n              \"You have no incomplete tasks! Add a new task to keep progressing.\"\r\n            );\r\n            setAiSuggestionType(\"task\");\r\n          } else {\r\n            setAiSuggestion(\r\n              \"Looks like you have some tasks to tackle! Add or complete a task to keep progressing.\"\r\n            );\r\n            setAiSuggestionType(\"task\");\r\n          }\r\n        }, 1000);\r\n\r\n        setLoading(false);\r\n      } catch (err) {\r\n        toast.error(\"Failed to load user data. Please try again later.\");\r\n        setAiSuggestion(\"Add a new task to get started!\");\r\n        setAiSuggestionType(\"task\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isAiLoading) return;\r\n    if (aiSuggestionType !== \"task\") return;\r\n\r\n    const incompleteTasks = tasks.filter((task) => !task.completed);\r\n    if (incompleteTasks.length === 0) {\r\n      setAiSuggestion(\r\n        \"You have no incomplete tasks! Add a new task to keep progressing.\"\r\n      );\r\n      setAiSuggestionType(\"task\");\r\n    } else {\r\n      setAiSuggestion(\r\n        \"Looks like you have some tasks to tackle! Add or complete a task to keep progressing.\"\r\n      );\r\n      setAiSuggestionType(\"task\");\r\n    }\r\n  }, [tasks, isAiLoading, aiSuggestionType]);\r\n\r\n  useEffect(() => {\r\n    const completedCount = tasks.filter((task) => task.completed).length;\r\n    setStudyStats((prevStats) => ({\r\n      ...prevStats,\r\n      completedTasks: completedCount,\r\n      studyHoursLog: prevStats.studyHoursLog || [],\r\n    }));\r\n  }, [tasks]);\r\n\r\n  const saveUserData = async () => {\r\n    try {\r\n      const serializedStudyStats = {\r\n        totalHours: studyStats.totalHours,\r\n        completedTasks: studyStats.completedTasks,\r\n        streak: studyStats.streak,\r\n        lastActiveDate: studyStats.lastActiveDate || null,\r\n        lastStreakUpdate: studyStats.lastStreakUpdate || null,\r\n        studyHoursLog: studyStats.studyHoursLog || [],\r\n      };\r\n\r\n      const dataToSend = {\r\n        tasks,\r\n        studyStats: serializedStudyStats,\r\n        points,\r\n        badges,\r\n        themes: [\r\n          \"Light Mode\",\r\n          \"Dark Mode\",\r\n          \"Ocean Breeze\",\r\n          \"Sunset Glow\",\r\n          \"Forest Whisper\",\r\n        ],\r\n        currentTheme,\r\n        unlockedThemes,\r\n      };\r\n\r\n      const response = await fetch(\r\n        `http://localhost:5000/api/user/${userId}`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(dataToSend),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\r\n          `Failed to save user data: ${response.status} - ${await response.text()}`\r\n        );\r\n      }\r\n    } catch (err) {\r\n      toast.error(`Failed to save progress: ${err.message}`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const debounceSave = setTimeout(() => {\r\n      saveUserData();\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(debounceSave);\r\n  }, [tasks, studyStats, points, badges, currentTheme, unlockedThemes]);\r\n\r\n  const logStudyHours = (hours) => {\r\n    const parsedHours = parseFloat(hours);\r\n    if (isNaN(parsedHours) || parsedHours <= 0) {\r\n      toast.error(\"Please enter a valid number of hours greater than 0.\");\r\n      return;\r\n    }\r\n    const roundedHours = Math.round(parsedHours * 100) / 100;\r\n    const today = getLocalDateString(new Date());\r\n    setStudyStats((prev) => {\r\n      const studyHoursLog = prev.studyHoursLog || [];\r\n      const existingLog = studyHoursLog.find((log) => log.date === today);\r\n      let updatedLog;\r\n      if (existingLog) {\r\n        updatedLog = studyHoursLog.map((log) =>\r\n          log.date === today\r\n            ? {\r\n                ...log,\r\n                hours: Math.round((log.hours + roundedHours) * 100) / 100,\r\n              }\r\n            : log\r\n        );\r\n      } else {\r\n        updatedLog = [...studyHoursLog, { date: today, hours: roundedHours }];\r\n      }\r\n      const newStats = {\r\n        ...prev,\r\n        totalHours: Math.round((prev.totalHours + roundedHours) * 100) / 100,\r\n        studyHoursLog: updatedLog,\r\n      };\r\n      return newStats;\r\n    });\r\n    updateStreak(today);\r\n  };\r\n\r\n  const deductStudyHours = (hours, completedDate) => {\r\n    const parsedHours = parseFloat(hours);\r\n    if (isNaN(parsedHours) || parsedHours <= 0) return;\r\n    const roundedHours = Math.round(parsedHours * 100) / 100;\r\n    setStudyStats((prev) => {\r\n      const studyHoursLog = prev.studyHoursLog || [];\r\n      const logDate = completedDate;\r\n      const existingLog = studyHoursLog.find((log) => log.date === logDate);\r\n      let updatedLog;\r\n      if (existingLog) {\r\n        const newHours = Math.max(0, existingLog.hours - roundedHours);\r\n        updatedLog = studyHoursLog\r\n          .map((log) =>\r\n            log.date === logDate\r\n              ? { ...log, hours: Math.round(newHours * 100) / 100 }\r\n              : log\r\n          )\r\n          .filter((log) => log.hours > 0);\r\n      } else {\r\n        updatedLog = studyHoursLog;\r\n      }\r\n      const newTotalHours = Math.max(0, prev.totalHours - roundedHours);\r\n      const newStats = {\r\n        ...prev,\r\n        totalHours: Math.round(newTotalHours * 100) / 100,\r\n        studyHoursLog: updatedLog,\r\n      };\r\n      return newStats;\r\n    });\r\n  };\r\n\r\n  // Updated getStudyTips and generateSchedule functions for Layout.jsx\r\n\r\n  // Complete and corrected Layout.jsx functions\r\n\r\n  const getStudyTips = async () => {\r\n    setIsAiLoading(true);\r\n    setAiSuggestion(\"Loading a fresh study tip...\");\r\n    setAiSuggestionType(\"loading\");\r\n    try {\r\n      const timestamp = Date.now();\r\n      const prompt = {\r\n        tasks: [],\r\n        studyStats: {},\r\n        customPrompt: `Generate a concise study tip (2-3 sentences, max 50 words) that is clear, actionable, and applicable to any subject. Format the tip as follows:\r\n\r\nHere's a study tip for students:\r\n\r\n- [A concise, actionable study tip that improves learning efficiency]\r\n\r\n**Instructions:**\r\n- **Objective**: State what the tip improves (e.g., memory retention, focus, time management).\r\n- **Actionable Advice**: Provide a specific action (e.g., \"Study in 25-minute blocks with 5-minute breaks\").\r\n- **Scientific/Practical Basis**: Include a brief reason (e.g., \"This boosts productivity by matching attention spans\").\r\n- **Context/Applicability**: Mention when it works best (e.g., \"Ideal for long study sessions\").\r\n- Ensure variety by focusing on a different aspect of learning each time (e.g., memory, focus, time management).\r\n- Keep it simple and under 50 words, focusing on the crux without over-explaining.\r\n- Do NOT start the tip with \"Practice coding daily\" or any repetitive phrase.\r\n- Do not include additional sections like \"General Study Tip\" or \"Habits\".\r\n\r\n**Examples of concise tips:**\r\n- To improve focus, study in 25-minute blocks with 5-minute breaks, known as the Pomodoro Technique. This matches your brain's attention span, boosting productivity. Ideal for long study sessions.\r\n- Enhance memory by reviewing notes 1 day, 1 week, and 1 month after learning, using spaced repetition. This strengthens recall, per cognitive science. Best for exam prep over weeks.\r\n\r\n(Request ID: ${timestamp})`,\r\n      };\r\n      const response = await getStudySuggestion(prompt);\r\n\r\n      let studyTip = \"Failed to fetch a valid study tip.\";\r\n      if (typeof response === \"string\" && response.trim()) {\r\n        studyTip = response.trim();\r\n        // Clean up any numbering\r\n        studyTip = studyTip.replace(/^\\d+\\.\\s*/, \"\");\r\n        // Ensure it starts with the expected format\r\n        if (!studyTip.toLowerCase().includes(\"here's a study tip\")) {\r\n          studyTip = `Here's a study tip for students:\\n\\n- ${studyTip}`;\r\n        }\r\n      } else if (Array.isArray(response) && response.length > 0) {\r\n        studyTip =\r\n          response.find((item) => typeof item === \"string\" && item.trim()) ||\r\n          studyTip;\r\n        studyTip = studyTip.trim();\r\n        studyTip = studyTip.replace(/^\\d+\\.\\s*/, \"\");\r\n        if (!studyTip.toLowerCase().includes(\"here's a study tip\")) {\r\n          studyTip = `Here's a study tip for students:\\n\\n- ${studyTip}`;\r\n        }\r\n      }\r\n\r\n      // Extra validation to ensure we never display the error message when we have content\r\n      if (\r\n        studyTip === \"Failed to fetch a valid study tip.\" &&\r\n        typeof response === \"string\" &&\r\n        response.trim().length > 10\r\n      ) {\r\n        // If we have some substantial content but it didn't match our format expectations,\r\n        // use it anyway with proper formatting\r\n        studyTip = `Here's a study tip for students:\\n\\n- ${response.trim()}`;\r\n      }\r\n\r\n      // Filter out any tech-specific content\r\n      if (\r\n        studyTip.toLowerCase().includes(\"coding\") ||\r\n        studyTip.toLowerCase().includes(\"programming\") ||\r\n        studyTip.toLowerCase().includes(\"developer\") ||\r\n        studyTip.toLowerCase().includes(\"tech\") ||\r\n        studyTip.toLowerCase().includes(\"it field\")\r\n      ) {\r\n        studyTip =\r\n          \"Here's a study tip for students:\\n\\n- Create mind maps to visualize connections between different concepts. This spatial organization helps your brain form meaningful associations and see the bigger picture in complex subjects, from sciences to humanities.\";\r\n      }\r\n\r\n      setAiSuggestion(studyTip);\r\n      setAiSuggestionType(\"studyTip\");\r\n    } catch (error) {\r\n      setAiSuggestion(\"Failed to fetch study tip. Please try again later.\");\r\n      setAiSuggestionType(\"error\");\r\n    } finally {\r\n      setIsAiLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateSchedule = async () => {\r\n    setIsAiLoading(true);\r\n    setAiSuggestion(\"Generating your progress report...\");\r\n    setAiSuggestionType(\"loading\");\r\n    try {\r\n      const today = getLocalDateString(new Date());\r\n      const todayStudyHours =\r\n        studyStats.studyHoursLog.find((log) => log.date === today)?.hours || 0;\r\n      const tasksCompletedToday = tasks.filter(\r\n        (task) => task.completed && task.completedDate === today\r\n      );\r\n      const totalTasksCompletedToday = tasksCompletedToday.length;\r\n      const highPriorityCompleted = tasksCompletedToday.filter(\r\n        (task) => task.priority === \"High\"\r\n      ).length;\r\n      const mediumPriorityCompleted = tasksCompletedToday.filter(\r\n        (task) => task.priority === \"Medium\"\r\n      ).length;\r\n      const lowPriorityCompleted = tasksCompletedToday.filter(\r\n        (task) => task.priority === \"Low\"\r\n      ).length;\r\n\r\n      const timestamp = Date.now();\r\n      const prompt = {\r\n        tasks: [],\r\n        studyStats: {\r\n          todayStudyHours,\r\n          totalTasksCompletedToday,\r\n          streak: studyStats.streak || 0,\r\n          totalHours: studyStats.totalHours || 0,\r\n          completedTasks: tasks.filter((task) => task.completed).length,\r\n        },\r\n        customPrompt: `Generate a list of 10 short motivational messages (each 1-2 sentences, max 30 words) for a student who has studied for ${todayStudyHours} hours today and completed ${totalTasksCompletedToday} tasks. The messages should be applicable to students in all fields, not just computing or IT. Each message should be unique, encouraging, and focused on their progress in their studies. Format each message on a new line without numbering or bullet points. (Request ID: ${timestamp})`,\r\n      };\r\n      const response = await getStudySuggestion(prompt);\r\n\r\n      let motivationalMessage;\r\n      if (typeof response === \"string\") {\r\n        const messages = response\r\n          .split(\"\\n\")\r\n          .filter((msg) => msg.trim() !== \"\");\r\n        motivationalMessage =\r\n          messages.length > 0\r\n            ? messages[0].replace(/^\"(.*)\"$/, \"$1\")\r\n            : \"Keep up the great effort in your studies!\";\r\n      } else if (Array.isArray(response)) {\r\n        motivationalMessage =\r\n          response.length > 0\r\n            ? response[0].replace(/^\"(.*)\"$/, \"$1\")\r\n            : \"Keep up the great effort in your studies!\";\r\n      } else {\r\n        motivationalMessage = \"Keep up the great effort in your studies!\";\r\n      }\r\n\r\n      motivationalMessage = motivationalMessage.replace(/^\"(.*)\"$/, \"$1\");\r\n      motivationalMessage = motivationalMessage.replace(/^\\d+\\.\\s*/, \"\").trim();\r\n\r\n      // Make sure the response isn't just \"- High Priority:\" or another header\r\n      if (\r\n        response === \"- High Priority:\" ||\r\n        response.trim().startsWith(\"- High Priority:\") ||\r\n        response.trim().startsWith(\"Here's your progress\")\r\n      ) {\r\n        // Determine progress level based on stats\r\n        let progressCategory = \"beginner\";\r\n        const streak = studyStats.streak || 0;\r\n        const totalHours = studyStats.totalHours || 0;\r\n        const completedTasks = tasks.filter((task) => task.completed).length;\r\n\r\n        if (streak > 14 || totalHours > 50 || completedTasks > 30) {\r\n          progressCategory = \"advanced\";\r\n        } else if (streak > 5 || totalHours > 20 || completedTasks > 10) {\r\n          progressCategory = \"intermediate\";\r\n        }\r\n\r\n        // Use appropriate fallback message based on progress and today's activity\r\n        const noProgressToday =\r\n          todayStudyHours === 0 && totalTasksCompletedToday === 0;\r\n\r\n        if (noProgressToday) {\r\n          motivationalMessage =\r\n            \"Starting your learning journey is often the hardest part. Remember that every expert was once a beginner, and your willingness to begin sets you apart. Take that first step today!\";\r\n        } else if (progressCategory === \"beginner\") {\r\n          motivationalMessage =\r\n            \"Your commitment to learning is impressive. These early steps build the foundation for all your future success, regardless of what field you're studying.\";\r\n        } else if (progressCategory === \"intermediate\") {\r\n          motivationalMessage =\r\n            \"The consistent effort you're showing in your studies demonstrates real dedication. This steady progress is exactly how lasting expertise is built in any discipline.\";\r\n        } else {\r\n          // advanced\r\n          motivationalMessage =\r\n            \"The depth of knowledge you're building through your sustained commitment to learning is remarkable. Few people achieve this level of dedication, and it will serve you well throughout your life and career.\";\r\n        }\r\n      }\r\n\r\n      // Ensure we don't accidentally include the date twice\r\n      if (motivationalMessage.includes(\"progress for today\")) {\r\n        motivationalMessage =\r\n          \"Your commitment to learning is inspiring. Keep nurturing your skills and knowledge, and you'll achieve remarkable results in your field.\";\r\n      }\r\n\r\n      // Filter out any references to specific fields like \"tech\" or \"coding\"\r\n      if (\r\n        motivationalMessage.includes(\"coding\") ||\r\n        motivationalMessage.includes(\"programming\") ||\r\n        motivationalMessage.includes(\"tech\") ||\r\n        motivationalMessage.includes(\"IT\") ||\r\n        motivationalMessage.includes(\"developer\")\r\n      ) {\r\n        motivationalMessage =\r\n          \"Your dedication to learning will open doors to opportunities in your field. Each study session builds valuable skills that will serve you throughout your career.\";\r\n      }\r\n\r\n      const progressMessage = `Here's your progress for today (${today}):\\n\\n- Total Study Hours Today: ${todayStudyHours} hour${todayStudyHours !== 1 ? \"s\" : \"\"}\\n- Tasks Completed Today: ${totalTasksCompletedToday}\\n- High Priority Tasks Completed Today: ${highPriorityCompleted}\\n- Medium Priority Tasks Completed Today: ${mediumPriorityCompleted}\\n- Low Priority Tasks Completed Today: ${lowPriorityCompleted}\\n\\n${motivationalMessage}`;\r\n      setAiSuggestion(progressMessage);\r\n      setAiSuggestionType(\"progressReport\");\r\n    } catch (error) {\r\n      setAiSuggestion(\r\n        \"Failed to generate progress report. Please try again later.\"\r\n      );\r\n      setAiSuggestionType(\"error\");\r\n    } finally {\r\n      setIsAiLoading(false);\r\n    }\r\n  };\r\n\r\n  const addTask = (newTask) => {\r\n    const task = {\r\n      id: Date.now(),\r\n      ...newTask,\r\n      completedDate: null,\r\n      pointsAwarded: false,\r\n      hours: newTask.hours || 0,\r\n    };\r\n    setTasks([...tasks, task]);\r\n  };\r\n\r\n  const deleteTask = (id) => {\r\n    const taskToDelete = tasks.find((task) => task.id === id);\r\n    if (!taskToDelete) return;\r\n\r\n    if (taskToDelete.completed) {\r\n      if (taskToDelete.hours > 0 && taskToDelete.completedDate) {\r\n        deductStudyHours(taskToDelete.hours, taskToDelete.completedDate);\r\n      }\r\n\r\n      if (taskToDelete.pointsAwarded) {\r\n        const pointsToDeduct =\r\n          taskToDelete.priority === \"High\"\r\n            ? 30\r\n            : taskToDelete.priority === \"Medium\"\r\n              ? 20\r\n              : 10;\r\n        setPoints((prevPoints) => prevPoints - pointsToDeduct);\r\n        toast.info(`↩️ -${pointsToDeduct} Points. Task deleted.`, {\r\n          toastId: `delete-task-${id}`,\r\n        });\r\n      }\r\n    }\r\n\r\n    setTasks(tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskComplete = (id) => {\r\n    const task = tasks.find((task) => task.id === id);\r\n    if (!task) return;\r\n\r\n    const today = getLocalDateString(new Date());\r\n    let newPoints = points;\r\n    let newBadges = [...badges];\r\n    let notifications = [];\r\n\r\n    const updatedTasks = tasks.map((t) =>\r\n      t.id === id\r\n        ? {\r\n            ...t,\r\n            completed: !t.completed,\r\n            completedDate: !t.completed ? today : null,\r\n            pointsAwarded: t.pointsAwarded,\r\n          }\r\n        : t\r\n    );\r\n\r\n    const updatedTask = updatedTasks.find((t) => t.id === id);\r\n    const pointsToAddOrDeduct =\r\n      task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\r\n\r\n    if (!task.completed) {\r\n      if (!updatedTask.pointsAwarded) {\r\n        newPoints = points + pointsToAddOrDeduct;\r\n        notifications.push(`🎉 +${pointsToAddOrDeduct} Points! Keep it up!`);\r\n        updatedTask.pointsAwarded = true;\r\n      }\r\n\r\n      if (task.hours > 0) {\r\n        logStudyHours(task.hours);\r\n      }\r\n\r\n      const highPriorityTasks = updatedTasks.filter(\r\n        (t) => t.priority === \"High\" && t.completed\r\n      ).length;\r\n      if (highPriorityTasks >= 5 && !badges.includes(\"Priority Master\")) {\r\n        newBadges.push(\"Priority Master\");\r\n        notifications.push(\"🏆 Badge Earned: Priority Master!\");\r\n      }\r\n\r\n      const totalCompletedTasks = updatedTasks.filter(\r\n        (t) => t.completed\r\n      ).length;\r\n      if (totalCompletedTasks >= 10 && !badges.includes(\"Task Titan\")) {\r\n        newBadges.push(\"Task Titan\");\r\n        notifications.push(\"🏆 Badge Earned: Task Titan!\");\r\n      }\r\n\r\n      // Check for Early Bird badge: tasks completed before their due date\r\n      const earlyTasks = updatedTasks.filter(\r\n        (t) => t.completed && t.completedDate && t.dueDate && t.completedDate < t.dueDate\r\n      ).length;\r\n      if (earlyTasks >= 3 && !badges.includes(\"Early Bird\")) {\r\n        newBadges.push(\"Early Bird\");\r\n        notifications.push(\"🏆 Badge Earned: Early Bird!\");\r\n      }\r\n\r\n      updateStreak(today);\r\n    } else {\r\n      if (updatedTask.pointsAwarded) {\r\n        newPoints = points - pointsToAddOrDeduct;\r\n        notifications.push(\r\n          `↩️ -${pointsToAddOrDeduct} Points. Task unmarked as completed.`\r\n        );\r\n        updatedTask.pointsAwarded = false;\r\n      }\r\n\r\n      if (task.hours > 0 && task.completedDate) {\r\n        deductStudyHours(task.hours, task.completedDate);\r\n      }\r\n    }\r\n\r\n    setTasks(updatedTasks);\r\n    setPoints(newPoints);\r\n    setBadges(newBadges);\r\n    notifications.forEach((msg) => toast.success(msg));\r\n  };\r\n\r\n  const updateTask = (updatedTask) => {\r\n    setTasks(\r\n      tasks.map((task) => (task.id === updatedTask.id ? updatedTask : task))\r\n    );\r\n  };\r\n\r\n  // Fix for useEffect with missing dependencies\r\n  useEffect(() => {\r\n    if (studyStats.streak >= 7 && !badges.includes(\"Streak Star\")) {\r\n      let newBadges = [...badges, \"Streak Star\"];\r\n      let newPoints = points + 50;\r\n\r\n      setBadges(newBadges);\r\n      setPoints(newPoints);\r\n\r\n      toast.success(\"🏆 Badge Earned: Streak Star!\");\r\n      toast.success(\"🎉 +50 Points for 7-Day Streak!\");\r\n\r\n      // Save data after awarding streak badge\r\n      const debounceSave = setTimeout(() => {\r\n        saveUserData();\r\n      }, 1000);\r\n\r\n      return () => clearTimeout(debounceSave);\r\n    }\r\n  }, [studyStats.streak, badges, points]); // Added missing dependencies\r\n\r\n  const nextTheme = getNextTheme();\r\n\r\n  return (\r\n    <div className={`min-h-screen flex flex-col ${styles.layoutTheme}`}>\r\n      <ToastContainer />\r\n      <Header\r\n        currentTheme={currentTheme}\r\n        nextTheme={nextTheme}\r\n        onThemeChange={handleThemeChange}\r\n        setActiveTab={setActiveTab}\r\n      />\r\n      <Navigation\r\n        activeTab={activeTab}\r\n        setActiveTab={setActiveTab}\r\n        currentTheme={currentTheme}\r\n      />\r\n      <MainContent\r\n        activeTab={activeTab}\r\n        loading={loading}\r\n        tasks={tasks}\r\n        studyStats={studyStats}\r\n        aiSuggestion={aiSuggestion}\r\n        getStudyTips={getStudyTips}\r\n        generateSchedule={generateSchedule}\r\n        setActiveTab={setActiveTab}\r\n        toggleTaskComplete={toggleTaskComplete}\r\n        currentTheme={currentTheme}\r\n        logStudyHours={logStudyHours}\r\n        deductStudyHours={deductStudyHours}\r\n        addTask={addTask}\r\n        updateTask={updateTask}\r\n        deleteTask={deleteTask}\r\n        points={points}\r\n        badges={badges}\r\n        onPointsUpdate={handlePointsUpdate}\r\n        onThemeUnlock={handleThemeUnlock}\r\n        unlockedThemes={unlockedThemes}\r\n      />\r\n      <Footer currentTheme={currentTheme} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}