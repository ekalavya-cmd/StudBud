{"ast":null,"code":"// Updated aiService.js with enhanced Hugging Face model support\nexport const getStudySuggestion = async ({\n  tasks = [],\n  studyStats = {},\n  customPrompt = \"\"\n} = {}) => {\n  try {\n    console.log(\"ðŸ“± Client: Requesting AI suggestion...\");\n\n    // Make the request to the backend\n    const response = await fetch(\"http://localhost:5000/api/ai-suggestion\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        tasks,\n        studyHabits: studyStats,\n        // Map studyStats to studyHabits to match server.js\n        customPrompt: customPrompt || undefined // Send undefined if customPrompt is empty\n      })\n    });\n    if (!response.ok) {\n      console.error(`ðŸ“± Client: Network response error: ${response.status}`);\n      throw new Error(`Network response was not ok: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.error) {\n      console.error(`ðŸ“± Client: API returned an error: ${data.error}`);\n      throw new Error(data.error);\n    }\n\n    // Log the source of the suggestion (Hugging Face model or local fallback)\n    if (data.meta) {\n      if (data.meta.source === \"huggingface\") {\n        console.log(`ðŸ“± Client: Generated using Hugging Face model: ${data.meta.model}`);\n      } else if (data.meta.source === \"cache\") {\n        console.log(`ðŸ“± Client: Retrieved from cache`);\n      } else {\n        console.log(`ðŸ“± Client: Generated using local fallback`);\n      }\n    }\n    return data.suggestion;\n  } catch (error) {\n    console.error(`ðŸ“± Client: Error getting AI suggestion: ${error.message}`);\n    // In case of error, return a fallback message\n    return \"I'm having trouble generating suggestions right now. Please try again later.\";\n  }\n};","map":{"version":3,"names":["getStudySuggestion","tasks","studyStats","customPrompt","console","log","response","fetch","method","headers","body","JSON","stringify","studyHabits","undefined","ok","error","status","Error","data","json","meta","source","model","suggestion","message"],"sources":["D:/Projects/StudBud/frontend/src/services/aiService.js"],"sourcesContent":["// Updated aiService.js with enhanced Hugging Face model support\r\nexport const getStudySuggestion = async ({\r\n  tasks = [],\r\n  studyStats = {},\r\n  customPrompt = \"\",\r\n} = {}) => {\r\n  try {\r\n    console.log(\"ðŸ“± Client: Requesting AI suggestion...\");\r\n\r\n    // Make the request to the backend\r\n    const response = await fetch(\"http://localhost:5000/api/ai-suggestion\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        tasks,\r\n        studyHabits: studyStats, // Map studyStats to studyHabits to match server.js\r\n        customPrompt: customPrompt || undefined, // Send undefined if customPrompt is empty\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.error(`ðŸ“± Client: Network response error: ${response.status}`);\r\n      throw new Error(`Network response was not ok: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    if (data.error) {\r\n      console.error(`ðŸ“± Client: API returned an error: ${data.error}`);\r\n      throw new Error(data.error);\r\n    }\r\n\r\n    // Log the source of the suggestion (Hugging Face model or local fallback)\r\n    if (data.meta) {\r\n      if (data.meta.source === \"huggingface\") {\r\n        console.log(\r\n          `ðŸ“± Client: Generated using Hugging Face model: ${data.meta.model}`\r\n        );\r\n      } else if (data.meta.source === \"cache\") {\r\n        console.log(`ðŸ“± Client: Retrieved from cache`);\r\n      } else {\r\n        console.log(`ðŸ“± Client: Generated using local fallback`);\r\n      }\r\n    }\r\n\r\n    return data.suggestion;\r\n  } catch (error) {\r\n    console.error(`ðŸ“± Client: Error getting AI suggestion: ${error.message}`);\r\n    // In case of error, return a fallback message\r\n    return \"I'm having trouble generating suggestions right now. Please try again later.\";\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,kBAAkB,GAAG,MAAAA,CAAO;EACvCC,KAAK,GAAG,EAAE;EACVC,UAAU,GAAG,CAAC,CAAC;EACfC,YAAY,GAAG;AACjB,CAAC,GAAG,CAAC,CAAC,KAAK;EACT,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;;IAErD;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;MACtEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBX,KAAK;QACLY,WAAW,EAAEX,UAAU;QAAE;QACzBC,YAAY,EAAEA,YAAY,IAAIW,SAAS,CAAE;MAC3C,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;MAChBX,OAAO,CAACY,KAAK,CAAC,sCAAsCV,QAAQ,CAACW,MAAM,EAAE,CAAC;MACtE,MAAM,IAAIC,KAAK,CAAC,gCAAgCZ,QAAQ,CAACW,MAAM,EAAE,CAAC;IACpE;IAEA,MAAME,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;IAClC,IAAID,IAAI,CAACH,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,qCAAqCG,IAAI,CAACH,KAAK,EAAE,CAAC;MAChE,MAAM,IAAIE,KAAK,CAACC,IAAI,CAACH,KAAK,CAAC;IAC7B;;IAEA;IACA,IAAIG,IAAI,CAACE,IAAI,EAAE;MACb,IAAIF,IAAI,CAACE,IAAI,CAACC,MAAM,KAAK,aAAa,EAAE;QACtClB,OAAO,CAACC,GAAG,CACT,kDAAkDc,IAAI,CAACE,IAAI,CAACE,KAAK,EACnE,CAAC;MACH,CAAC,MAAM,IAAIJ,IAAI,CAACE,IAAI,CAACC,MAAM,KAAK,OAAO,EAAE;QACvClB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAChD,CAAC,MAAM;QACLD,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;MAC1D;IACF;IAEA,OAAOc,IAAI,CAACK,UAAU;EACxB,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,2CAA2CA,KAAK,CAACS,OAAO,EAAE,CAAC;IACzE;IACA,OAAO,8EAA8E;EACvF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}