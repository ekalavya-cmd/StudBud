{"ast":null,"code":"var _jsxFileName = \"D:\\\\study-buddy-planner\\\\src\\\\components\\\\Layout.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BookOpen } from \"lucide-react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSun, faMoon, faWater, faFire, faLeaf } from \"@fortawesome/free-solid-svg-icons\";\nimport Dashboard from \"./Dashboard\";\nimport TaskManager from \"./TaskManager\";\nimport Analytics from \"./Analytics\";\nimport Rewards from \"./Rewards\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { getStudySuggestion } from \"../services/aiService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Layout() {\n  _s();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [tasks, setTasks] = useState([]);\n  const [studyStats, setStudyStats] = useState({\n    totalHours: 0,\n    completedTasks: 0,\n    streak: 0,\n    lastActiveDate: null,\n    lastStreakUpdate: null,\n    studyHoursLog: []\n  });\n  const [aiSuggestion, setAiSuggestion] = useState(\"\");\n  const [points, setPoints] = useState(0);\n  const [badges, setBadges] = useState([]);\n  const [currentTheme, setCurrentTheme] = useState(\"Light Mode\");\n  const [unlockedThemes, setUnlockedThemes] = useState([\"Light Mode\"]);\n  const [loading, setLoading] = useState(true);\n  const userId = \"user123\";\n\n  // Helper function to format the local date as YYYY-MM-DD\n  const getLocalDateString = date => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\n    const day = String(date.getDate()).padStart(2, \"0\");\n    return `${year}-${month}-${day}`;\n  };\n\n  // Theme styles for all themes\n  const themeStyles = {\n    \"Light Mode\": \"bg-gray-100 text-gray-900\",\n    \"Dark Mode\": \"bg-gray-900 text-gray-100\",\n    \"Ocean Breeze\": \"bg-gradient-to-br from-blue-50 to-teal-100 text-blue-900\",\n    \"Sunset Glow\": \"bg-gradient-to-br from-orange-50 to-pink-100 text-orange-900 backdrop-blur-sm\",\n    \"Forest Whisper\": \"bg-gradient-to-br from-green-50 to-emerald-100 text-green-900 backdrop-blur-sm\"\n  };\n  const headerStyles = {\n    \"Light Mode\": \"bg-indigo-600 text-white shadow-lg\",\n    \"Dark Mode\": \"bg-indigo-900 text-gray-100 shadow-lg\",\n    \"Ocean Breeze\": \"bg-gradient-to-r from-blue-600 to-teal-600 text-white shadow-lg\",\n    \"Sunset Glow\": \"bg-gradient-to-r from-orange-600 to-pink-600 text-white shadow-lg\",\n    \"Forest Whisper\": \"bg-gradient-to-r from-green-600 to-teal-600 text-white shadow-lg\"\n  };\n  const navStyles = {\n    \"Light Mode\": \"bg-white text-gray-600 border-b border-gray-200\",\n    \"Dark Mode\": \"bg-gray-800 text-gray-300 border-b border-gray-700\",\n    \"Ocean Breeze\": \"bg-blue-100 text-blue-800 border-b border-teal-300\",\n    \"Sunset Glow\": \"bg-orange-50 text-orange-800 border-b border-orange-300\",\n    \"Forest Whisper\": \"bg-green-50 text-green-800 border-b border-green-300\"\n  };\n\n  // Map themes to their FontAwesome icons\n  const themeIcons = {\n    \"Light Mode\": faSun,\n    \"Dark Mode\": faMoon,\n    \"Ocean Breeze\": faWater,\n    \"Sunset Glow\": faFire,\n    \"Forest Whisper\": faLeaf\n  };\n  const getNextTheme = () => {\n    if (unlockedThemes.length === 1) {\n      return \"Light Mode\";\n    }\n    const currentIndex = unlockedThemes.indexOf(currentTheme);\n    const nextIndex = (currentIndex + 1) % unlockedThemes.length;\n    return unlockedThemes[nextIndex];\n  };\n  const handleThemeChange = () => {\n    const nextTheme = getNextTheme();\n    setCurrentTheme(nextTheme);\n    toast.info(`🎨 Switched to ${nextTheme}!`);\n  };\n  const handlePointsUpdate = newPoints => {\n    setPoints(newPoints);\n  };\n  const handleThemeUnlock = themeName => {\n    if (!unlockedThemes.includes(themeName)) {\n      setUnlockedThemes([...unlockedThemes, themeName]);\n    }\n  };\n  const updateStreak = today => {\n    setStudyStats(prev => {\n      const lastActive = prev.lastActiveDate ? new Date(prev.lastActiveDate) : null;\n      const lastStreakUpdate = prev.lastStreakUpdate ? new Date(prev.lastStreakUpdate) : null;\n      const todayDate = new Date(today);\n      let newStreak = prev.streak;\n      let newLastActiveDate = today;\n      let newLastStreakUpdate = prev.lastStreakUpdate;\n      if (!lastActive || lastActive.toISOString().split(\"T\")[0] !== today) {\n        if (lastActive) {\n          const diffTime = todayDate - lastActive;\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          if (diffDays === 1) {\n            newStreak = prev.streak + 1;\n            newLastStreakUpdate = today;\n          } else if (diffDays > 1) {\n            newStreak = 1;\n            newLastStreakUpdate = today;\n          }\n        } else {\n          newStreak = 1;\n          newLastStreakUpdate = today;\n        }\n      }\n      if (lastStreakUpdate && new Date(lastStreakUpdate).toISOString().split(\"T\")[0] !== today) {\n        const diffTime = todayDate - new Date(lastStreakUpdate);\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        if (diffDays > 1) {\n          newStreak = 1;\n          newLastStreakUpdate = today;\n        }\n      }\n      const newStats = {\n        ...prev,\n        streak: newStreak,\n        lastActiveDate: newLastActiveDate,\n        lastStreakUpdate: newLastStreakUpdate,\n        studyHoursLog: prev.studyHoursLog || []\n      };\n      return newStats;\n    });\n  };\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        var _data$studyStats, _data$studyStats2, _data$studyStats3, _data$studyStats4, _data$studyStats5, _data$studyStats6;\n        const response = await fetch(`http://localhost:5000/api/user/${userId}`);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch user data: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Ensure tasks have pointsAwarded and hours properties\n        const fetchedTasks = (data.tasks || []).map(task => {\n          var _task$pointsAwarded, _task$hours;\n          return {\n            ...task,\n            pointsAwarded: (_task$pointsAwarded = task.pointsAwarded) !== null && _task$pointsAwarded !== void 0 ? _task$pointsAwarded : false,\n            hours: (_task$hours = task.hours) !== null && _task$hours !== void 0 ? _task$hours : 0\n          };\n        });\n        setTasks(fetchedTasks);\n        const fetchedStats = {\n          totalHours: ((_data$studyStats = data.studyStats) === null || _data$studyStats === void 0 ? void 0 : _data$studyStats.totalHours) || 0,\n          completedTasks: ((_data$studyStats2 = data.studyStats) === null || _data$studyStats2 === void 0 ? void 0 : _data$studyStats2.completedTasks) || 0,\n          streak: ((_data$studyStats3 = data.studyStats) === null || _data$studyStats3 === void 0 ? void 0 : _data$studyStats3.streak) || 0,\n          lastActiveDate: ((_data$studyStats4 = data.studyStats) === null || _data$studyStats4 === void 0 ? void 0 : _data$studyStats4.lastActiveDate) || null,\n          lastStreakUpdate: ((_data$studyStats5 = data.studyStats) === null || _data$studyStats5 === void 0 ? void 0 : _data$studyStats5.lastStreakUpdate) || null,\n          studyHoursLog: ((_data$studyStats6 = data.studyStats) === null || _data$studyStats6 === void 0 ? void 0 : _data$studyStats6.studyHoursLog) || []\n        };\n        setStudyStats(fetchedStats);\n        setPoints(data.points || 0);\n        setBadges(data.badges || []);\n        setCurrentTheme(data.currentTheme || \"Light Mode\");\n        setUnlockedThemes(data.unlockedThemes || [\"Light Mode\"]);\n        const today = getLocalDateString(new Date());\n        const {\n          lastActiveDate,\n          streak,\n          lastStreakUpdate\n        } = fetchedStats;\n        let newStats = {\n          ...fetchedStats\n        };\n        if (lastStreakUpdate !== today) {\n          if (!lastActiveDate) {\n            newStats = {\n              ...fetchedStats,\n              lastActiveDate: today,\n              lastStreakUpdate: today,\n              studyHoursLog: fetchedStats.studyHoursLog || []\n            };\n          } else {\n            const lastDate = new Date(lastActiveDate);\n            const currentDate = new Date(today);\n            const diffDays = (currentDate - lastDate) / (1000 * 60 * 60 * 24);\n            if (diffDays === 1) {\n              newStats = {\n                ...fetchedStats,\n                streak: fetchedStats.streak + 1,\n                lastActiveDate: today,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n            } else if (diffDays > 1) {\n              newStats = {\n                ...fetchedStats,\n                streak: 0,\n                lastActiveDate: today,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n            } else {\n              newStats = {\n                ...fetchedStats,\n                lastStreakUpdate: today,\n                studyHoursLog: fetchedStats.studyHoursLog || []\n              };\n            }\n          }\n          setStudyStats(newStats);\n        }\n        const lastFetchTimestamp = localStorage.getItem(\"lastFetchTimestamp\");\n        const currentTimestamp = Date.now();\n        localStorage.setItem(\"lastFetchTimestamp\", currentTimestamp.toString());\n        const lastActive = fetchedStats.lastActiveDate ? new Date(fetchedStats.lastActiveDate).getTime() : 0;\n        const timeSinceLastFetch = lastFetchTimestamp ? currentTimestamp - parseInt(lastFetchTimestamp) : Infinity;\n        const timeSinceLastActive = lastActive ? currentTimestamp - lastActive : Infinity;\n        setTimeout(async () => {\n          const incompleteTasks = fetchedTasks.filter(task => !task.completed);\n          if (incompleteTasks.length === 0) {\n            setAiSuggestion(\"You have no incomplete tasks! Add a new task to keep progressing.\");\n            return;\n          }\n          try {\n            const suggestion = await getStudySuggestion({\n              tasks: fetchedTasks,\n              studyStats: fetchedStats\n            });\n            setAiSuggestion(suggestion);\n          } catch (error) {\n            setAiSuggestion(\"Failed to fetch AI suggestion. Please try again later.\");\n          }\n        }, 1000);\n        setLoading(false);\n      } catch (err) {\n        toast.error(\"Failed to load user data. Please try again later.\");\n        setAiSuggestion(\"Add a new task to get started!\");\n        setLoading(false);\n      }\n    };\n    fetchUserData();\n  }, []);\n  useEffect(() => {\n    const completedCount = tasks.filter(task => task.completed).length;\n    setStudyStats(prevStats => {\n      const newStats = {\n        ...prevStats,\n        completedTasks: completedCount,\n        studyHoursLog: prevStats.studyHoursLog || []\n      };\n      return newStats;\n    });\n  }, [tasks]);\n  useEffect(() => {\n    const saveUserData = async () => {\n      try {\n        const serializedStudyStats = {\n          totalHours: studyStats.totalHours,\n          completedTasks: studyStats.completedTasks,\n          streak: studyStats.streak,\n          lastActiveDate: studyStats.lastActiveDate || null,\n          lastStreakUpdate: studyStats.lastStreakUpdate || null,\n          studyHoursLog: studyStats.studyHoursLog || []\n        };\n        const dataToSend = {\n          tasks,\n          studyStats: serializedStudyStats,\n          points,\n          badges,\n          themes: [\"Light Mode\", \"Dark Mode\", \"Ocean Breeze\", \"Sunset Glow\", \"Forest Whisper\"],\n          currentTheme,\n          unlockedThemes\n        };\n        const response = await fetch(`http://localhost:5000/api/user/${userId}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(dataToSend)\n        });\n        if (!response.ok) {\n          throw new Error(`Failed to save user data: ${response.status} - ${await response.text()}`);\n        }\n      } catch (err) {\n        toast.error(`Failed to save progress: ${err.message}`);\n      }\n    };\n    const debounceSave = setTimeout(() => {\n      saveUserData();\n    }, 1000);\n    return () => clearTimeout(debounceSave);\n  }, [tasks, studyStats, points, badges, currentTheme, unlockedThemes]);\n  const logStudyHours = hours => {\n    const parsedHours = parseFloat(hours);\n    if (isNaN(parsedHours) || parsedHours <= 0) {\n      toast.error(\"Please enter a valid number of hours greater than 0.\");\n      return;\n    }\n    const roundedHours = Math.round(parsedHours * 100) / 100;\n    const today = getLocalDateString(new Date());\n    setStudyStats(prev => {\n      const studyHoursLog = prev.studyHoursLog || [];\n      const existingLog = studyHoursLog.find(log => log.date === today);\n      let updatedLog;\n      if (existingLog) {\n        updatedLog = studyHoursLog.map(log => log.date === today ? {\n          ...log,\n          hours: Math.round((log.hours + roundedHours) * 100) / 100\n        } : log);\n      } else {\n        updatedLog = [...studyHoursLog, {\n          date: today,\n          hours: roundedHours\n        }];\n      }\n      const newStats = {\n        ...prev,\n        totalHours: Math.round((prev.totalHours + roundedHours) * 100) / 100,\n        studyHoursLog: updatedLog\n      };\n      return newStats;\n    });\n    updateStreak(today);\n  };\n  const deductStudyHours = (hours, completedDate) => {\n    const parsedHours = parseFloat(hours);\n    if (isNaN(parsedHours) || parsedHours <= 0) return;\n    const roundedHours = Math.round(parsedHours * 100) / 100;\n    setStudyStats(prev => {\n      const studyHoursLog = prev.studyHoursLog || [];\n      const logDate = completedDate;\n      const existingLog = studyHoursLog.find(log => log.date === logDate);\n      let updatedLog;\n      if (existingLog) {\n        const newHours = Math.max(0, existingLog.hours - roundedHours);\n        updatedLog = studyHoursLog.map(log => log.date === logDate ? {\n          ...log,\n          hours: Math.round(newHours * 100) / 100\n        } : log).filter(log => log.hours > 0);\n      } else {\n        updatedLog = studyHoursLog;\n      }\n      const newTotalHours = Math.max(0, prev.totalHours - roundedHours);\n      const newStats = {\n        ...prev,\n        totalHours: Math.round(newTotalHours * 100) / 100,\n        studyHoursLog: updatedLog\n      };\n      return newStats;\n    });\n  };\n  const getStudyTips = async () => {\n    setAiSuggestion(\"Loading a fresh study tip...\");\n    try {\n      const timestamp = Date.now(); // Add timestamp to ensure cache miss\n      const prompt = {\n        tasks: [],\n        studyStats: {},\n        customPrompt: `You are an AI study assistant for students across all subjects, focusing on improving learning efficiency. Generate a single concise study tip (2-3 sentences) that is clear, actionable, and applicable to any subject. Format the tip as follows:\n\nHere's a study tip for students:\n\n- [A clear, actionable study tip that improves learning efficiency]\n\n**Instructions:**\n- **Objective**: Clearly state what the tip aims to improve (e.g., memory retention, focus, time management).\n- **Actionable Advice**: Provide a specific action (e.g., \"Use the Pomodoro Technique: study for 25 minutes, then take a 5-minute break\").\n- **Scientific/Practical Basis**: Include evidence or reasoning (e.g., \"Spaced repetition helps move knowledge from short-term to long-term memory\").\n- **Context/Applicability**: Mention when or for whom the tip works best (e.g., \"Best for preparing over weeks, not cramming\").\n- **Examples (Optional)**: Include a brief example if it clarifies the tip (e.g., \"For instance, review your notes 1 day, 1 week, and 1 month after learning\").\n- **Flexibility/Alternatives**: Suggest variations for different learning styles (e.g., \"Visual learners can use mind maps instead\").\n- **Simplicity**: Keep the tip concise and easy to implement.\n- Ensure variety by focusing on a different aspect of learning each time (e.g., alternate between memory retention, focus, time management, comprehension, etc.).\n- Do NOT start the tip with \"Practice coding daily\" or any repetitive phrase.\n- Do not include additional sections like \"General Study Tip\" or \"Habits\".\n\n**Examples of well-structured tips:**\n- To improve focus, use the Pomodoro Technique: study for 25 minutes, then take a 5-minute break to recharge. This method leverages the brain's natural attention span to boost productivity, as supported by attention span research. Best for students who struggle with distractions during long study sessions; if you prefer longer intervals, try 50-minute study blocks with 10-minute breaks.\n- Enhance memory retention by using spaced repetition: review your material at increasing intervals, such as 1 day, 1 week, and 1 month after learning. This technique strengthens neural connections over time, as shown by cognitive science studies. Ideal for long-term exam preparation, not last-minute cramming—for visual learners, use flashcards with images.\n\n(Request ID: ${timestamp})`\n      };\n      const suggestion = await getStudySuggestion(prompt);\n      setAiSuggestion(suggestion);\n    } catch (error) {\n      console.error(\"Error fetching study tip:\", error);\n      setAiSuggestion(\"Failed to fetch study tip. Please try again later.\");\n    }\n  };\n  const generateSchedule = async () => {\n    setAiSuggestion(\"Generating your progress report...\");\n    try {\n      var _studyStats$studyHour;\n      const today = getLocalDateString(new Date());\n      const todayStudyHours = ((_studyStats$studyHour = studyStats.studyHoursLog.find(log => log.date === today)) === null || _studyStats$studyHour === void 0 ? void 0 : _studyStats$studyHour.hours) || 0;\n      const tasksCompletedToday = tasks.filter(task => task.completed && task.completedDate === today).length;\n      const currentStreak = studyStats.streak || 0;\n      const prompt = {\n        tasks: [],\n        studyStats: {\n          todayStudyHours,\n          tasksCompletedToday\n        },\n        customPrompt: `Generate a short motivational message (1-2 sentences) for a student who has studied for ${todayStudyHours} hours today and completed ${tasksCompletedToday} tasks. Encourage them to keep up their progress in their studies.`\n      };\n      const motivationalMessage = await getStudySuggestion(prompt);\n      const progressMessage = `Here’s your progress for today (${today}):\\n\\n- Total Study Hours Today: ${todayStudyHours} hour${todayStudyHours !== 1 ? \"s\" : \"\"}\\n- Tasks Completed Today: ${tasksCompletedToday}\\n- Your current streak is ${currentStreak} day${currentStreak !== 1 ? \"s\" : \"\"}\\n\\n${motivationalMessage}`;\n      setAiSuggestion(progressMessage);\n    } catch (error) {\n      console.error(\"Error generating progress report:\", error);\n      setAiSuggestion(\"Failed to generate progress report. Please try again later.\");\n    }\n  };\n  const addTask = newTask => {\n    const task = {\n      id: Date.now(),\n      ...newTask,\n      completedDate: null,\n      pointsAwarded: false,\n      hours: newTask.hours || 0\n    };\n    setTasks([...tasks, task]);\n  };\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n  const toggleTaskComplete = id => {\n    const task = tasks.find(task => task.id === id);\n    if (!task) return;\n    const today = getLocalDateString(new Date());\n    let newPoints = points;\n    let newBadges = [...badges];\n    let notifications = [];\n    const updatedTasks = tasks.map(t => t.id === id ? {\n      ...t,\n      completed: !t.completed,\n      completedDate: !t.completed ? today : null,\n      pointsAwarded: t.pointsAwarded\n    } : t);\n    const updatedTask = updatedTasks.find(t => t.id === id);\n    const pointsToAddOrDeduct = task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\n    if (!task.completed) {\n      if (!updatedTask.pointsAwarded) {\n        newPoints = points + pointsToAddOrDeduct;\n        notifications.push(`🎉 +${pointsToAddOrDeduct} Points! Keep it up!`);\n        updatedTask.pointsAwarded = true;\n      }\n      if (task.hours > 0) {\n        logStudyHours(task.hours);\n      }\n      const highPriorityTasks = updatedTasks.filter(t => t.priority === \"High\" && t.completed).length;\n      if (highPriorityTasks >= 5 && !badges.includes(\"Priority Master\")) {\n        newBadges.push(\"Priority Master\");\n        notifications.push(\"🏆 Badge Earned: Priority Master!\");\n      }\n      const totalCompletedTasks = updatedTasks.filter(t => t.completed).length;\n      if (totalCompletedTasks >= 10 && !badges.includes(\"Task Titan\")) {\n        newBadges.push(\"Task Titan\");\n        notifications.push(\"🏆 Badge Earned: Task Titan!\");\n      }\n      const dueDate = new Date(task.dueDate);\n      const todayDate = new Date();\n      if (dueDate > todayDate) {\n        const earlyTasks = updatedTasks.filter(t => new Date(t.dueDate) > todayDate && t.completed).length;\n        if (earlyTasks >= 3 && !badges.includes(\"Early Bird\")) {\n          newBadges.push(\"Early Bird\");\n          notifications.push(\"🏆 Badge Earned: Early Bird!\");\n        }\n      }\n      updateStreak(today);\n    } else {\n      if (updatedTask.pointsAwarded) {\n        newPoints = points - pointsToAddOrDeduct;\n        notifications.push(`↩️ -${pointsToAddOrDeduct} Points. Task unmarked as completed.`);\n        updatedTask.pointsAwarded = false;\n      }\n      if (task.hours > 0 && task.completedDate) {\n        deductStudyHours(task.hours, task.completedDate);\n      }\n    }\n    setTasks(updatedTasks);\n    setPoints(newPoints);\n    setBadges(newBadges);\n    notifications.forEach(msg => toast.success(msg));\n  };\n  const updateTask = updatedTask => {\n    setTasks(tasks.map(task => task.id === updatedTask.id ? updatedTask : task));\n  };\n  useEffect(() => {\n    if (studyStats.streak >= 7 && !badges.includes(\"Streak Star\")) {\n      let newBadges = [...badges, \"Streak Star\"];\n      let newPoints = points + 50;\n      setBadges(newBadges);\n      setPoints(newPoints);\n      toast.success(\"🏆 Badge Earned: Streak Star!\");\n      toast.success(\"🎉 +50 Points for 7-Day Streak!\");\n    }\n  }, [studyStats.streak]);\n  const nextTheme = getNextTheme();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `min-h-screen flex flex-col ${themeStyles[currentTheme]}`,\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: `p-4 ${headerStyles[currentTheme]}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-2xl font-bold flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(BookOpen, {\n              className: \"w-8 h-8 mr-3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 621,\n              columnNumber: 15\n            }, this), \"StudyBuddy AI Planner\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleThemeChange,\n            className: \"text-2xl p-2 rounded-full transition-all duration-200 hover:scale-110\",\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: themeIcons[nextTheme]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 628,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `px-4 py-2 rounded-lg text-sm font-medium ${currentTheme === \"Dark Mode\" ? \"bg-indigo-800 text-gray-200\" : \"bg-white bg-opacity-20 text-white\"}`,\n          children: new Date().toLocaleDateString(\"en-US\", {\n            weekday: \"long\",\n            year: \"numeric\",\n            month: \"long\",\n            day: \"numeric\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n      className: `sticky top-0 z-10 ${navStyles[currentTheme]}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-around md:justify-start md:space-x-8\",\n          children: [\"dashboard\", \"tasks\", \"analytics\", \"rewards\"].map(tab => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveTab(tab),\n            className: `px-4 py-3 font-semibold text-sm transition-all duration-300 relative ${activeTab === tab ? currentTheme === \"Dark Mode\" ? \"text-indigo-400 border-b-2 border-indigo-400\" : currentTheme === \"Ocean Breeze\" ? \"text-teal-600 border-b-2 border-teal-600\" : currentTheme === \"Sunset Glow\" ? \"text-orange-600 border-b-2 border-orange-600\" : currentTheme === \"Forest Whisper\" ? \"text-green-600 border-b-2 border-green-600\" : \"text-indigo-600 border-b-2 border-indigo-600\" : currentTheme === \"Dark Mode\" ? \"text-gray-400 hover:text-gray-200\" : currentTheme === \"Ocean Breeze\" ? \"text-blue-700 hover:text-teal-600\" : currentTheme === \"Sunset Glow\" ? \"text-orange-700 hover:text-orange-600\" : currentTheme === \"Forest Whisper\" ? \"text-green-700 hover:text-green-600\" : \"text-gray-600 hover:text-gray-800\"}`,\n            children: [tab.charAt(0).toUpperCase() + tab.slice(1), activeTab === tab && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"absolute inset-x-0 bottom-0 h-0.5 bg-current transform scale-x-100 transition-transform duration-300\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 679,\n              columnNumber: 19\n            }, this)]\n          }, tab, true, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex-grow container mx-auto p-4\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center py-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-pulse flex justify-center space-x-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-5 h-5 rounded-full ${currentTheme === \"Dark Mode\" ? \"bg-indigo-500\" : currentTheme === \"Ocean Breeze\" ? \"bg-teal-500\" : currentTheme === \"Sunset Glow\" ? \"bg-orange-500\" : currentTheme === \"Forest Whisper\" ? \"bg-green-500\" : \"bg-indigo-600\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-5 h-5 rounded-full ${currentTheme === \"Dark Mode\" ? \"bg-indigo-500\" : currentTheme === \"Ocean Breeze\" ? \"bg-teal-500\" : currentTheme === \"Sunset Glow\" ? \"bg-orange-500\" : currentTheme === \"Forest Whisper\" ? \"bg-green-500\" : \"bg-indigo-600\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-5 h-5 rounded-full ${currentTheme === \"Dark Mode\" ? \"bg-indigo-500\" : currentTheme === \"Ocean Breeze\" ? \"bg-teal-500\" : currentTheme === \"Sunset Glow\" ? \"bg-orange-500\" : currentTheme === \"Forest Whisper\" ? \"bg-green-500\" : \"bg-indigo-600\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `mt-3 text-sm font-medium ${currentTheme === \"Dark Mode\" ? \"text-gray-400\" : currentTheme === \"Ocean Breeze\" ? \"text-blue-700\" : currentTheme === \"Sunset Glow\" ? \"text-orange-700\" : currentTheme === \"Forest Whisper\" ? \"text-green-700\" : \"text-gray-600\"}`,\n          children: \"Loading your study data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-6\",\n        children: [activeTab === \"dashboard\" && /*#__PURE__*/_jsxDEV(Dashboard, {\n          tasks: tasks,\n          studyStats: studyStats,\n          aiSuggestion: aiSuggestion,\n          getStudyTips: getStudyTips,\n          generateSchedule: generateSchedule,\n          setActiveTab: setActiveTab,\n          toggleTaskComplete: toggleTaskComplete,\n          currentTheme: currentTheme,\n          logStudyHours: logStudyHours\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 15\n        }, this), activeTab === \"tasks\" && /*#__PURE__*/_jsxDEV(TaskManager, {\n          tasks: tasks,\n          addTask: addTask,\n          updateTask: updateTask,\n          deleteTask: deleteTask,\n          toggleTaskComplete: toggleTaskComplete,\n          currentTheme: currentTheme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 15\n        }, this), activeTab === \"analytics\" && /*#__PURE__*/_jsxDEV(Analytics, {\n          tasks: tasks,\n          currentTheme: currentTheme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 15\n        }, this), activeTab === \"rewards\" && /*#__PURE__*/_jsxDEV(Rewards, {\n          points: points,\n          badges: badges,\n          studyStats: studyStats,\n          currentTheme: currentTheme,\n          onPointsUpdate: handlePointsUpdate,\n          onThemeUnlock: handleThemeUnlock,\n          unlockedThemes: unlockedThemes,\n          tasks: tasks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 748,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: `py-4 ${themeStyles[currentTheme]}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mx-auto text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `text-sm ${currentTheme === \"Dark Mode\" ? \"text-gray-500\" : currentTheme === \"Ocean Breeze\" ? \"text-blue-700\" : currentTheme === \"Sunset Glow\" ? \"text-orange-700\" : currentTheme === \"Forest Whisper\" ? \"text-green-700\" : \"text-gray-600\"}`,\n          children: \"\\xA9 2025 StudyBuddy AI Planner. All rights reserved.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 796,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 794,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 615,\n    columnNumber: 5\n  }, this);\n}\n_s(Layout, \"tsctxzW6qYlIqsFgXUhO+2ye8IA=\");\n_c = Layout;\nexport default Layout;\nvar _c;\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"names":["React","useState","useEffect","BookOpen","FontAwesomeIcon","faSun","faMoon","faWater","faFire","faLeaf","Dashboard","TaskManager","Analytics","Rewards","ToastContainer","toast","getStudySuggestion","jsxDEV","_jsxDEV","Layout","_s","activeTab","setActiveTab","tasks","setTasks","studyStats","setStudyStats","totalHours","completedTasks","streak","lastActiveDate","lastStreakUpdate","studyHoursLog","aiSuggestion","setAiSuggestion","points","setPoints","badges","setBadges","currentTheme","setCurrentTheme","unlockedThemes","setUnlockedThemes","loading","setLoading","userId","getLocalDateString","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","themeStyles","headerStyles","navStyles","themeIcons","getNextTheme","length","currentIndex","indexOf","nextIndex","handleThemeChange","nextTheme","info","handlePointsUpdate","newPoints","handleThemeUnlock","themeName","includes","updateStreak","today","prev","lastActive","Date","todayDate","newStreak","newLastActiveDate","newLastStreakUpdate","toISOString","split","diffTime","diffDays","Math","ceil","newStats","fetchUserData","_data$studyStats","_data$studyStats2","_data$studyStats3","_data$studyStats4","_data$studyStats5","_data$studyStats6","response","fetch","ok","Error","status","data","json","fetchedTasks","map","task","_task$pointsAwarded","_task$hours","pointsAwarded","hours","fetchedStats","lastDate","currentDate","lastFetchTimestamp","localStorage","getItem","currentTimestamp","now","setItem","toString","getTime","timeSinceLastFetch","parseInt","Infinity","timeSinceLastActive","setTimeout","incompleteTasks","filter","completed","suggestion","error","err","completedCount","prevStats","saveUserData","serializedStudyStats","dataToSend","themes","method","headers","body","JSON","stringify","text","message","debounceSave","clearTimeout","logStudyHours","parsedHours","parseFloat","isNaN","roundedHours","round","existingLog","find","log","updatedLog","deductStudyHours","completedDate","logDate","newHours","max","newTotalHours","getStudyTips","timestamp","prompt","customPrompt","console","generateSchedule","_studyStats$studyHour","todayStudyHours","tasksCompletedToday","currentStreak","motivationalMessage","progressMessage","addTask","newTask","id","deleteTask","toggleTaskComplete","newBadges","notifications","updatedTasks","t","updatedTask","pointsToAddOrDeduct","priority","push","highPriorityTasks","totalCompletedTasks","dueDate","earlyTasks","forEach","msg","success","updateTask","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","icon","toLocaleDateString","weekday","tab","charAt","toUpperCase","slice","onPointsUpdate","onThemeUnlock","_c","$RefreshReg$"],"sources":["D:/study-buddy-planner/src/components/Layout.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { BookOpen } from \"lucide-react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faSun,\r\n  faMoon,\r\n  faWater,\r\n  faFire,\r\n  faLeaf,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport TaskManager from \"./TaskManager\";\r\nimport Analytics from \"./Analytics\";\r\nimport Rewards from \"./Rewards\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { getStudySuggestion } from \"../services/aiService\";\r\n\r\nfunction Layout() {\r\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\r\n  const [tasks, setTasks] = useState([]);\r\n  const [studyStats, setStudyStats] = useState({\r\n    totalHours: 0,\r\n    completedTasks: 0,\r\n    streak: 0,\r\n    lastActiveDate: null,\r\n    lastStreakUpdate: null,\r\n    studyHoursLog: [],\r\n  });\r\n  const [aiSuggestion, setAiSuggestion] = useState(\"\");\r\n  const [points, setPoints] = useState(0);\r\n  const [badges, setBadges] = useState([]);\r\n  const [currentTheme, setCurrentTheme] = useState(\"Light Mode\");\r\n  const [unlockedThemes, setUnlockedThemes] = useState([\"Light Mode\"]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const userId = \"user123\";\r\n\r\n  // Helper function to format the local date as YYYY-MM-DD\r\n  const getLocalDateString = (date) => {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  // Theme styles for all themes\r\n  const themeStyles = {\r\n    \"Light Mode\": \"bg-gray-100 text-gray-900\",\r\n    \"Dark Mode\": \"bg-gray-900 text-gray-100\",\r\n    \"Ocean Breeze\": \"bg-gradient-to-br from-blue-50 to-teal-100 text-blue-900\",\r\n    \"Sunset Glow\":\r\n      \"bg-gradient-to-br from-orange-50 to-pink-100 text-orange-900 backdrop-blur-sm\",\r\n    \"Forest Whisper\":\r\n      \"bg-gradient-to-br from-green-50 to-emerald-100 text-green-900 backdrop-blur-sm\",\r\n  };\r\n\r\n  const headerStyles = {\r\n    \"Light Mode\": \"bg-indigo-600 text-white shadow-lg\",\r\n    \"Dark Mode\": \"bg-indigo-900 text-gray-100 shadow-lg\",\r\n    \"Ocean Breeze\":\r\n      \"bg-gradient-to-r from-blue-600 to-teal-600 text-white shadow-lg\",\r\n    \"Sunset Glow\":\r\n      \"bg-gradient-to-r from-orange-600 to-pink-600 text-white shadow-lg\",\r\n    \"Forest Whisper\":\r\n      \"bg-gradient-to-r from-green-600 to-teal-600 text-white shadow-lg\",\r\n  };\r\n\r\n  const navStyles = {\r\n    \"Light Mode\": \"bg-white text-gray-600 border-b border-gray-200\",\r\n    \"Dark Mode\": \"bg-gray-800 text-gray-300 border-b border-gray-700\",\r\n    \"Ocean Breeze\": \"bg-blue-100 text-blue-800 border-b border-teal-300\",\r\n    \"Sunset Glow\": \"bg-orange-50 text-orange-800 border-b border-orange-300\",\r\n    \"Forest Whisper\": \"bg-green-50 text-green-800 border-b border-green-300\",\r\n  };\r\n\r\n  // Map themes to their FontAwesome icons\r\n  const themeIcons = {\r\n    \"Light Mode\": faSun,\r\n    \"Dark Mode\": faMoon,\r\n    \"Ocean Breeze\": faWater,\r\n    \"Sunset Glow\": faFire,\r\n    \"Forest Whisper\": faLeaf,\r\n  };\r\n\r\n  const getNextTheme = () => {\r\n    if (unlockedThemes.length === 1) {\r\n      return \"Light Mode\";\r\n    }\r\n    const currentIndex = unlockedThemes.indexOf(currentTheme);\r\n    const nextIndex = (currentIndex + 1) % unlockedThemes.length;\r\n    return unlockedThemes[nextIndex];\r\n  };\r\n\r\n  const handleThemeChange = () => {\r\n    const nextTheme = getNextTheme();\r\n    setCurrentTheme(nextTheme);\r\n    toast.info(`🎨 Switched to ${nextTheme}!`);\r\n  };\r\n\r\n  const handlePointsUpdate = (newPoints) => {\r\n    setPoints(newPoints);\r\n  };\r\n\r\n  const handleThemeUnlock = (themeName) => {\r\n    if (!unlockedThemes.includes(themeName)) {\r\n      setUnlockedThemes([...unlockedThemes, themeName]);\r\n    }\r\n  };\r\n\r\n  const updateStreak = (today) => {\r\n    setStudyStats((prev) => {\r\n      const lastActive = prev.lastActiveDate\r\n        ? new Date(prev.lastActiveDate)\r\n        : null;\r\n      const lastStreakUpdate = prev.lastStreakUpdate\r\n        ? new Date(prev.lastStreakUpdate)\r\n        : null;\r\n      const todayDate = new Date(today);\r\n\r\n      let newStreak = prev.streak;\r\n      let newLastActiveDate = today;\r\n      let newLastStreakUpdate = prev.lastStreakUpdate;\r\n\r\n      if (!lastActive || lastActive.toISOString().split(\"T\")[0] !== today) {\r\n        if (lastActive) {\r\n          const diffTime = todayDate - lastActive;\r\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n          if (diffDays === 1) {\r\n            newStreak = prev.streak + 1;\r\n            newLastStreakUpdate = today;\r\n          } else if (diffDays > 1) {\r\n            newStreak = 1;\r\n            newLastStreakUpdate = today;\r\n          }\r\n        } else {\r\n          newStreak = 1;\r\n          newLastStreakUpdate = today;\r\n        }\r\n      }\r\n\r\n      if (\r\n        lastStreakUpdate &&\r\n        new Date(lastStreakUpdate).toISOString().split(\"T\")[0] !== today\r\n      ) {\r\n        const diffTime = todayDate - new Date(lastStreakUpdate);\r\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n        if (diffDays > 1) {\r\n          newStreak = 1;\r\n          newLastStreakUpdate = today;\r\n        }\r\n      }\r\n\r\n      const newStats = {\r\n        ...prev,\r\n        streak: newStreak,\r\n        lastActiveDate: newLastActiveDate,\r\n        lastStreakUpdate: newLastStreakUpdate,\r\n        studyHoursLog: prev.studyHoursLog || [],\r\n      };\r\n      return newStats;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:5000/api/user/${userId}`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to fetch user data: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n\r\n        // Ensure tasks have pointsAwarded and hours properties\r\n        const fetchedTasks = (data.tasks || []).map((task) => ({\r\n          ...task,\r\n          pointsAwarded: task.pointsAwarded ?? false,\r\n          hours: task.hours ?? 0,\r\n        }));\r\n        setTasks(fetchedTasks);\r\n\r\n        const fetchedStats = {\r\n          totalHours: data.studyStats?.totalHours || 0,\r\n          completedTasks: data.studyStats?.completedTasks || 0,\r\n          streak: data.studyStats?.streak || 0,\r\n          lastActiveDate: data.studyStats?.lastActiveDate || null,\r\n          lastStreakUpdate: data.studyStats?.lastStreakUpdate || null,\r\n          studyHoursLog: data.studyStats?.studyHoursLog || [],\r\n        };\r\n        setStudyStats(fetchedStats);\r\n        setPoints(data.points || 0);\r\n        setBadges(data.badges || []);\r\n        setCurrentTheme(data.currentTheme || \"Light Mode\");\r\n        setUnlockedThemes(data.unlockedThemes || [\"Light Mode\"]);\r\n\r\n        const today = getLocalDateString(new Date());\r\n        const { lastActiveDate, streak, lastStreakUpdate } = fetchedStats;\r\n\r\n        let newStats = { ...fetchedStats };\r\n        if (lastStreakUpdate !== today) {\r\n          if (!lastActiveDate) {\r\n            newStats = {\r\n              ...fetchedStats,\r\n              lastActiveDate: today,\r\n              lastStreakUpdate: today,\r\n              studyHoursLog: fetchedStats.studyHoursLog || [],\r\n            };\r\n          } else {\r\n            const lastDate = new Date(lastActiveDate);\r\n            const currentDate = new Date(today);\r\n            const diffDays = (currentDate - lastDate) / (1000 * 60 * 60 * 24);\r\n\r\n            if (diffDays === 1) {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                streak: fetchedStats.streak + 1,\r\n                lastActiveDate: today,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n            } else if (diffDays > 1) {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                streak: 0,\r\n                lastActiveDate: today,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n            } else {\r\n              newStats = {\r\n                ...fetchedStats,\r\n                lastStreakUpdate: today,\r\n                studyHoursLog: fetchedStats.studyHoursLog || [],\r\n              };\r\n            }\r\n          }\r\n          setStudyStats(newStats);\r\n        }\r\n\r\n        const lastFetchTimestamp = localStorage.getItem(\"lastFetchTimestamp\");\r\n        const currentTimestamp = Date.now();\r\n        localStorage.setItem(\"lastFetchTimestamp\", currentTimestamp.toString());\r\n\r\n        const lastActive = fetchedStats.lastActiveDate\r\n          ? new Date(fetchedStats.lastActiveDate).getTime()\r\n          : 0;\r\n        const timeSinceLastFetch = lastFetchTimestamp\r\n          ? currentTimestamp - parseInt(lastFetchTimestamp)\r\n          : Infinity;\r\n        const timeSinceLastActive = lastActive\r\n          ? currentTimestamp - lastActive\r\n          : Infinity;\r\n\r\n        setTimeout(async () => {\r\n          const incompleteTasks = fetchedTasks.filter(\r\n            (task) => !task.completed\r\n          );\r\n          if (incompleteTasks.length === 0) {\r\n            setAiSuggestion(\r\n              \"You have no incomplete tasks! Add a new task to keep progressing.\"\r\n            );\r\n            return;\r\n          }\r\n\r\n          try {\r\n            const suggestion = await getStudySuggestion({\r\n              tasks: fetchedTasks,\r\n              studyStats: fetchedStats,\r\n            });\r\n            setAiSuggestion(suggestion);\r\n          } catch (error) {\r\n            setAiSuggestion(\r\n              \"Failed to fetch AI suggestion. Please try again later.\"\r\n            );\r\n          }\r\n        }, 1000);\r\n\r\n        setLoading(false);\r\n      } catch (err) {\r\n        toast.error(\"Failed to load user data. Please try again later.\");\r\n        setAiSuggestion(\"Add a new task to get started!\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const completedCount = tasks.filter((task) => task.completed).length;\r\n    setStudyStats((prevStats) => {\r\n      const newStats = {\r\n        ...prevStats,\r\n        completedTasks: completedCount,\r\n        studyHoursLog: prevStats.studyHoursLog || [],\r\n      };\r\n      return newStats;\r\n    });\r\n  }, [tasks]);\r\n\r\n  useEffect(() => {\r\n    const saveUserData = async () => {\r\n      try {\r\n        const serializedStudyStats = {\r\n          totalHours: studyStats.totalHours,\r\n          completedTasks: studyStats.completedTasks,\r\n          streak: studyStats.streak,\r\n          lastActiveDate: studyStats.lastActiveDate || null,\r\n          lastStreakUpdate: studyStats.lastStreakUpdate || null,\r\n          studyHoursLog: studyStats.studyHoursLog || [],\r\n        };\r\n\r\n        const dataToSend = {\r\n          tasks,\r\n          studyStats: serializedStudyStats,\r\n          points,\r\n          badges,\r\n          themes: [\r\n            \"Light Mode\",\r\n            \"Dark Mode\",\r\n            \"Ocean Breeze\",\r\n            \"Sunset Glow\",\r\n            \"Forest Whisper\",\r\n          ],\r\n          currentTheme,\r\n          unlockedThemes,\r\n        };\r\n\r\n        const response = await fetch(\r\n          `http://localhost:5000/api/user/${userId}`,\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(dataToSend),\r\n          }\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\r\n            `Failed to save user data: ${response.status} - ${await response.text()}`\r\n          );\r\n        }\r\n      } catch (err) {\r\n        toast.error(`Failed to save progress: ${err.message}`);\r\n      }\r\n    };\r\n\r\n    const debounceSave = setTimeout(() => {\r\n      saveUserData();\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(debounceSave);\r\n  }, [tasks, studyStats, points, badges, currentTheme, unlockedThemes]);\r\n\r\n  const logStudyHours = (hours) => {\r\n    const parsedHours = parseFloat(hours);\r\n    if (isNaN(parsedHours) || parsedHours <= 0) {\r\n      toast.error(\"Please enter a valid number of hours greater than 0.\");\r\n      return;\r\n    }\r\n    const roundedHours = Math.round(parsedHours * 100) / 100;\r\n    const today = getLocalDateString(new Date());\r\n    setStudyStats((prev) => {\r\n      const studyHoursLog = prev.studyHoursLog || [];\r\n      const existingLog = studyHoursLog.find((log) => log.date === today);\r\n      let updatedLog;\r\n      if (existingLog) {\r\n        updatedLog = studyHoursLog.map((log) =>\r\n          log.date === today\r\n            ? {\r\n                ...log,\r\n                hours: Math.round((log.hours + roundedHours) * 100) / 100,\r\n              }\r\n            : log\r\n        );\r\n      } else {\r\n        updatedLog = [...studyHoursLog, { date: today, hours: roundedHours }];\r\n      }\r\n      const newStats = {\r\n        ...prev,\r\n        totalHours: Math.round((prev.totalHours + roundedHours) * 100) / 100,\r\n        studyHoursLog: updatedLog,\r\n      };\r\n      return newStats;\r\n    });\r\n    updateStreak(today);\r\n  };\r\n\r\n  const deductStudyHours = (hours, completedDate) => {\r\n    const parsedHours = parseFloat(hours);\r\n    if (isNaN(parsedHours) || parsedHours <= 0) return;\r\n    const roundedHours = Math.round(parsedHours * 100) / 100;\r\n    setStudyStats((prev) => {\r\n      const studyHoursLog = prev.studyHoursLog || [];\r\n      const logDate = completedDate;\r\n      const existingLog = studyHoursLog.find((log) => log.date === logDate);\r\n      let updatedLog;\r\n      if (existingLog) {\r\n        const newHours = Math.max(0, existingLog.hours - roundedHours);\r\n        updatedLog = studyHoursLog\r\n          .map((log) =>\r\n            log.date === logDate\r\n              ? { ...log, hours: Math.round(newHours * 100) / 100 }\r\n              : log\r\n          )\r\n          .filter((log) => log.hours > 0);\r\n      } else {\r\n        updatedLog = studyHoursLog;\r\n      }\r\n      const newTotalHours = Math.max(0, prev.totalHours - roundedHours);\r\n      const newStats = {\r\n        ...prev,\r\n        totalHours: Math.round(newTotalHours * 100) / 100,\r\n        studyHoursLog: updatedLog,\r\n      };\r\n      return newStats;\r\n    });\r\n  };\r\n\r\n  const getStudyTips = async () => {\r\n    setAiSuggestion(\"Loading a fresh study tip...\");\r\n    try {\r\n      const timestamp = Date.now(); // Add timestamp to ensure cache miss\r\n      const prompt = {\r\n        tasks: [],\r\n        studyStats: {},\r\n        customPrompt: `You are an AI study assistant for students across all subjects, focusing on improving learning efficiency. Generate a single concise study tip (2-3 sentences) that is clear, actionable, and applicable to any subject. Format the tip as follows:\r\n\r\nHere's a study tip for students:\r\n\r\n- [A clear, actionable study tip that improves learning efficiency]\r\n\r\n**Instructions:**\r\n- **Objective**: Clearly state what the tip aims to improve (e.g., memory retention, focus, time management).\r\n- **Actionable Advice**: Provide a specific action (e.g., \"Use the Pomodoro Technique: study for 25 minutes, then take a 5-minute break\").\r\n- **Scientific/Practical Basis**: Include evidence or reasoning (e.g., \"Spaced repetition helps move knowledge from short-term to long-term memory\").\r\n- **Context/Applicability**: Mention when or for whom the tip works best (e.g., \"Best for preparing over weeks, not cramming\").\r\n- **Examples (Optional)**: Include a brief example if it clarifies the tip (e.g., \"For instance, review your notes 1 day, 1 week, and 1 month after learning\").\r\n- **Flexibility/Alternatives**: Suggest variations for different learning styles (e.g., \"Visual learners can use mind maps instead\").\r\n- **Simplicity**: Keep the tip concise and easy to implement.\r\n- Ensure variety by focusing on a different aspect of learning each time (e.g., alternate between memory retention, focus, time management, comprehension, etc.).\r\n- Do NOT start the tip with \"Practice coding daily\" or any repetitive phrase.\r\n- Do not include additional sections like \"General Study Tip\" or \"Habits\".\r\n\r\n**Examples of well-structured tips:**\r\n- To improve focus, use the Pomodoro Technique: study for 25 minutes, then take a 5-minute break to recharge. This method leverages the brain's natural attention span to boost productivity, as supported by attention span research. Best for students who struggle with distractions during long study sessions; if you prefer longer intervals, try 50-minute study blocks with 10-minute breaks.\r\n- Enhance memory retention by using spaced repetition: review your material at increasing intervals, such as 1 day, 1 week, and 1 month after learning. This technique strengthens neural connections over time, as shown by cognitive science studies. Ideal for long-term exam preparation, not last-minute cramming—for visual learners, use flashcards with images.\r\n\r\n(Request ID: ${timestamp})`,\r\n      };\r\n      const suggestion = await getStudySuggestion(prompt);\r\n      setAiSuggestion(suggestion);\r\n    } catch (error) {\r\n      console.error(\"Error fetching study tip:\", error);\r\n      setAiSuggestion(\"Failed to fetch study tip. Please try again later.\");\r\n    }\r\n  };\r\n\r\n  const generateSchedule = async () => {\r\n    setAiSuggestion(\"Generating your progress report...\");\r\n    try {\r\n      const today = getLocalDateString(new Date());\r\n      const todayStudyHours =\r\n        studyStats.studyHoursLog.find((log) => log.date === today)?.hours || 0;\r\n      const tasksCompletedToday = tasks.filter(\r\n        (task) => task.completed && task.completedDate === today\r\n      ).length;\r\n      const currentStreak = studyStats.streak || 0;\r\n\r\n      const prompt = {\r\n        tasks: [],\r\n        studyStats: {\r\n          todayStudyHours,\r\n          tasksCompletedToday,\r\n        },\r\n        customPrompt: `Generate a short motivational message (1-2 sentences) for a student who has studied for ${todayStudyHours} hours today and completed ${tasksCompletedToday} tasks. Encourage them to keep up their progress in their studies.`,\r\n      };\r\n      const motivationalMessage = await getStudySuggestion(prompt);\r\n\r\n      const progressMessage = `Here’s your progress for today (${today}):\\n\\n- Total Study Hours Today: ${todayStudyHours} hour${todayStudyHours !== 1 ? \"s\" : \"\"}\\n- Tasks Completed Today: ${tasksCompletedToday}\\n- Your current streak is ${currentStreak} day${currentStreak !== 1 ? \"s\" : \"\"}\\n\\n${motivationalMessage}`;\r\n      setAiSuggestion(progressMessage);\r\n    } catch (error) {\r\n      console.error(\"Error generating progress report:\", error);\r\n      setAiSuggestion(\r\n        \"Failed to generate progress report. Please try again later.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const addTask = (newTask) => {\r\n    const task = {\r\n      id: Date.now(),\r\n      ...newTask,\r\n      completedDate: null,\r\n      pointsAwarded: false,\r\n      hours: newTask.hours || 0,\r\n    };\r\n    setTasks([...tasks, task]);\r\n  };\r\n\r\n  const deleteTask = (id) => {\r\n    setTasks(tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskComplete = (id) => {\r\n    const task = tasks.find((task) => task.id === id);\r\n    if (!task) return;\r\n\r\n    const today = getLocalDateString(new Date());\r\n    let newPoints = points;\r\n    let newBadges = [...badges];\r\n    let notifications = [];\r\n\r\n    const updatedTasks = tasks.map((t) =>\r\n      t.id === id\r\n        ? {\r\n            ...t,\r\n            completed: !t.completed,\r\n            completedDate: !t.completed ? today : null,\r\n            pointsAwarded: t.pointsAwarded,\r\n          }\r\n        : t\r\n    );\r\n\r\n    const updatedTask = updatedTasks.find((t) => t.id === id);\r\n    const pointsToAddOrDeduct =\r\n      task.priority === \"High\" ? 30 : task.priority === \"Medium\" ? 20 : 10;\r\n\r\n    if (!task.completed) {\r\n      if (!updatedTask.pointsAwarded) {\r\n        newPoints = points + pointsToAddOrDeduct;\r\n        notifications.push(`🎉 +${pointsToAddOrDeduct} Points! Keep it up!`);\r\n        updatedTask.pointsAwarded = true;\r\n      }\r\n\r\n      if (task.hours > 0) {\r\n        logStudyHours(task.hours);\r\n      }\r\n\r\n      const highPriorityTasks = updatedTasks.filter(\r\n        (t) => t.priority === \"High\" && t.completed\r\n      ).length;\r\n      if (highPriorityTasks >= 5 && !badges.includes(\"Priority Master\")) {\r\n        newBadges.push(\"Priority Master\");\r\n        notifications.push(\"🏆 Badge Earned: Priority Master!\");\r\n      }\r\n\r\n      const totalCompletedTasks = updatedTasks.filter(\r\n        (t) => t.completed\r\n      ).length;\r\n      if (totalCompletedTasks >= 10 && !badges.includes(\"Task Titan\")) {\r\n        newBadges.push(\"Task Titan\");\r\n        notifications.push(\"🏆 Badge Earned: Task Titan!\");\r\n      }\r\n\r\n      const dueDate = new Date(task.dueDate);\r\n      const todayDate = new Date();\r\n      if (dueDate > todayDate) {\r\n        const earlyTasks = updatedTasks.filter(\r\n          (t) => new Date(t.dueDate) > todayDate && t.completed\r\n        ).length;\r\n        if (earlyTasks >= 3 && !badges.includes(\"Early Bird\")) {\r\n          newBadges.push(\"Early Bird\");\r\n          notifications.push(\"🏆 Badge Earned: Early Bird!\");\r\n        }\r\n      }\r\n\r\n      updateStreak(today);\r\n    } else {\r\n      if (updatedTask.pointsAwarded) {\r\n        newPoints = points - pointsToAddOrDeduct;\r\n        notifications.push(\r\n          `↩️ -${pointsToAddOrDeduct} Points. Task unmarked as completed.`\r\n        );\r\n        updatedTask.pointsAwarded = false;\r\n      }\r\n\r\n      if (task.hours > 0 && task.completedDate) {\r\n        deductStudyHours(task.hours, task.completedDate);\r\n      }\r\n    }\r\n\r\n    setTasks(updatedTasks);\r\n    setPoints(newPoints);\r\n    setBadges(newBadges);\r\n    notifications.forEach((msg) => toast.success(msg));\r\n  };\r\n\r\n  const updateTask = (updatedTask) => {\r\n    setTasks(\r\n      tasks.map((task) => (task.id === updatedTask.id ? updatedTask : task))\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (studyStats.streak >= 7 && !badges.includes(\"Streak Star\")) {\r\n      let newBadges = [...badges, \"Streak Star\"];\r\n      let newPoints = points + 50;\r\n\r\n      setBadges(newBadges);\r\n      setPoints(newPoints);\r\n\r\n      toast.success(\"🏆 Badge Earned: Streak Star!\");\r\n      toast.success(\"🎉 +50 Points for 7-Day Streak!\");\r\n    }\r\n  }, [studyStats.streak]);\r\n\r\n  const nextTheme = getNextTheme();\r\n\r\n  return (\r\n    <div className={`min-h-screen flex flex-col ${themeStyles[currentTheme]}`}>\r\n      <ToastContainer />\r\n      <header className={`p-4 ${headerStyles[currentTheme]}`}>\r\n        <div className=\"container mx-auto flex justify-between items-center\">\r\n          <div className=\"flex items-center space-x-4\">\r\n            <h1 className=\"text-2xl font-bold flex items-center\">\r\n              <BookOpen className=\"w-8 h-8 mr-3\" />\r\n              StudyBuddy AI Planner\r\n            </h1>\r\n            <button\r\n              onClick={handleThemeChange}\r\n              className=\"text-2xl p-2 rounded-full transition-all duration-200 hover:scale-110\"\r\n            >\r\n              <FontAwesomeIcon icon={themeIcons[nextTheme]} />\r\n            </button>\r\n          </div>\r\n          <div\r\n            className={`px-4 py-2 rounded-lg text-sm font-medium ${\r\n              currentTheme === \"Dark Mode\"\r\n                ? \"bg-indigo-800 text-gray-200\"\r\n                : \"bg-white bg-opacity-20 text-white\"\r\n            }`}\r\n          >\r\n            {new Date().toLocaleDateString(\"en-US\", {\r\n              weekday: \"long\",\r\n              year: \"numeric\",\r\n              month: \"long\",\r\n              day: \"numeric\",\r\n            })}\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <nav className={`sticky top-0 z-10 ${navStyles[currentTheme]}`}>\r\n        <div className=\"container mx-auto\">\r\n          <div className=\"flex justify-around md:justify-start md:space-x-8\">\r\n            {[\"dashboard\", \"tasks\", \"analytics\", \"rewards\"].map((tab) => (\r\n              <button\r\n                key={tab}\r\n                onClick={() => setActiveTab(tab)}\r\n                className={`px-4 py-3 font-semibold text-sm transition-all duration-300 relative ${\r\n                  activeTab === tab\r\n                    ? currentTheme === \"Dark Mode\"\r\n                      ? \"text-indigo-400 border-b-2 border-indigo-400\"\r\n                      : currentTheme === \"Ocean Breeze\"\r\n                        ? \"text-teal-600 border-b-2 border-teal-600\"\r\n                        : currentTheme === \"Sunset Glow\"\r\n                          ? \"text-orange-600 border-b-2 border-orange-600\"\r\n                          : currentTheme === \"Forest Whisper\"\r\n                            ? \"text-green-600 border-b-2 border-green-600\"\r\n                            : \"text-indigo-600 border-b-2 border-indigo-600\"\r\n                    : currentTheme === \"Dark Mode\"\r\n                      ? \"text-gray-400 hover:text-gray-200\"\r\n                      : currentTheme === \"Ocean Breeze\"\r\n                        ? \"text-blue-700 hover:text-teal-600\"\r\n                        : currentTheme === \"Sunset Glow\"\r\n                          ? \"text-orange-700 hover:text-orange-600\"\r\n                          : currentTheme === \"Forest Whisper\"\r\n                            ? \"text-green-700 hover:text-green-600\"\r\n                            : \"text-gray-600 hover:text-gray-800\"\r\n                }`}\r\n              >\r\n                {tab.charAt(0).toUpperCase() + tab.slice(1)}\r\n                {activeTab === tab && (\r\n                  <span className=\"absolute inset-x-0 bottom-0 h-0.5 bg-current transform scale-x-100 transition-transform duration-300\" />\r\n                )}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <main className=\"flex-grow container mx-auto p-4\">\r\n        {loading ? (\r\n          <div className=\"text-center py-8\">\r\n            <div className=\"animate-pulse flex justify-center space-x-3\">\r\n              <div\r\n                className={`w-5 h-5 rounded-full ${\r\n                  currentTheme === \"Dark Mode\"\r\n                    ? \"bg-indigo-500\"\r\n                    : currentTheme === \"Ocean Breeze\"\r\n                      ? \"bg-teal-500\"\r\n                      : currentTheme === \"Sunset Glow\"\r\n                        ? \"bg-orange-500\"\r\n                        : currentTheme === \"Forest Whisper\"\r\n                          ? \"bg-green-500\"\r\n                          : \"bg-indigo-600\"\r\n                }`}\r\n              ></div>\r\n              <div\r\n                className={`w-5 h-5 rounded-full ${\r\n                  currentTheme === \"Dark Mode\"\r\n                    ? \"bg-indigo-500\"\r\n                    : currentTheme === \"Ocean Breeze\"\r\n                      ? \"bg-teal-500\"\r\n                      : currentTheme === \"Sunset Glow\"\r\n                        ? \"bg-orange-500\"\r\n                        : currentTheme === \"Forest Whisper\"\r\n                          ? \"bg-green-500\"\r\n                          : \"bg-indigo-600\"\r\n                }`}\r\n              ></div>\r\n              <div\r\n                className={`w-5 h-5 rounded-full ${\r\n                  currentTheme === \"Dark Mode\"\r\n                    ? \"bg-indigo-500\"\r\n                    : currentTheme === \"Ocean Breeze\"\r\n                      ? \"bg-teal-500\"\r\n                      : currentTheme === \"Sunset Glow\"\r\n                        ? \"bg-orange-500\"\r\n                        : currentTheme === \"Forest Whisper\"\r\n                          ? \"bg-green-500\"\r\n                          : \"bg-indigo-600\"\r\n                }`}\r\n              ></div>\r\n            </div>\r\n            <p\r\n              className={`mt-3 text-sm font-medium ${\r\n                currentTheme === \"Dark Mode\"\r\n                  ? \"text-gray-400\"\r\n                  : currentTheme === \"Ocean Breeze\"\r\n                    ? \"text-blue-700\"\r\n                    : currentTheme === \"Sunset Glow\"\r\n                      ? \"text-orange-700\"\r\n                      : currentTheme === \"Forest Whisper\"\r\n                        ? \"text-green-700\"\r\n                        : \"text-gray-600\"\r\n              }`}\r\n            >\r\n              Loading your study data...\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"space-y-6\">\r\n            {activeTab === \"dashboard\" && (\r\n              <Dashboard\r\n                tasks={tasks}\r\n                studyStats={studyStats}\r\n                aiSuggestion={aiSuggestion}\r\n                getStudyTips={getStudyTips}\r\n                generateSchedule={generateSchedule}\r\n                setActiveTab={setActiveTab}\r\n                toggleTaskComplete={toggleTaskComplete}\r\n                currentTheme={currentTheme}\r\n                logStudyHours={logStudyHours}\r\n              />\r\n            )}\r\n\r\n            {activeTab === \"tasks\" && (\r\n              <TaskManager\r\n                tasks={tasks}\r\n                addTask={addTask}\r\n                updateTask={updateTask}\r\n                deleteTask={deleteTask}\r\n                toggleTaskComplete={toggleTaskComplete}\r\n                currentTheme={currentTheme}\r\n              />\r\n            )}\r\n\r\n            {activeTab === \"analytics\" && (\r\n              <Analytics tasks={tasks} currentTheme={currentTheme} />\r\n            )}\r\n\r\n            {activeTab === \"rewards\" && (\r\n              <Rewards\r\n                points={points}\r\n                badges={badges}\r\n                studyStats={studyStats}\r\n                currentTheme={currentTheme}\r\n                onPointsUpdate={handlePointsUpdate}\r\n                onThemeUnlock={handleThemeUnlock}\r\n                unlockedThemes={unlockedThemes}\r\n                tasks={tasks}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n      </main>\r\n\r\n      <footer className={`py-4 ${themeStyles[currentTheme]}`}>\r\n        <div className=\"container mx-auto text-center\">\r\n          <p\r\n            className={`text-sm ${\r\n              currentTheme === \"Dark Mode\"\r\n                ? \"text-gray-500\"\r\n                : currentTheme === \"Ocean Breeze\"\r\n                  ? \"text-blue-700\"\r\n                  : currentTheme === \"Sunset Glow\"\r\n                    ? \"text-orange-700\"\r\n                    : currentTheme === \"Forest Whisper\"\r\n                      ? \"text-green-700\"\r\n                      : \"text-gray-600\"\r\n            }`}\r\n          >\r\n            © 2025 StudyBuddy AI Planner. All rights reserved.\r\n          </p>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}